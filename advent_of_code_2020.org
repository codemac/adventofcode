* Day 1
--- Day 1: Report Repair ---

After saving Christmas five years in a row, you've decided to take a
vacation at a nice resort on a tropical island. Surely, Christmas will
go on without you.

The tropical island has its own currency and is entirely
cash-only. The gold coins used there have a little picture of a
starfish; the locals just call them stars. None of the currency
exchanges seem to have heard of them, but somehow, you'll need to find
fifty of these coins by the time you arrive so you can pay the deposit
on your room.

To save your vacation, you need to get all fifty stars by December
25th.

Collect stars by solving puzzles. Two puzzles will be made available
on each day in the Advent calendar; the second puzzle is unlocked when
you complete the first. Each puzzle grants one star. Good luck!

Before you leave, the Elves in accounting just need you to fix your
expense report (your puzzle input); apparently, something isn't quite
adding up.

Specifically, they need you to find the two entries that sum to 2020
and then multiply those two numbers together.

For example, suppose your expense report contained the following:

: 1721
: 979
: 366
: 299
: 675
: 1456

In this list, the two entries that sum to 2020 are 1721 and 299. Multiplying them together produces 1721 * 299 = 514579, so the correct answer is 514579.

Of course, your expense report is much larger. Find the two entries that sum to 2020; what do you get if you multiply them together?

To begin, get your puzzle input.

#+name: day1_input_1
#+begin_example
1953
2006
1926
1946
1722
1776
1924
1860
2002
1920
1911
1750
1657
2005
1829
1693
1717
1844
1642
1875
1741
1755
1688
1700
1842
1598
1942
1599
1710
1627
1915
1913
1814
1852
1564
1877
1569
1669
2009
1807
1906
1838
1794
1839
1783
1851
1716
1705
1914
1786
1812
1616
1997
1718
1984
1751
1810
1928
1701
1632
1948
616
1981
1878
1903
1690
1836
1631
1649
1562
1707
457
1861
1843
979
1605
1652
1596
1730
1560
1886
1802
1614
1929
1570
1907
1950
1969
1629
1769
1575
1932
1983
1781
1954
1663
1644
2004
1772
1044
794
1882
1808
1831
1635
1976
1834
1855
1721
1372
1777
1702
1945
1788
1989
1819
1874
1720
787
1806
1966
1949
1694
1752
1887
1687
1943
1665
1774
1645
1900
1661
1968
1706
1586
1977
1691
1991
1870
1865
1764
1967
1714
1594
1429
1647
1858
1805
1561
1895
1559
1988
1565
1799
1862
1578
1664
1816
1628
1960
1775
1746
1324
1835
1658
1918
1671
1957
1864
696
1679
254
1017
1622
1601
1592
1782
1767
1825
1655
1784
1896
1965
1600
1963
1840
1749
1970
1980
1936
1685
1790
1902
1729
2001
1638
1986
1879
1847
1866
#+end_example

#+begin_src scheme :var input=day1_input_1 :results raw :exports both
  (define (find-2020-additions nums)
    (filter (lambda (x) (not (null? x))) 
	    (map (lambda (z) (filter identity z))
		 (map (lambda (x) (map (lambda (y) (if (= (+ y x) 2020) (* x y) #f)) nums)) nums))))

  (define (parse-input in)
    (filter identity (map string->number (string-split in #\newline))))

  (find-2020-additions (parse-input input))
#+end_src

#+RESULTS:
((921504) (921504))


--- Part Two ---

The Elves in accounting are thankful for your help; one of them even
offers you a starfish coin they had left over from a past
vacation. They offer you a second one if you can find three numbers in
your expense report that meet the same criteria.

Using the above example again, the three entries that sum to 2020 are
979, 366, and 675. Multiplying them together produces the
answer, 241861950.

In your expense report, what is the product of the three entries that
sum to 2020?

#+begin_src scheme :var input=day1_input_1 :results raw :exports both
  (use-modules (srfi srfi-1))

  (define (dos-combos nums)
    (cond
     ((null? nums) '())
     ((null? (cdr nums)) '())
     (else
      (append
       (map (lambda (x) (list (car nums) x)) (cdr nums))
       (dos-combos (cdr nums))))))

  (define (tres-combos nums)
    (cond
     ((null? nums) '())
     ((null? (cdr nums)) '())
     ((null? (cddr nums)) '())
     (else
      (append
       (map (lambda (x) (cons (car nums) x)) (dos-combos (cdr nums)))
       (tres-combos (cdr nums))))))

  (define (find-three-2020-additions nums)
    (filter (lambda (x) (= 2020 (reduce + 0 x)))
	    (tres-combos nums)))

  (define (products nums)
    (map (lambda (x) (apply * x)) nums))

  (define (parse-input in)
    (filter identity (map string->number (string-split in #\newline))))

  (products (find-three-2020-additions (parse-input input)))
#+end_src

#+RESULTS:
(195700142)

* Day 2

--- Day 2: Password Philosophy ---

Your flight departs in a few days from the coastal airport; the
easiest way down to the coast from here is via toboggan.

The shopkeeper at the North Pole Toboggan Rental Shop is having a bad
day. "Something's wrong with our computers; we can't log in!" You ask
if you can take a look.

Their password database seems to be a little corrupted: some of the
passwords wouldn't have been allowed by the Official Toboggan
Corporate Policy that was in effect when they were chosen.

To try to debug the problem, they have created a list (your puzzle
input) of passwords (according to the corrupted database) and the
corporate policy when that password was set.

For example, suppose you have the following list:

1-3 a: abcde
1-3 b: cdefg
2-9 c: ccccccccc

Each line gives the password policy and then the password. The
password policy indicates the lowest and highest number of times a
given letter must appear for the password to be valid. For example,
1-3 a means that the password must contain a at least 1 time and at
most 3 times.

In the above example, 2 passwords are valid. The middle password,
cdefg, is not; it contains no instances of b, but needs at
least 1. The first and third passwords are valid: they contain one a
or nine c, both within the limits of their respective policies.

How many passwords are valid according to their policies?

To begin, get your puzzle input.

#+name: day2_input_1
#+begin_example
2-7 p: pbhhzpmppb
3-6 h: jkhnhwhx
5-6 x: xxxxxmxf
10-11 r: rrrrrrrrrrkr
2-7 n: mcfmxnnnwnztnkrqdwd
1-2 t: ssgt
5-7 l: llnlklll
4-18 b: hfbzbbbbbbbhbbbbbbbb
15-18 x: xxxxxxxvxxxxxxpxxx
5-8 k: kmlkkkgk
12-13 l: lllllllljlplqlll
1-13 m: hmmmmmmmmmmmxm
2-4 z: wzzz
5-13 r: rrrrrrrrrrrrdrr
2-13 k: wkbwczdmrgkklvxpppfx
2-5 h: lhhhvw
7-8 l: fkvkgltl
1-6 w: wwwwwwwwwl
4-5 p: ppppgw
4-5 k: kkkkkqk
2-5 t: tjttttt
1-10 k: kkkknqxfszj
14-16 j: jfjnbjmttjvwkjhq
1-4 h: hhhhhhhhhhh
1-6 t: jglbqlwjwgkcgkrh
1-4 b: lbbbb
12-13 t: thtttttttttvq
1-4 j: zgsjn
8-11 l: rllltlllslllbl
5-7 h: hhmhhhhhhhjhhhhhhhh
3-13 m: mfmmntkhbrswr
3-5 p: kcppn
8-9 s: ssssssssh
5-6 t: ttlchw
1-6 d: dddkdgdddddddjdd
11-14 n: nntnjpnnwnqnfgnnnnn
2-8 p: pqpppprddpp
9-10 k: kcgkkkkkkk
5-8 d: drddddpdd
3-4 c: kgcvcw
1-12 q: gqfqwqqqqqqqbjq
10-15 z: zfzzzzzzzmdzznjjzpz
1-5 p: cppspppgpspbvj
14-20 c: cccvcccccccrcccccpcc
4-5 j: jjjjq
5-7 f: vpgzrndzvgdrrfhbgbz
3-6 f: ffmzxkff
16-17 t: ttttthtttttttttttt
5-7 x: xbxxxxxxl
3-6 v: vhglzvvvd
3-5 n: qnndv
7-10 q: nhqsqnqlhqqqzqqxgq
3-5 f: fnfrd
3-12 l: jgrzdzvqbrllsljfl
15-18 h: hfvhhhhhhxhhhhhhhhh
4-6 j: cjjjjjjz
1-3 k: pgkc
10-16 n: nnnnnnnnnnnnnnnnn
10-11 n: nnnnnnnndmln
2-7 n: ljwspmb
3-12 r: brrrrzrfqjprsrngvjw
2-3 g: ggzg
11-12 b: qvbbvmxbbbhb
1-5 f: ftvdbzf
16-17 s: ssspskbsssssssszmsss
3-4 x: fxxfxxt
3-7 c: jscxgnm
6-9 s: spqsstbscrbhbsb
11-12 n: nnnnnnnnnnnmn
3-11 r: rrjkrxrsrbrncbprr
3-6 r: rrrrrrrr
13-15 j: jjjrrjjjtjjjjjjjj
8-20 g: gggggggzgggmgggggggn
14-16 l: llslllllllllllbkfl
4-10 l: tpgxptlqxlksp
11-12 w: wwwwwwwwwwbr
1-8 q: qqqqqqqqq
11-13 c: ccjccccctcccw
1-9 s: nmssmsssskhsss
6-9 x: xxxxxxvxlxx
10-13 h: hhhhhhhcccksph
8-9 j: jjjjjjjvhj
7-9 d: znddxddlb
2-11 s: nmsmssssrcs
5-6 c: cccccxgc
5-11 j: ndqbqgjjdjjmj
4-13 g: gxjmwgkzxgggmg
4-5 g: ggggkggg
7-10 n: dnnpnnnnznn
4-5 k: ghkwkck
4-11 z: zzbszztzmzf
8-10 p: vmpvspxnhs
9-14 z: zzzxzzlzzzzzzd
1-4 w: vwhphw
9-10 w: tswwgwzlww
2-5 n: vdbnnljmwfjwknhd
4-5 m: mpmxmm
12-19 d: dddddddddddddddddddd
8-11 c: bcccwnfdnwjgccbwcjc
9-11 q: jwzfskvscqj
11-13 m: pmmmmfmmmmhmftmmmmp
1-2 c: lcxcbdhcmscj
17-19 j: jjjjjjjjjjjjjjjjxjwj
7-9 f: ffffffgfz
3-4 b: bfbb
18-20 q: spxfrghllqxwrgjrzqwf
1-3 w: wwwww
10-11 j: jjjjjjkjjjr
5-10 n: mhqhwflnpr
3-5 q: qtsqk
4-7 t: ttkthrtfdt
6-7 r: rrrrrlgrr
8-10 m: jmmmmzmmmdqwmlqlbdvs
10-13 n: ngqntnnnnbnnhzn
5-8 m: jdcmjmmt
8-13 h: dmgkbdhbhwphh
11-13 q: ppjwqnqqqhfqqdgzgqx
2-4 b: bvbvbq
9-10 j: jjjjjjjjzmjjjj
5-10 k: kzkkkkkkkqk
6-8 b: bbbbbbbsb
4-16 d: tvgdsqhnldtsdtxj
6-8 n: dndnnznndk
5-6 s: srlclsqvkbr
2-4 x: xbxsx
1-9 g: hgggggggrggggg
7-9 n: nnnnnntnnncnnlnnnnnn
7-10 x: wxxhfxslxwdlhxvmxqt
14-16 k: ckmrzcktfjqlqdxx
5-11 l: mllljlkjllpzl
7-11 s: sstsksmfsks
3-4 s: rkxx
3-5 n: rnhnnn
7-8 j: jjjjbjgw
2-4 b: lsgb
5-13 d: ddjdxddlddgdvd
12-13 g: zrjgggdzgbxcr
10-11 p: ptphppcsppppcpspsv
6-10 x: zdxxxwxxxxpxxs
13-18 v: bvvvgqvvvvvmvvtvfvvv
2-4 j: djwbx
10-14 c: pcccczpcfccccc
11-12 x: xxfdpxqgzjtxjfr
1-12 t: rtttttttttttttttttq
3-5 f: fvnsffl
3-12 p: jdvpwgtmsmmphcl
6-9 s: sssssrsss
7-14 c: ccccrcgccccfkcxz
12-13 q: qhftwgcslmlgjpm
6-9 q: bqdqbqqsqrvgbmqbqs
1-7 t: lmtcktrhgd
3-4 m: mcmmmdmw
8-9 g: gglggggghgggggggsggg
6-9 b: bnbbbrbbfbbbb
7-9 t: tttttttgpt
3-6 h: hhshhqhhhhhhhhhhhh
1-7 w: wtbwgpv
7-9 t: tttqctktbbtt
5-6 s: pnwzskmh
10-11 v: dfpdvxxrxpvv
15-16 k: qkkkkkkkkkkkkkkkc
1-3 s: msvss
13-14 g: gggggbgfggggggk
2-4 b: xbfbqlqxcxb
5-7 s: brksswcsd
8-12 z: zfrstgvpwgtzz
5-8 j: jjkrjhjjvkxngrqklnvm
4-7 j: jjjjjjgj
14-16 q: qdfnpmznngjjkqdqqcgx
15-16 q: qqqqqqqqwqqqqqbf
10-15 x: xsxxxxsrrxxxxxxxx
10-11 h: hhhhhhhhhhhh
4-8 l: qlllllls
5-6 f: fffnft
5-12 n: nlmfnzgvgnldnk
3-10 q: vhbqdvjznvxstsqpnr
16-17 g: gggggggggggggggqggd
4-9 z: zzzczzzzgz
8-10 w: wwwwwwwbwlw
6-7 l: lfllllcl
4-5 m: mmmdfm
8-9 f: ffffgfffxffff
4-7 g: ggggggwgg
12-13 c: fcckcccqlccjpccc
16-17 g: ggggggqphggggggnggg
2-10 v: jdpqlbxhcvxsw
14-17 b: tbwgtxtjqdrjsbhfk
2-3 r: rzrd
12-18 n: nnntjcnvxnnbhjncsp
4-11 d: gjqdlnlkhlvdp
6-16 r: rfrpnprkqrrrdnrm
4-6 x: dkxxgg
8-9 x: xxxxxxxxj
2-4 t: sxrtphmxfb
17-18 g: mggggggggggggggggrg
3-4 c: zqgdfc
1-12 n: nnnnnnnnnnnhnnnnn
5-7 t: tttttttt
7-8 k: kkkkkkmb
8-11 n: nnnnnfnnrgnnn
6-8 m: jmkmpmxt
9-14 t: vzhtgdkrtncjgz
2-16 h: xhkxnrsdndhbfswwvfr
14-16 z: czzfwzbvfwwfmzkbm
3-4 p: pppt
2-7 n: hglwdnds
18-19 l: llllllljlpstjlmxllj
4-9 z: hzxknghmqllg
3-13 w: wbwwwwwwwrwwmfww
12-13 q: qqqqqqqqqmqqqqp
3-5 b: rbcbqb
13-15 t: ttttttttttttgtv
9-11 h: hhhhhhshfhhhhhhhhh
4-5 d: ddsdd
17-18 c: xcqcccfcccnscccccvb
2-3 z: qgqc
3-8 c: cpvsqnwxv
3-11 r: zrgqrrrkvxhlh
5-7 h: xvhbmhhg
8-16 n: nnnknvnrfhntnphdnn
12-13 k: kkkkkkkkkvkkt
8-10 n: nhnnnndnnj
2-8 h: zhgptrkxk
1-6 m: mmmmmqmm
3-4 g: gggggd
4-7 k: kkwpsxkjkksk
4-6 s: sssssw
4-6 q: jqxgnk
3-9 l: llzvtlllj
2-4 s: stsxsssvs
15-17 b: bbbbbbbbbbbbbbqbtb
17-19 m: mmmmmmmmmmmmmmmmdmp
3-4 w: wwww
1-4 b: bbbbbtb
10-16 b: bbbbbbbbbbbbbbbb
16-17 d: dsksvpjsjhdzdfkdw
8-9 s: ssjssssqssssssssssss
8-12 g: gggvggggggwngw
3-6 h: bhrphb
12-18 n: nnnnnnnnnnnxnnnnnnn
5-13 j: xjjjfjjcjjjjp
2-3 c: clbc
3-4 l: lllbl
2-7 v: hncqbwvg
8-11 n: nnnnnnnnnnt
1-8 j: xjjjjjjjjj
10-15 h: xhhnhhhhlhkhhhhhhh
2-4 c: ccccc
13-14 x: xxxfxxxxxxxxvxxxp
3-11 h: hhhhhhrhgthhvxhz
1-11 k: kvkwtwkkkkdd
13-15 l: lllzllllllllllvlll
6-8 b: bbbbbbbb
4-15 b: bscbpbjlctwjdpmrzhth
3-6 j: jjjjzj
7-9 x: fsxxxnzbx
11-12 t: ttntmctrttgzp
2-5 r: rzrrrrr
2-12 b: wmpnbbhlbltbbbbxz
8-9 t: pxzzcttvt
10-13 g: ggsghggwgjgbhgcgj
7-8 m: mmmmmmxsw
4-9 n: fnfqhnbpnqzqzn
6-7 m: fmwmmmm
2-4 g: grgb
3-5 j: wjjcw
2-4 p: kplpnhpprmzx
12-19 w: wwwwlwwwwwwfwwwwwwww
7-8 x: xxmxxxxx
1-3 z: zfzzz
8-11 q: cqdxsqqqnknn
14-15 v: vvcvvvnmvvvfjqvv
9-10 h: hhhhhhhhfw
3-4 f: dsffnfjrsghfnrfctx
5-12 x: xxxxhxxxxxxzxxxx
9-14 l: llllllllrllllll
10-13 w: wwwwwwwwwxwwbw
4-8 g: gggphggg
1-2 p: nppp
1-5 m: fkjhdqmcbcmm
7-8 v: vlvvvvxvvv
1-13 q: qmjrfwkqpqpjmrpjjwh
13-14 z: zzzzdzzzzmzzchz
6-9 w: wthrljwwbw
3-4 d: ndrdlnlxdxsvkdlmqpq
1-2 l: cllllll
1-3 v: spvx
3-6 r: rrrvrjr
3-4 m: hmdsm
6-9 r: lxrrxdzrr
8-11 b: snqbjkzbpzbpbgrgb
1-4 k: kkfkndcllgz
8-17 d: ddddddddsdwxdndddd
1-4 w: wwwcw
12-18 x: rxxbmvxmhqthxxwnxx
17-18 v: vxvvvvvnvlvvvvvvvv
5-6 z: zzzzfz
3-6 z: fzlzpg
4-7 w: wwhwwwwgfww
7-12 h: hjhwhhhpzthj
2-8 b: dbjbbbrbm
2-8 b: fbjgcbbbrrnlbqbbqgp
6-7 c: wscbccr
2-18 x: xxnsrxxxxrgxxqxxxxr
1-16 k: wpxkwkhkxswkqklpphdk
4-7 q: qqqrqqqc
11-15 x: xxxxxjxjxxxxxxlkx
1-3 d: ddxkb
7-8 b: bbqbbbkbb
6-10 p: ppppphppptw
12-14 x: xxvxvxxxxxxnxg
8-9 q: qqsqqpqjq
1-3 l: nljl
17-18 f: ffffffffffffffffff
5-6 z: czzcrzpzzkcv
2-6 s: ssdsss
11-18 m: nmmvmgmmmmkmmmmmmmm
1-10 j: fjjjjjjhjj
5-6 w: kwhzwtlwwrw
14-15 v: vsvvvjvvvmvtpvvzv
13-18 m: nmmprgbmhbmrmkfnwqvd
5-11 x: xxxxmxxxxxnx
5-10 m: mnmmfmmhmpmprhm
5-13 x: xxxxwxxxxxxxvx
2-12 q: lqhwhgbcvsnr
8-13 k: kkkkkkvmkklkkkk
5-13 g: ggmfntxjvpdgsggtc
1-5 h: hhghhf
13-15 p: pppgppppmfpnfpjpsdnp
10-20 q: qqqqqqqqqbqqqqcqqqqw
5-9 m: pldlmvgqnhxvmnmdwbgp
1-3 r: vrmrnbr
6-7 v: vvvvvvv
4-6 x: xxxwxx
5-7 w: lswpwwclww
9-14 q: qqqqqqqqqwqqqqqq
8-10 h: hqcclwxhhhbds
18-19 c: cccccccccccccccccclc
1-3 z: xzzz
1-5 k: kkksl
1-6 c: ctfcbg
8-10 p: pppppppppwpppp
7-8 z: ztzzzcwfzgz
12-18 v: vvvvvvvvvvvvvvvvvqvv
3-5 j: jjtjjj
11-13 t: tttttttttttttt
1-7 j: jjqfjprjjjjj
11-16 l: llltllcklfqklnljl
2-3 g: kwlgghsrrskhltrnv
3-4 g: gggrnzfgq
12-13 x: nxxjxxxjjxxcm
3-7 z: pvhtqsdrnzvdscddpl
1-10 m: tqjnhztzzbvsprhfdjr
3-16 h: hhjhhhhhhhhhhhhhhh
5-9 v: jkpmqvvzv
3-4 g: gngs
8-18 q: qqcqqqqzqqzqqqqqqqq
12-16 d: ddgdddddzdddddmh
9-10 c: nwcccccmcpcc
9-10 q: qqcqqqqqlqq
2-8 p: dfxpsdblhcpr
12-13 m: lmmmlmvmvmmkn
5-15 s: sssssssssssssskssss
2-5 x: xcxgm
1-10 w: lwnvwwzcwwtwwh
8-13 h: hhhhhhhhnwhhhhhh
8-15 m: zmmmcmsrmdmbmmmmnmm
7-13 v: khjbvgsncvvfxhnmdv
15-16 b: bbbblkkfsbwbbbbh
3-4 m: dzmq
5-13 k: gkwkkkvkrkkkkwkksvkk
7-10 h: jhbhpwhhhhshkfrtfsh
13-17 z: zpnzzzzlczzzczzzkzzz
11-14 g: gggggggggglggg
11-12 m: mmmmmmmmmmjmmmh
17-20 p: pppppppppppppppppppp
8-12 n: nkgnnnnnnnnbnn
4-6 m: mfdxcz
9-10 z: zzzzzzzzzzzzzzg
1-6 p: sppppsggwx
1-10 v: vvhvwvvbvl
1-5 w: rwmwv
4-5 b: bbbbz
14-15 k: kkkkkkkkkkkkkkck
6-9 h: hhhhhhhhhhmh
4-5 v: vdvmv
13-14 x: hxxrskxxtwxrqp
5-12 c: zvczbchcxvcn
7-8 j: jjjlwjtlj
15-18 j: jjjjjjjjjjjjjjsjjjj
2-6 r: brcnrcrrwr
6-8 q: qzwqqxkx
11-15 p: ppplppsfpppppppps
6-7 g: ggpffgg
10-11 q: bqqqfqmbqmq
7-10 g: vvbzgmgggg
7-12 p: jjjppjxpwrdp
1-11 p: pnvpphxpppplppbxsppp
8-9 s: ssrsssszrssm
13-18 v: vvvvvvvvvvcvxvvvvvv
3-11 l: llnllldlllllll
5-6 q: sgwqqw
8-9 z: zzzzzzzzz
11-13 f: ffffffffffpfcffj
1-2 g: hggkq
2-3 m: xmjsmc
12-13 r: rnghmlwvrzwfqdrrrrz
3-4 w: wwwmfr
6-16 t: tttttzttttttmttttt
10-14 v: vvvvvvvvvtvvvhv
2-4 m: wxnmrm
3-5 x: xmwkp
3-6 j: mnbdwgmvjmptj
4-7 n: cgtdvsjnmrgk
7-18 h: hchhhjflchhhtzhmvz
4-7 g: gzxjgnggnggkc
2-9 b: pdcbbgvwc
3-13 s: ssksxsvslssjsssgss
3-4 v: vvvdvf
6-15 k: qkkkkkkkskkkkkkkbkkk
6-7 h: hrwgqhh
9-12 r: rcrwnrrrgrrtrrrz
4-7 q: qqqqqqtq
3-16 m: hqmqsjzskqnmcpfm
1-15 v: vpbvvfvvvvjvvbv
5-6 r: rrrrrjr
5-7 n: nnnnnntpn
4-5 d: dfddckzbdd
8-9 f: fffffffzdf
10-11 b: bbbbbbbbbgb
1-4 d: xrqw
8-16 q: qqqdqqqqqqqqqqqqqqq
5-6 w: wfwwsr
10-17 r: rrrrrrrrrhrrrrrrrr
2-8 k: kqsflkkk
3-10 f: fffpjffffpwd
6-9 j: jvjjjjnvkjgj
5-6 m: mmmhrrmm
1-5 l: lnlllllwcpvb
1-2 g: vcgg
9-14 f: gspffffxltkfghzt
16-17 l: llllllllllllllllll
4-6 m: mmmvmnmm
5-6 v: vvmvvk
5-8 l: lfkmnkblnghwstb
5-16 x: cktkxnckcpftdxtdbz
4-5 b: bbbmbb
8-9 w: wwwwwwwsw
3-4 b: gwbd
9-12 s: snssxssssssss
7-10 v: vtdpvxvvvvgvvvctl
11-17 c: dvfqpkmvzcwgvhcwcp
3-4 s: sssr
3-7 v: zplhwfvtvwv
2-3 j: jjjj
3-11 v: vvsvvvvvvvvvv
9-10 h: hhhhhphhhh
9-16 m: mkmcmmmmcmmmdcmmsmmr
1-3 g: jgqgg
4-18 s: ssswsssssssssssssrsc
4-5 s: fsmgnhtlqbspcst
4-5 k: nmthkhkzkbkdvrwhnk
3-7 n: xptlnfnnnf
8-11 t: ttttttgtttttt
1-11 t: mtttttttkgtsttttlq
3-8 h: xhhffqshhnzhg
6-7 l: lllllgd
4-9 d: cndddhfdzvn
7-10 t: ttttwttzttkpttrdt
4-14 m: mvsbxkwmcmnmrmjmv
8-9 q: qjqqqhpqq
4-6 t: ttttttt
11-12 j: jjjtjjjjjjvjj
4-5 t: lvlpv
17-19 v: mvvvvvvvvvvvvvvvvxvv
2-4 p: dpjkz
4-5 z: zzzkzkz
9-13 f: ffcffnfffdfhffff
9-16 b: bbbbdbbbzbbbbbptbbqb
15-18 j: jjjjjjjjjjjjjjzjbf
2-8 p: qppnstfp
4-7 d: pdgqdhj
6-15 s: shrsssssstssjsbssvts
11-12 r: rrrrrrrrrrrg
2-12 b: jpgpmbvvfvlx
10-12 k: skkkkkkkkkkkkhwk
1-2 l: llllp
3-8 c: cccccccc
1-15 j: pjjjjjjjjjjjjjjj
2-9 n: nnnnnnnnnnnnnn
17-20 c: gqzgqvtxjqmqccwqcmcc
14-15 z: zzzlvzqnzzzzzzz
2-5 b: bbbbbb
11-14 s: hsdpssvlzsxssm
18-19 l: ldllxlrjflllvllllhl
9-12 k: kkkvrjskkdfv
10-15 n: wnnnlnnpnnnsnrnn
1-3 h: hhdh
10-12 p: ppprppppppppp
1-3 h: hhhh
10-11 w: wwrwcwwvwwh
11-19 x: xdxcqxlrlvcxxdwdxbx
9-10 s: sswssjrsssdswswspzrh
10-11 n: nnnnnnnnnnn
7-8 j: jjjjjnjjsjjjhv
3-7 x: cnxxvxzcxxndx
3-4 g: ggrg
16-17 h: dvhhrqqrhkgbblgvh
9-19 v: vxvvvvvtdmvvvvvvvvvv
4-9 g: ggtjgxqsm
6-8 c: cpxjcrcc
11-19 w: wwwwnpwjwlwwwwwwwwww
1-2 r: rrrr
11-14 f: ffffffhvffbfnz
8-10 t: tvpctqphvs
8-12 l: flmpltlhldgblllmj
9-10 n: nnnnnpnnpn
7-12 b: bbblbblbbbbbbb
3-7 l: lxlblrkrrld
10-11 d: xhdddndtddw
4-5 t: tttbtttt
7-10 r: rrrrrrrrrrrrr
6-15 w: rlnpwwtztjlwnswsjc
10-11 c: ccccchcwcckmfglrfc
3-4 t: szdd
1-3 x: xckcj
3-7 b: dzvqgbb
2-3 c: dpft
12-13 d: ddddddcddddxd
8-10 h: cshhhhhhhhhr
7-11 h: tlxhfzwjhhh
2-15 j: crvqjnvgxmlljmj
2-8 m: wmdhzmmmlmsmqmm
7-8 z: zzzzzzfh
3-4 c: cccr
2-4 w: rwhw
5-12 f: fvfqxkthvdmbftfncf
8-19 j: rjjwhfzqjjprpsjgmvrq
2-3 l: trlrkhgmz
14-15 f: fwfffffffffnfmfff
6-8 t: tqttttrwtttk
1-6 v: vvvvwvvvvvwvvv
3-6 d: lbbdvd
11-18 q: blcqvfwprpqzznxpdq
2-10 f: lffxfffqnzfqfbgfs
13-15 j: jjjjjjjjjcjjqjfjj
11-13 r: rrrhrlnjzslrrmrrw
16-20 f: fhfffffffffffnffffff
2-3 q: nqqpqq
15-17 c: ccccccccccccccccc
3-9 v: kjnfnvvvvvvvpvvvvg
2-4 z: czzgxzbzzzznzzhzr
6-10 p: pcgpkhcppsppjp
2-3 g: mbgbfhtgd
13-14 b: bkcbbbbbhbbrqvbt
9-13 p: slsdztqphpppl
6-8 b: bmbjmbbt
11-19 q: bgxbqpfmclhfnqvfckqj
5-8 h: jxhhqhqthhhgmhsrc
6-7 d: bjdphddd
1-2 x: txxxx
5-8 h: hltghsnqrhq
14-15 b: brlbqkcpsrppfbx
4-12 n: rwsnnngpnnln
4-6 w: wwwwwww
1-6 v: svvlvb
5-12 n: nnnndnnnnnnrtnnjn
4-8 x: xxxhxxcz
1-8 j: jjjjjjjmj
1-5 m: mmpmr
1-6 b: bknzjpcztb
1-14 n: nnsmpdggcqsszrkxfxsx
3-5 v: sdcgw
6-12 x: wtxxnxldvfljxwl
1-4 j: njzjjjtkjw
3-10 g: ggrpgngggsgk
2-7 g: jsbftgg
10-11 z: bqznzxdlcnz
5-6 r: rrrprr
11-13 l: lttvqkjmtghlwllldl
2-8 v: bvsvvvdv
1-2 k: kkjkl
18-19 c: cccccccccccccccccqc
14-20 n: nvnlnnsnbtnrpzgnjbnm
8-9 l: lxltrllzl
3-4 l: llhzl
4-5 z: zmnwk
3-9 l: llmlllllqllllllsll
6-11 n: fngcpdccnxr
12-17 q: qqgqqqqzqqxqqqqqq
6-7 n: nhntjzn
7-8 w: wwwwwwww
9-10 c: cccccccckx
1-3 l: llprl
5-6 x: xxwxxmxxrj
12-17 b: bbbbbbbbbbbrbbbbb
2-8 b: bbnnkssb
2-12 z: rdcqnwcwnlpzz
3-4 n: nnngnnn
9-12 v: vvvvvlvvvvvv
3-16 s: sbsvvzwjssssssss
7-10 s: ssxshssbslsrssgs
7-9 j: vnlhjcnjj
10-13 f: fpffffffffffffffff
14-19 v: vnvvvvcgvvvvchvvvvv
7-8 c: vbcqtzccccwhv
19-20 h: hhhhhhhhhhhvhhhhhhhr
1-4 g: gmggg
14-15 d: dddddddddddddnsd
4-11 w: wjfwscxnlmvq
2-10 h: khjfhnxdwh
5-14 b: jpfblwbsmwgbqbbs
5-6 m: mzmmbzmm
2-8 p: pkspsqpppppprf
3-4 n: qdnnmrnxjhwtwwjjdz
9-14 p: pbrnpppfnpplbpppjpp
4-5 r: rrrssk
5-6 w: scwwdt
7-11 z: fwlckzmzqrqt
2-6 j: jjfjjhfjj
1-6 c: cspcgczscbxgccc
3-7 l: lllfldblcl
5-18 f: ffffrfffffffffxffff
18-19 j: jjjjjjjjgjjjjfjjjsjj
11-12 f: fffnfffxkfzf
3-6 h: hhhqfhvbjhhb
1-3 l: gplzqfxlc
6-13 t: tbsptltttnttt
3-5 p: lpppd
8-13 s: gksrfqdsmxdsssdr
8-19 m: pmmphmrnmkmzmmhmmmmm
3-4 t: ttmxt
4-7 x: szxlhxxxdxdx
4-10 t: tttttttttb
2-5 p: pcpppp
13-20 b: bbbbbbbbrzbbbbsbbdbb
1-13 w: pwmwnwwwswwwwwwww
5-6 t: tttttcttpttttttttttz
12-13 t: tttttttttttjt
6-7 j: swjxjjjjj
5-17 g: gggggggggggtgggmgggp
7-12 h: mkhthqhhhhhsghhhdhjw
3-6 z: mndzrzs
2-4 m: mfmh
11-15 f: ffffckxfffffffgfmf
4-10 w: spdwdlmjjw
14-15 g: gggggggggggggggggg
3-5 h: bmrfxqkvhrhbrdvx
3-6 j: fjjgfjljjjjkjqjzj
3-5 t: wfttbtt
1-7 g: tgggggqggg
10-11 c: ccccbccccccc
1-2 w: pmww
2-5 j: hjzwjrnjg
3-6 x: cvxxcxmnt
6-7 w: wwwwhvqw
8-11 l: sbtflqzllrl
12-13 f: fmfffffffflfvfj
7-8 l: llllllbl
3-6 b: bbbbbj
7-14 t: dqmjszsmttjmttkstcv
5-11 n: nnvnnbnnnhnnpv
2-15 n: nfnnvnnnnnsnsnzp
10-16 n: stfntnnnnnnnnnnnnnrn
1-2 m: mcvmsrqjmmmm
2-5 w: wwwwpwwhs
6-8 b: lbcbctdb
2-3 m: sdcrmxbmzhwmcqs
3-5 t: gghtl
15-17 b: wbzlbrfqnbbbbdzvb
8-18 h: zzmvdtltdrpsnptmvwl
5-7 t: ttttrtt
6-7 g: gggggkg
1-4 t: mtftdtk
6-11 l: ljlllllsswlllll
4-5 l: clllt
2-10 c: dkccccccccccccccc
16-19 h: hhhhhhhhhhhhhhhhhhh
13-17 p: spppkvxpcpppppppm
2-3 k: kgkzp
3-4 j: jqvrsjscb
2-3 q: nqqssfdlgqvhwmqdkr
1-4 l: tllchllllll
2-7 x: cxjdqxtjnhpc
11-12 f: fffffffffffvf
2-8 k: jnbkbtllhvpkk
5-16 p: ppppppppppspppplpvpp
8-10 x: xxxxxxxsxx
7-11 h: hhhwhhhhlhchh
5-7 d: ddddkcbpgm
11-19 z: zzzzzzzkzzffzzzzzczz
3-8 m: mmbmmmmmmt
2-3 r: rrtbnzrr
4-5 j: jjjjjjj
3-9 f: ffkfffffffffff
3-5 x: hxxhxxxp
13-16 t: tgtjjtqksttgttrj
6-14 v: vvvhvvvvvvvvhgvvhvc
3-7 r: pwrnfrwz
2-5 g: gngghg
2-4 c: cccg
6-7 t: fdttttcf
10-15 f: fffsfrfffffffbffffff
11-14 v: lvvvvvvlvvvxvr
6-14 n: ntgnnnnvzqnlnkn
5-6 q: qsdwgqq
5-10 b: fbgbzbbpllbcbbsbb
6-8 g: lfncdwsjggmgt
5-13 f: fjffzfffffffhfff
6-8 n: nxjnfnnl
8-14 p: zfzkfgrpkmpxdhpthpb
9-10 j: jjxmjjzmjjjdjjxjq
8-18 l: glsllllllllllznllll
5-6 f: sktcfsfflsbxfdc
7-9 p: ppppcpppdp
1-11 k: rkxckkxxjkvkkkkjkk
6-8 g: gggvkgggg
13-14 g: gggggggggggggzgg
11-15 c: scczscccccccccc
5-7 h: hhhhlhvhh
7-10 k: kkkztkkvkbxknkrwk
1-5 r: xmjlr
16-17 p: ppppppppppppppppp
12-15 f: ffffffffhffgffqf
7-8 x: xsxxtxxxhxdxx
3-7 m: tjznjgclmgmwxp
1-10 x: mxxxxxxxxxx
3-8 k: tzkwkkkfkkkzjgk
3-5 n: nhnsn
2-4 z: fzpzz
1-3 n: szxnvwv
2-6 c: ptlcqcc
16-18 p: pqhsxrhrxpppzxpmnv
2-11 l: bxlvktcvqzl
4-9 f: fffvpfffffff
2-7 k: kzkkkkkkkkk
19-20 k: xklbjkxkkhpkzdnlwknd
5-11 d: dbhvdlkzntkfsktptmtw
3-4 m: mmmgmz
5-11 z: mzzznxgxzzzzvzxkqs
2-7 k: kkkkkkbkkk
4-5 z: zzlzrdjz
1-4 s: sssgsbsskssssssssss
12-13 p: ppnpkpsppprxgcppppp
5-7 m: tjrnsvqmbmmmhmmh
5-8 j: sjjjrqjjjjjjj
5-11 f: fffpflbflfvfhfm
1-4 d: dddddd
3-5 q: qqqqqq
1-11 w: swwwjwwrjwg
18-19 p: ppppppppppppppppplp
16-17 c: cxcccvcccccccscnccc
16-19 g: ggggggggggggggggggng
7-9 j: jwjjzjjwhjjj
13-15 k: kkrwfkkkkzkkkkkkrh
1-11 r: xbghqccxlrr
1-3 r: tqxppfrmrtm
10-14 r: rprrrrrrrfrrrtrrrr
12-18 x: xxxxxxxxqxxxxxxxxnx
7-8 v: vvvxrvvjvwjsv
7-10 d: ddddddgdlf
13-14 l: llfdxhdqlclsll
8-9 b: cbbbbbbbszjb
2-5 k: kwkck
17-18 p: mppfpshndcwjppjpwbk
3-14 j: jjjjjjjjjjjcjjjjjjbj
1-5 q: qqbzqq
19-20 b: bbbbbbbbbbbbbbbbbbft
16-17 b: tdvgkbqwftsbrqvbb
5-13 p: pppzpptpgnclpppp
4-5 s: mqsvs
11-14 c: cccccccccncccc
18-19 q: hbqkpvrnqjxmlqhzqqq
5-10 r: lkrrrnmfbrrrps
13-14 q: qqlqqqqsqqqqsz
11-13 c: ccccccccccbcp
1-3 g: ggggwgk
1-13 r: rxrrxckcqrhvr
3-7 f: fffffftfffhfff
1-2 g: ggggzgggg
4-11 x: xbbxldgjzxxjbcz
2-6 c: bdgxpt
11-12 m: mmmmmmmmmmmmm
15-16 p: vwbbwpzzxwhtswpx
6-7 x: xxxxkpnxxnw
13-14 x: xxfxkpxjjfttjx
7-11 f: rdbfffszfwffff
5-7 d: gdtnkdj
2-11 c: hcpchcchzccvcrr
13-15 r: rrnrrrrrrrpdgrrvr
6-7 h: hhhqfhh
6-7 p: ppptppplp
2-4 t: rwxttbpgwm
6-12 b: tgxnbqtfvwgqxz
2-5 s: sblqshv
1-4 r: rfcrrmvkprw
7-10 v: vhcvvvtvvqvvv
12-17 t: zdtwcwtwtqtttttmtft
5-9 v: vvvvvvvvvv
4-11 h: fhhrschgjhhhd
17-19 c: ccccccccccccccccccx
5-9 w: lbjnrqpwwbjkd
6-10 h: hqdqhchxwhshw
6-7 c: cxcccccgcbc
8-9 t: ttdttttttt
11-12 n: wpnnvnnbnnlgnpnhnb
5-15 r: rsrzrfgldrkvxqrrrqmj
2-3 h: jlhhpj
3-10 q: lrqwxqnmwq
6-8 h: hhhhhghhg
6-8 d: mdnddcdx
8-14 w: wwwwwwwwwwwwwmwww
9-14 q: bqkzzqzqmqtzqnqzq
7-8 f: fffffvvf
1-2 n: nfnnnnnnnnnn
1-3 s: sqssnsbpcs
2-11 h: rhbhhhrhhhdl
4-5 p: vpfnp
13-14 k: kkkkkkkkdkkktk
7-11 n: znnffznhhzbckv
1-3 d: xhldshlcq
1-11 s: btstsgssgtxgp
11-12 p: pppppppppppd
3-8 k: kkkskkkk
1-9 c: kfccjcccrccccch
8-13 k: kkkkkkkqkkkkpkkkk
2-10 l: cwllhjhbzlljsl
3-11 t: tttttttttttt
2-11 m: mmtlqbpbrmbh
3-4 h: pwzhhm
4-7 z: zzzzzczzv
3-5 z: zgztzzz
15-16 q: pqqqqqqqqrqqkqdq
1-4 k: xkrkkpmgk
2-6 p: cpqjdfsdpsd
6-8 z: sxzzzfzzjs
8-10 c: ccccmgcnclrccccc
1-4 l: gllq
18-19 z: zzwzzzzzzzzzzzzzvzw
8-10 d: dddddddddddd
1-5 j: jjjjjjtjjj
9-11 k: ckkkkkkktxn
1-9 b: bbbbbbbbbb
13-15 m: mmmmmmwmmmmmmmv
4-5 j: fmjsjjk
4-10 q: clqbqqgxdq
4-5 v: sqbvclwp
3-5 n: qrjnn
9-20 m: mlmhxmmmpmmmmmmmmmml
6-7 r: rrrrrzhr
11-13 b: bbbbbbbcbbbbtbbbbbb
4-6 h: hhhhhhh
1-3 q: qqqq
6-10 h: hhhhhhhhzhhhk
2-4 m: dwzh
1-2 j: jjjjjj
4-6 d: xdxqdnmddd
9-10 g: ggggggggrgwg
1-12 g: dgxggdrffgnf
2-6 q: rlqqmqqckqqtfg
5-11 t: cttttttclttktwtrtbw
5-9 w: bvvbbwwsw
6-9 h: hhxhhhhmxf
5-6 k: kkkkkk
1-5 w: wwwwn
9-14 z: zgzzzzzqlnvgzl
4-5 r: ssrrr
6-7 b: sbkbbbbbcb
4-7 x: xxxxxxxx
8-18 k: kkpkpkkhkkkbmrkhkk
5-13 w: mcnkvlsnmrrfwd
10-20 k: xgknnkmkkkkqbxbkkzkk
6-8 j: pmznnshjvb
2-6 n: nnnnnnnn
5-16 q: qqqqsqqqqqqqqqqtq
3-4 l: llwf
2-4 c: hcsz
19-20 t: ttttttttttttttttttbt
3-9 z: thdrpsxztzpqx
1-4 p: pfzjfpp
12-14 q: bqpnkqngjqqqqq
1-7 d: zfldldd
4-7 r: rwrlrjrrr
5-13 m: spcgmdjgfmmjmhxmf
2-3 j: jhjj
1-10 v: vvpvvjdlvvhjvvvmvv
3-5 r: fttrg
1-5 z: zzzmz
9-13 g: gggggggpgwgmh
2-7 r: rrmkkzsqrfzhrfbp
11-17 x: xxxxxxxxxxxxxxlxsxx
4-6 d: rdddnd
11-14 m: xkcddtwzfjbpmmc
18-19 p: pppppppppppppppppfp
1-12 q: qqqqqjqqqqqq
9-12 x: xvxczcrmxqnzcxxs
16-17 k: kkkkkkkkkkkkkkkkjdk
4-8 c: cccnccccc
5-7 s: srssssss
19-20 p: ppppppppppppppppppnp
2-3 v: vvvv
1-13 j: jhlppkqxzdjgjdljhbvx
6-7 w: wwwwvwxwbwk
1-5 v: lvzvtrv
1-2 t: wtwkk
1-4 z: rzzxz
3-4 c: cccfc
4-11 j: qckjfcjkftjsjchbk
2-10 d: wdjxdztbcdkn
6-11 g: gghsggbgnnmlpb
7-9 q: zwldqqngnqdmqztqfqqh
5-6 w: wfqnzw
1-4 d: vdddd
1-3 g: ggbxzpng
5-6 d: klfqdgfxfnlvhndtsx
3-4 q: rhqqqrgqq
11-12 p: ppppppppppppp
12-16 m: lmblmhvsmmfmkfmlmh
8-9 v: cpwrwvwqv
2-4 l: prmvgmblzkzql
1-2 w: wwwmwl
9-10 c: zcccscccxc
6-8 f: ftftvffr
2-8 t: ttttttjqtttt
11-13 t: sstlzdgttfthtqgnkdw
4-5 k: vkfkx
3-5 c: cccccccc
2-10 d: nlgbhjdlxfcpc
8-9 c: cchccccftcc
5-6 t: tttcntttttntrtt
3-15 n: dnncqnhnsnmqnvnpns
4-5 p: phpxpp
11-12 m: mmnmmfzmmmjfmm
6-7 x: xxxxxxxx
3-5 h: ndhphlhnx
4-5 p: pppskc
10-15 m: xmktnkwrmgvcmmhm
4-6 r: rnrrrrrrr
16-18 s: ssssssssssssssskss
4-5 w: dphwqptwwqzwfr
3-4 w: wwwl
5-6 w: whfgwv
2-6 d: sdhjddfcqr
2-3 b: blhbbb
3-4 t: rttt
2-5 j: qwrfhjjmd
1-2 m: rmmmmmmmmvmmm
3-5 p: ppppppv
8-15 p: pwpprmnvrpdpppp
2-6 l: lwpnmxf
11-13 l: jbhgtglpdjqjll
2-4 p: ghqpl
17-18 r: rrrrrrrrrrrrrrrrwrr
5-8 r: ghwmrjrrrvkm
1-3 l: llpl
3-5 h: nhhqzphkh
5-6 k: kkkgklk
13-19 q: qqqqqqqqqqqqqqqqqqqq
13-15 l: llllllllllllhlllll
2-10 d: vdgwkdkwpdtnkrk
6-12 r: mprbrgrqnlbrr
7-8 f: ffffffgff
2-6 w: wwvgdwqwwwwwft
2-5 f: cfgwffdjqzf
17-18 q: qqqqvqqqkqpqqnxqqq
16-17 w: wwwwwwwwwwwwwhwkwwz
2-16 t: zbxrtmhwtxdbnthq
1-3 s: sjvtss
9-10 h: hhhhhhhhmph
7-8 t: ttljwvttnt
9-10 f: ffffffffpgf
7-11 q: lqgqxfzjqqqxdqmqq
10-14 c: sccctgfcchghccccc
6-8 f: xvcfhfvf
3-5 h: hhhhzh
3-6 p: pplppz
2-5 j: jmhjjjjj
2-10 v: kbvvvvvvrjvvvvvvvv
9-15 g: gggggggggggfggggg
14-15 z: zzxvfnczhqvdqqjfcjz
7-12 v: vwvvjvxvrvmvvwvvvzmb
3-5 h: fhhbh
15-16 f: ffffffmffqfsffff
1-5 j: psjjt
6-11 c: vclcdcfcccnlj
1-6 z: zkzzzz
4-6 f: bngfff
3-4 v: wpsv
3-6 f: ffffjsff
1-5 l: tlbxsxll
5-13 m: jjmxmbmmjzssmcv
1-2 g: qglglgl
1-2 w: wwwx
17-18 h: hshhhhhhhhhhhhhhbqhc
13-14 s: bmptcjsfcplmcxrsgshs
9-10 h: hhhhhhhhhh
12-18 v: qvmvmtpjvvtzvbvvgvvw
1-4 f: sffx
1-8 w: lwwwwwwrw
4-5 k: kkxxkn
#+end_example

#+begin_src scheme :var input=day2_input_1 :results raw :exports both
  (use-modules (srfi srfi-1))

  (define (count-chars list char)
    (cond
     ((null? list) 0)
     (else (if (equal? (car list) char)
	       (1+ (count-chars (cdr list) char))
	       (count-chars (cdr list) char)))))

  (define (password-valid entry)
    (let* ((min-limit (caar entry))
	   (max-limit (cadar entry))
	   (policy-value (cadr entry))
	   (pw (caddr entry))
	   (num-values (count-chars pw policy-value)))
      (and (>= num-values min-limit)
	   (<= num-values max-limit))))

  (define (valid-password-count entries)
    (cond
     ((null? entries) 0)
     (else (if (password-valid (car entries))
	       (1+ (valid-password-count (cdr entries)))
	       (valid-password-count (cdr entries))))))

  (define (parse-input in)
    (filter identity
	    (map 
	     (lambda (x)
	       (let ((strlist (string-split x #\space)))
		 (list
		  (map string->number (string-split (car strlist) #\-))
		  (car (string->list (cadr strlist)))
		  (string->list (caddr strlist)))))
	     (filter (lambda (x) (not (string-null? x))) (string-split in #\newline)))))

  (valid-password-count (parse-input input))
#+end_src

#+RESULTS:
524


--- Part Two ---

While it appears you validated the passwords correctly, they don't
seem to be what the Official Toboggan Corporate Authentication System
is expecting.

The shopkeeper suddenly realizes that he just accidentally explained
the password policy rules from his old job at the sled rental place
down the street! The Official Toboggan Corporate Policy actually works
a little differently.

Each policy actually describes two positions in the password, where 1
means the first character, 2 means the second character, and so
on. (Be careful; Toboggan Corporate Policies have no concept of "index
zero"!) Exactly one of these positions must contain the given
letter. Other occurrences of the letter are irrelevant for the
purposes of policy enforcement.

Given the same example list from above:

    1-3 a: abcde is valid: position 1 contains a and position 3 does not.
    1-3 b: cdefg is invalid: neither position 1 nor position 3 contains b.
    2-9 c: ccccccccc is invalid: both position 2 and position 9 contain c.

How many passwords are valid according to the new interpretation of the policies?


#+begin_src scheme :var input=day2_input_1 :results raw :exports both
  (use-modules (srfi srfi-1))

  (define (password-valid entry)
    (let* ((first-pos (caar entry))
	   (second-pos (cadar entry))
	   (policy-value (cadr entry))
	   (pw (caddr entry)))
      (not
       (eq? (equal? (list-ref pw (1- first-pos)) policy-value)
	    (equal? (list-ref pw (1- second-pos)) policy-value)))))

  (define (valid-password-count entries)
    (cond
     ((null? entries) 0)
     (else (if (password-valid (car entries))
	       (1+ (valid-password-count (cdr entries)))
	       (valid-password-count (cdr entries))))))

  (define (parse-input in)
    (filter identity
	    (map 
	     (lambda (x)
	       (let ((strlist (string-split x #\space)))
		 (list
		  (map string->number (string-split (car strlist) #\-))
		  (car (string->list (cadr strlist)))
		  (string->list (caddr strlist)))))
	     (filter (lambda (x) (not (string-null? x))) (string-split in #\newline)))))

  (valid-password-count (parse-input input))
#+end_src

#+RESULTS:
485

* Day 3

--- Day 3: Toboggan Trajectory ---

With the toboggan login problems resolved, you set off toward the
airport. While travel by toboggan might be easy, it's certainly not
safe: there's very minimal steering and the area is covered in
trees. You'll need to see which angles will take you near the fewest
trees.

Due to the local geology, trees in this area only grow on exact
integer coordinates in a grid. You make a map (your puzzle input) of
the open squares (.) and trees (#) you can see. For example:

#+name: day3_test_1
#+begin_example
..##.......
#...#...#..
.#....#..#.
..#.#...#.#
.#...##..#.
..#.##.....
.#.#.#....#
.#........#
#.##...#...
#...##....#
.#..#...#.#
#+end_example

These aren't the only trees, though; due to something you read about
once involving arboreal genetics and biome stability, the same pattern
repeats to the right many times:

#+name: day3_test_2
#+begin_example
..##.........##.........##.........##.........##.........##.......  --->
#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
.#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
.#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....  --->
.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
.#........#.#........#.#........#.#........#.#........#.#........#
#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...
#...##....##...##....##...##....##...##....##...##....##...##....#
.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#  --->
#+end_example

You start on the open square (.) in the top-left corner and need to
reach the bottom (below the bottom-most row on your map).

The toboggan can only follow a few specific slopes (you opted for a
cheaper model that prefers rational numbers); start by counting all
the trees you would encounter for the slope right 3, down 1:

From your starting position at the top-left, check the position that
is right 3 and down 1. Then, check the position that is right 3 and
down 1 from there, and so on until you go past the bottom of the map.

The locations you'd check in the above example are marked here with O
where there was an open square and X where there was a tree:

#+name: day3_test_3
#+begin_example
..##.........##.........##.........##.........##.........##.......  --->
#..O#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
.#....X..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
..#.#...#O#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
.#...##..#..X...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
..#.##.......#.X#.......#.##.......#.##.......#.##.......#.##.....  --->
.#.#.#....#.#.#.#.O..#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
.#........#.#........X.#........#.#........#.#........#.#........#
#.##...#...#.##...#...#.X#...#...#.##...#...#.##...#...#.##...#...
#...##....##...##....##...#X....##...##....##...##....##...##....#
.#..#...#.#.#..#...#.#.#..#...X.#.#..#...#.#.#..#...#.#.#..#...#.#  --->
#+end_example

In this example, traversing the map using this slope would cause you
to encounter 7 trees.

Starting at the top-left corner of your map and following a slope of
right 3 and down 1, how many trees would you encounter?

#+name: day3_input_1
#+begin_example
....##..#........##...#.#..#.##
.#.#..#....##....#...#..##.....
##.#..##..#...#..........##.#..
.#.##.####..#......###.........
#.#.#...........#.....#...#....
#.......#....#.#.##..###..##..#
.#...#...##....#.........#.....
..........##.#.#.....#....#.#..
.......##..##...#.#.#...#......
.#.#.#...#...##...#.##.##..#...
........##.#.#.###.........##..
#.#..#.#.#.....#...#...#......#
.#.#.#...##......#...#.........
.#..##.##.#...#...##....#.#....
.##...#..#..#......##.###....##
.....#...#.###.....#.#.........
#.##..#....#.#.#.#.............
........#...#......#...#..#....
##..##...##.##...#...#.###...##
#.#....##.#...###......#..#.#..
..#.....#.##......#..........#.
#.......#..#......#.....#....#.
.....###...........#....#.##...
#.#........##.......#.#...#.##.
.#.#.#........#........#.#.....
#..#..##.....#.###..#.#.#.##..#
..#.#...#..##.#.#.#.......###..
........#........#..#..#...#...
##............#...#..##.##...#.
#....#.#.....##...#............
............#...#..#.#.#....#..
#.#.#...##.##.#....#....#......
................###.....#.....#
##.#####.#..#...###..#...###...
...#.....#...#.#....#...#..#...
.......#....##.##.#.##.........
..#..#..##.....#...#.#.....#...
...#...#.#.##.#..###.......#...
...#...........#.#####..##..#..
#.#...#........####..#......#.#
#..#.##...........#.#......#.##
#.#..#....##..#..##.#..........
.....#..#.....#........##..#...
...###.......#.##.......#......
...##..#..#...#....#.###...#...
....####....#........#.##.#.#.#
#....#.....#.###.##...##..##.##
.##.#...#.##.#......#..##.#....
...#.............#.............
..##..##.#.....#........##....#
#.....#....#.......####...#..#.
..#...#..#...#...##.#....##....
.#...##....#....#..#....#......
##..#.#...##......#..#.......##
..#...#.##..#.....#.#...#..#.#.
#..##....#..........#..........
.#........#..#......#......#.#.
...##.#.........#.#....#.#...#.
#.....#.#..#...#...#..#...#...#
#.........#.#.........##.......
.#.......#......#.........###..
.#..#..##...........#.....#..#.
.#....................#.....#..
.##.....#....#....#.###.....#..
...##.#.....#.#....#.........#.
.........##.....#.....#.##..#..
......#......#.#..#..###...#..#
..##...#.#..#...#.#....#.......
..#..##.###.#..#..#..#......#..
.....##...##.........#...##...#
###.#..##....##...##.#..###....
#...#.#..##......##...#.#..#...
..........#....###....#........
#.#.#.#.#.....#..##.##.....#...
.##.....#...#.....#......#.....
.#..........#.#.............#..
.#..##..#.#..##...#....#.##...#
..#.#..........#...#..........#
.#.......#.......#...#..#.....#
##.#...##...#......#.#..#......
#####..#....#..#...#...#.#.....
....#.......#.#..#.............
#..#..#.#.####...#....#....##..
#..#.##.#......#...#......#....
#...##.##...#....#..........##.
..#..#.......##.#....#...#.#...
.....#.##..............##.....#
..##.##...##.....#.........#.#.
.#....##...##...##..#....##..#.
.#...#....#..#......#.#........
#....#.#.#..............#....##
..##..#..#....#####.#....#.#.##
#....#...#.##..#.##.........###
#..#..#....#...............#.#.
#....##...##........##.##.#.##.
......#......##....##.....#.###
#...##..#..#.....#.#........##.
..#.#.##...#...#....#..###...#.
#..##..#.###..##.#.#....#......
..###..#.##........###.....#...
#.............#.............#..
.#.##....#..##.#...#....#.#####
###.....###.#......##..#..##...
.#.#......##.#....#....#.#..#..
###..#..#....#......###.##.....
......#.......#......#..##..##.
..#..#...#..#....#.##....#.#..#
.......##..#........#.#.##.....
.#...#..#........#..#.#..#..#.#
.#..#.##.......#......#...#.#..
.##..##......##.#...#......####
.....#....#......#.....#......#
..........#.#.#...##.#..#.#....
...#.......##......#..#.#.##...
.###..#.#.#....................
##...#...#.##............#.....
....#....#.##...#..#.#...##....
..#.#....#.###...#...#.#.####.#
..#..#.#...#.#......##.........
#..#..####.##.#.#..###....#...#
....#..........#.##.#..#.#.#.#.
#.#.##.........#.....##...#..##
#......#...#.##.#......#..#.#..
#...#........#..#..#...##...#..
.....#.####..##..#.#.##..#...#.
#..#........#........#...#....#
...........#..#.....#.#.#.#....
....#......#....#...#....##....
.#.#..#...#.#....#..#.#....##.#
....#...#...#.##..#...#..##...#
#######...............##.....##
.#.#..............#....#..#.###
#......#.#......###....###.....
##..#...#.##..##..##.#....#....
#....##..#..#...#.#.#...#......
..........#..#.##..##.##.#..##.
....#.#.#.....##........#..#...
..###...#.....##.##.....##..##.
....#.#..#.#.......#.......#...
..##.#..#.....##...###...#...#.
..#.........#...##...#...#..#..
..#..#..#..#..##.#...##..#.#...
...##..#..##..#..####...#.....#
............#............###...
.#.#.###.#.....#.#.#..#.###..#.
...#.........#.....####........
....##.#..##.#.............#...
....#.##.....#..#.....#......##
..........#.............#...##.
#..#.....#.......##..###.......
..##.#...........#.......#..#..
...#...#.#.##.###....#.#..#....
...#..........##..#..#..#...###
.........#.....#..##.....#..#..
#........#...#...#..#.#....##..
.#.#.....####..#.##.#..........
###.......##..#.##...#.....#...
..###.##.#..#..#..#.....##...#.
.........#.....##.#..#..##.....
#..#..##...###..............#..
#....#.#....#..#.....#..####...
####..#.....##...#..#.#.#.#...#
...#....#.....#.##.#.#.#....##.
..........#...#.....###....#.##
#....#.#.#....#..#..#.....#....
.....#.#...#......#....#......#
.####....##...#...#......##..#.
.#...#..#....#..#..............
##.#...##...#.##..#......#.....
..####.##..#....#.#......#.#.##
........#.....##...#.#..##....#
....#.#.#.#.###...#.#...##...##
#.....#...####.#....#.#........
..#.....#...##.........###.....
....#....#....#..#......#####.#
###.....#..#.#.#......#.##.#...
....#.##......#..#.#...........
.#....#....#.#..#.......#...##.
...................#.#.#..#....
##...#.....#........#....#...#.
........##......#...##.#..#.#.#
#.#..###...#....#.#...#.......#
#..........##......#..#..#.....
.............#...##.#...#......
#..#....##..#.........#..#.###.
.....#..........#....##.#...##.
###....................#.#.##..
#........##...##......#....###.
#....#.............#....#...#..
##.......##.#.......#....#..#..
##...#............#..#.#....##.
..#.#..#...#####..........#....
..#.........##.....#.#...####..
....#..............#...........
..#...#.#.#..#.......##.#.#.#..
....#.##.....##..#.....#..####.
#...#...#...#.......#.........#
......#..#.####...###.#.#.....#
.......#..#..#.....#.#..##.#..#
.#......##..#............#.....
.#........#.#....#....#........
.....#.#..#.##.#..##....#..#...
#.#...........#....##.....#....
..#..#..##.###..##..#..###.#.##
##.#..#...##.#.........#...#.#.
......#..#..##...#....#...#.##.
#.##.......................#...
.......#..#..#.##..##......#...
..#.#...#.....#..###....#...#..
##..#.....#..#..#.##.....#...##
#...##...###...#.#..###....#...
...#.#.#..####.....#...##....#.
.#.#..##.....#..#.....##..##..#
#...#..........#.##.#.#........
..##....#.##....#..##......#...
....#..........###.....####..##
...........###....##.#.#.#.#...
...#......................####.
#.#.#...#.#.#.#.#......#.....##
..###...#.####...#..##..#....#.
....#....#.......#...#.........
.#.###.............##..#...#...
....#.#....##...#.....#.##.....
#.......##.....#.#.....#....##.
....##.....###..#.#..#....#...#
......#..##...#......#.....#.##
.#.....#.##.###....#.....#..###
...#..#.###.#....#..#..#...##.#
...##..#...#..#.#.#..#...#.....
##.####...##..#.#.#....#.......
..##..#.#.......##.#......##.#.
....##....#....#..#....#..##.#.
..##..........##....#...#.#..#.
#.#...#.#.###.#.#..##.#...#....
.....#..#.............#...#...#
....#.#..#...##...#....#.##....
#..#...#.###.....#...#.....#.#.
#####....#....#....#.......#.##
#...##....##.#.#...#.....##.#..
#.......#...#..#..#...#....#...
....#......#.#..........#....##
#.###...#.#..##..#.##........#.
#..#.....##.......#..#..#.#....
...#...#.##...#....#.#.#.#...#.
...##..#.#....#......###......#
#.#....#...#..#..#....#........
..#..#.#...##..........#.###...
#..........#...#..#....#....###
..#..#.#....#..............#...
...#........#...#.#....###.#..#
....#.#.#................#..#.#
..#........##.#....#.#..#......
...##..#..#.......#..#......#.#
..#..#....#.........#....#.##..
#.....#....###.#..#..#...#...#.
..#..##.###.#..##....#.###.....
...#...####..#........###.#....
.........#.#...#..#..#.#.......
.##.........##.#..............#
..#.#.#.....###........#.#.#..#
....##..#....#....#.#..#.......
#.#.....#...#........##........
.##.#.#..#..#.#.#.........#....
#.....#..#.##...#...#..........
##..#....#....##.#..#.........#
................#.##.#......#.#
..#..#.#........##...###..#...#
##........#.......#...##.##..#.
##....#.....#..##....#.......#.
#.#....#.#........#..#.........
......##......#...#.....#.##...
###....#..........##.#.#......#
......#...###.........###..#...
.####....#...##..#.#.....#...#.
.##...#...###....#...#.#..###..
#..#......##...#.###..###...#..
#....#.#.#..#....##...#.##..#..
..#.....#...#..........#.##.###
#.....#....###.......##..##.#..
#..##...#..#....#.###......#...
#..#........##..#.....#.#.#....
#.##.#.#..#....#.#.............
.#...............#....##.......
.#.##......##........#...#..#.#
.#...#....#....#...#..#...##...
.....#..###...##........#.#....
...#.......#....##..#..#....#..
...###....#........#..#.###.#..
......##..##..............###.#
.......#.####..##....#.#....#..
#...#......#...#..#.....##....#
.#..#..###....#..##.##.#.......
#......##......#..##....#..##..
.....#..#.#......##.##..##.....
...#..#.......#......#.........
....#..####......#..#....#...#.
..#.#..#...#....#....#.......#.
####..#........#.###...##.#.#.#
.......##........#.#.#...##....
...#.........#..#.#..##....#...
.....#..#...#.#....#...#.#.##.#
#..##.....#.....##.......#...#.
.......##.#.#.....#....#......#
...#...#.##...#......#....#....
..#..#.#...#..#.....#...###.#..
.........#...#..#.......##.....
..##...................#..#.###
.##.##..#.#...#.#....#.....##..
#.#...##...#...#...##..#......#
....#..#...#.....##.#.....#..##
##.#..........###..#...#..#....
...##....#.##....#......#......
.....#.........#....#.#.......#
.......#............#.#.....#..
..#..#...#..#####..#....##.....
...##......##...#.#........##..
.....#..###...##.#.#.##.#...#..
..#.#.#..##..#.##...##.#.#.....
......##...#..##......#.#......
......................#........
#...#..#....#..#.#.##.#.....#.#
.#......#.#....#.#.#..#....#...
.#..#.#.#..#....#..............
#+end_example

#+begin_src scheme :var input=day3_input_1 :exports both :results raw
  (define (map-coordinate-value x y map)
    (let* ((row (list-ref map y))
	   (column (modulo x (length row))))
      (list-ref row column)))

  (define (map-count-trees x y map acc)
    (if (> (+ y 1) (length map))
	acc
	(map-count-trees
	 (+ x 3)
	 (+ y 1)
	 map
	 (if (eq? (map-coordinate-value x y map) 'tree) (1+ acc) acc))))

  (define (navigate-map map)
    (map-count-trees 0 0 map 0))

  (define (parse-input in)
    (map
     (lambda (x)
       (map
	(lambda (y)
	  (cond
	   ((equal? #\. y) 'open)
	   ((equal? #\# y) 'tree)
	   (else y)))
	(string->list x)))
     (filter (lambda (x) (not (string-null? x))) (string-split in #\newline))))

  (navigate-map (parse-input input))
#+end_src

#+RESULTS:
164

--- Part Two ---

Time to check the rest of the slopes - you need to minimize the
probability of a sudden arboreal stop, after all.

Determine the number of trees you would encounter if, for each of the
following slopes, you start at the top-left corner and traverse the
map all the way to the bottom:

    Right 1, down 1.
    Right 3, down 1. (This is the slope you already checked.)
    Right 5, down 1.
    Right 7, down 1.
    Right 1, down 2.

In the above example, these slopes would find 2, 7, 3, 4, and 2
tree(s) respectively; multiplied together, these produce the
answer 336.

What do you get if you multiply together the number of trees
encountered on each of the listed slopes?

#+begin_src scheme :var input=day3_input_1 :exports both :results raw
  (define (treemap-coordinate-value treemap x y)
    (let* ((row (list-ref treemap y))
	   (column (modulo x (length row))))
      (list-ref row column)))

  (define (treemap-count-trees treemap x y slopex slopey acc)
    (if (> (+ y 1) (length treemap))
	acc
	(treemap-count-trees
	 treemap
	 (+ x slopex)
	 (+ y slopey)
	 slopex
	 slopey
	 (if (eq? (treemap-coordinate-value treemap x y) 'tree) (1+ acc) acc))))

  (define (navigate-treemap treemap slopex slopey)
    (treemap-count-trees treemap 0 0 slopex slopey 0))

  (define (navigate-slopes treemap slopes)
    (map
     (lambda (x) (navigate-treemap treemap (car x) (cadr x)))
     slopes))

  (define (parse-input in)
    (map
     (lambda (x)
       (map
	(lambda (y)
	  (cond
	   ((equal? #\. y) 'open)
	   ((equal? #\# y) 'tree)
	   (else y)))
	(string->list x)))
     (filter (lambda (x) (not (string-null? x))) (string-split in #\newline))))

  (apply *
	 (navigate-slopes
	  (parse-input input)
	  '((1 1)
	    (3 1)
	    (5 1)
	    (7 1)
	    (1 2))))
#+end_src

#+RESULTS:
5007658656


* Day 4
You arrive at the airport only to realize that you grabbed your North
Pole Credentials instead of your passport. While these documents are
extremely similar, North Pole Credentials aren't issued by a country
and therefore aren't actually valid documentation for travel in most
of the world.

It seems like you're not the only one having problems, though; a very
long line has formed for the automatic passport scanners, and the
delay could upset your travel itinerary.

Due to some questionable network security, you realize you might be
able to solve both of these problems at the same time.

The automatic passport scanners are slow because they're having
trouble detecting which passports have all required fields. The
expected fields are as follows:

    byr (Birth Year)
    iyr (Issue Year)
    eyr (Expiration Year)
    hgt (Height)
    hcl (Hair Color)
    ecl (Eye Color)
    pid (Passport ID)
    cid (Country ID)

Passport data is validated in batch files (your puzzle input). Each
passport is represented as a sequence of key:value pairs separated by
spaces or newlines. Passports are separated by blank lines.

Here is an example batch file containing four passports:

#+name: day4_test_1
#+begin_example
ecl:gry pid:860033327 eyr:2020 hcl:#fffffd
byr:1937 iyr:2017 cid:147 hgt:183cm

iyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884
hcl:#cfa07d byr:1929

hcl:#ae17e1 iyr:2013
eyr:2024
ecl:brn pid:760753108 byr:1931
hgt:179cm

hcl:#cfa07d eyr:2025 pid:166559648
iyr:2011 ecl:brn hgt:59in
#+end_example

The first passport is valid - all eight fields are present. The second
passport is invalid - it is missing hgt (the Height field).

The third passport is interesting; the only missing field is cid, so
it looks like data from North Pole Credentials, not a passport at all!
Surely, nobody would mind if you made the system temporarily ignore
missing cid fields. Treat this "passport" as valid.

The fourth passport is missing two fields, cid and byr. Missing cid is
fine, but missing any other field is not, so this passport is invalid.

According to the above rules, your improved system would report 2
valid passports.

Count the number of valid passports - those that have all required
fields. Treat cid as optional. In your batch file, how many passports
are valid?

#+name: day4_input_1
#+begin_example
byr:1971
eyr:2039
hgt:172in pid:170cm hcl:17106b iyr:2012 ecl:gry
cid:339

hgt:161cm eyr:2027
ecl:grn iyr:2011 hcl:#a97842 byr:1977 pid:910468396

cid:257
ecl:gry hgt:186cm iyr:2012
byr:1941
eyr:2029
pid:108935675
hcl:#cfa07d

hgt:165in
hcl:#cfa07d eyr:2035 pid:82570731
byr:1973
cid:74 ecl:xry

eyr:2020 cid:105 iyr:2012 pid:947726115
hcl:#ceb3a1 ecl:grn byr:1966 hgt:151cm

hcl:#888785 eyr:2027 ecl:hzl byr:1966
pid:853607760
iyr:2012
hgt:155cm

hgt:61cm
iyr:2019
byr:1952 pid:#1468e6 eyr:2033 ecl:#7d39d5 hcl:z

pid:2306523501
eyr:2032 hcl:z ecl:brn
cid:266 hgt:151in iyr:2024
byr:2008

hcl:#a97842 hgt:191cm eyr:2025 ecl:gry byr:1923 pid:574171850 iyr:2019

hgt:140
iyr:1987 byr:2003
eyr:2013 cid:242 hcl:z
ecl:#19177c pid:150cm

byr:1959
hgt:169cm hcl:#7d3b0c ecl:gry eyr:2028 cid:107 pid:584790749

byr:1955
cid:309
hcl:#a97842
pid:740105085 iyr:2020
hgt:188cm ecl:oth eyr:2029

iyr:2016 hcl:#cfa07d eyr:2026
hgt:151cm
pid:394185014 ecl:grn byr:1974

pid:226566060 ecl:blu cid:272 hgt:188cm hcl:#efcc98
eyr:2029 iyr:2014
byr:1956

pid:#7c7a9d ecl:#8fa327
eyr:2006 iyr:2022
hcl:#7d3b0c hgt:169
byr:2025

hgt:188in byr:2015 ecl:xry
iyr:1975
eyr:1928
pid:8939875193 hcl:7bbcce

hgt:193cm
eyr:2029
pid:141707808 byr:1997
cid:83 iyr:2019
ecl:hzl hcl:#cfa07d

iyr:2019
pid:681586971
hcl:#6b5442 hgt:165cm
eyr:2022 ecl:brn byr:1985

byr:1970
iyr:2016 hgt:156in pid:#e32394 eyr:2024
hcl:#efcc98 ecl:grt

iyr:2013
ecl:grn pid:341584587 eyr:2027 hgt:185cm hcl:#18171d
byr:1935
cid:113

hcl:#fffffd ecl:grn iyr:2010
pid:738986504 hgt:98 eyr:2024
byr:1968

pid:175337478 ecl:oth hgt:173cm hcl:#733820
eyr:2025 byr:1960
cid:283 iyr:2018

byr:1959
hcl:#341e13 eyr:2023
pid:566612260 hgt:176cm
iyr:2017 ecl:grn

cid:321 pid:355095309 byr:1945
hgt:161cm
eyr:2029 iyr:2017
ecl:brn hcl:#733820

hcl:#c0946f pid:75316487 iyr:2013 cid:201 hgt:152cm ecl:lzr byr:1996 eyr:1928

hgt:160cm iyr:2010 hcl:#a018b9
eyr:2024 ecl:amb
cid:347

eyr:2021
pid:893047101 iyr:2016 ecl:hzl hcl:#866857 byr:1988
hgt:166cm

hcl:#7d3b0c
ecl:blu pid:085336099 eyr:2024
iyr:2019 hgt:178cm byr:1999

ecl:grt iyr:2022
hcl:z
hgt:192cm byr:2010

pid:677187953 eyr:2025 iyr:2020 hgt:163cm byr:1957 ecl:grn hcl:#cfa07d

cid:213
byr:1987
pid:113078018 ecl:blu iyr:2013 eyr:2022
hcl:#7d3b0c hgt:157cm

ecl:blu hcl:#c0946f hgt:186cm
byr:1992 eyr:2028 iyr:2010

pid:#b01156 hgt:67
byr:2014 ecl:#35dca0 eyr:1922 hcl:790130

hcl:#602927
ecl:blu hgt:173cm byr:1974 pid:116377061 cid:294 eyr:2030 iyr:2010

hgt:151cm eyr:2022 iyr:2011 ecl:blu byr:1987 hcl:#733820
pid:#b90d2e

cid:188
byr:1990
hcl:#602927 iyr:2026
pid:530373696
hgt:154cm ecl:gry
eyr:2029

hgt:178cm eyr:2027
hcl:#733820
ecl:grn iyr:2014 pid:575371227 byr:1965

hcl:#fffffd iyr:2020
hgt:185cm ecl:amb pid:692760311
byr:1961

byr:1967 pid:397518948 ecl:lzr iyr:2015 hcl:#cfa07d cid:328
hgt:177cm eyr:2035

hcl:#8e1608
pid:554618249 iyr:2010 hgt:176cm cid:220
ecl:brn byr:1928 eyr:2029

eyr:2030
ecl:oth cid:177 hcl:#602927
iyr:2010 hgt:66in
pid:915661465 byr:1992

ecl:brn pid:558826437 hgt:151cm byr:1936 hcl:#fffffd
eyr:2021 iyr:2012

eyr:2033
iyr:2019 hgt:190cm byr:1953
hcl:#6b5442
pid:584941735 ecl:hzl

hgt:71cm
byr:2015 iyr:2025
ecl:#663b65 eyr:2039 hcl:z pid:62548949

ecl:hzl byr:1943
iyr:2020 hgt:175cm pid:830628564 hcl:#7d3b0c eyr:2021

hgt:182cm byr:1951 cid:175 eyr:2021 pid:635966127 ecl:blu iyr:2014 hcl:#18171d

hcl:#733820 iyr:2011 pid:581100835 eyr:2022 ecl:grn byr:1985 hgt:192cm

iyr:2013
ecl:grn
hgt:185cm hcl:#a97842 byr:1981 eyr:2029 pid:711625030

byr:1995
pid:326992839
iyr:2015
eyr:2028 hcl:#733820 ecl:hzl

hgt:160
eyr:2037 ecl:#6b6b83
cid:123 iyr:2028
pid:7692333345
hcl:z byr:2029

hcl:#6b5442 iyr:2030
hgt:165cm byr:2028 ecl:#21516d
eyr:2039
pid:182cm

hgt:159cm iyr:2018 pid:610521467 eyr:2028 ecl:amb byr:1934 hcl:#602927

ecl:blu
hcl:#09d9a5 hgt:162cm iyr:2020
eyr:2025 byr:1971 pid:406714780

hgt:179cm eyr:2022 hcl:#18171d
ecl:blu pid:314891131 iyr:2015
byr:2002

hcl:#623a2f hgt:181cm pid:442693333 byr:1990 ecl:grn eyr:2027
iyr:2011

iyr:2022 eyr:1939
pid:557187110 hcl:#18171d hgt:60cm ecl:#d6ac04 byr:1984

ecl:grn byr:1948 hgt:174cm pid:438876745 cid:321
iyr:2018
hcl:#866857 eyr:2023

hgt:189cm iyr:2012 hcl:#602927 pid:978388052 ecl:brn
eyr:2030

ecl:amb cid:235
byr:1938
pid:315825546 hcl:#ceb3a1 eyr:2029
iyr:2013 hgt:171cm

ecl:dne hcl:z
hgt:76cm byr:2010
cid:185 eyr:2001

hcl:#733820 byr:1988 pid:558453117
hgt:66in
ecl:oth iyr:2010 eyr:2021

byr:1926 pid:796557821 cid:155 hcl:#efcc98
hgt:159cm eyr:2023 ecl:oth iyr:2016

byr:2023 eyr:2031 hcl:0ba99a pid:14902250
hgt:132 ecl:#9b89b1 iyr:2017

hcl:#a97842 byr:1926
cid:205
ecl:blu
iyr:2016 hgt:159cm eyr:2029

byr:1939 hcl:#866857
pid:025607627 hgt:174cm cid:309 eyr:2026 ecl:brn

ecl:hzl pid:805133506
iyr:2014
byr:1991
hcl:#cfa07d
cid:350
hgt:190cm

hgt:155cm byr:1941 eyr:2024
cid:164 hcl:#602927 iyr:2013 pid:531781358 ecl:amb

hcl:#72a068 hgt:164cm
pid:621006770
ecl:brn
eyr:2029 byr:1969

byr:1991
ecl:grn iyr:2020
pid:9921729009 eyr:2029 hcl:#623a2f
hgt:62in

iyr:2017 ecl:hzl
pid:768217275 eyr:2020 byr:1937
hcl:#866857 hgt:157cm

cid:270 byr:1993 hcl:#733820 ecl:hzl pid:722650020
hgt:174cm iyr:2010
eyr:2021

hcl:#c0946f ecl:blu
hgt:154cm
eyr:2022 byr:1929 pid:357023679 iyr:2010

ecl:hzl
iyr:2013 hgt:165cm byr:1979 eyr:2023 hcl:#733820 pid:008734536

hcl:#341e13
eyr:2030 byr:1993
iyr:2014 hgt:193cm
cid:346
ecl:blu pid:536339538

eyr:2030
ecl:hzl
cid:296 pid:660062554 hcl:#efcc98
byr:1977 hgt:179cm
iyr:2010

cid:119 pid:498520651 hgt:159cm
eyr:2029 iyr:2015 hcl:#18171d
ecl:gmt
byr:1950

eyr:2025 iyr:2010 hcl:#efcc98 pid:196372989 hgt:181cm byr:1952 ecl:oth

cid:317
eyr:2026 ecl:blu hcl:#733820
hgt:184cm
pid:549730813 byr:1927 iyr:2018

pid:591769824
hgt:180cm
byr:1920
ecl:blu
eyr:2021 hcl:#cfa07d iyr:2017

pid:988946348 hgt:183cm cid:117 byr:1955 ecl:blu
iyr:2015 hcl:#623a2f eyr:2029

iyr:2014
eyr:2026 hgt:184cm
ecl:oth
hcl:#7d3b0c pid:252101860

byr:1995
hgt:182cm ecl:brn hcl:#6b5442
iyr:2012 eyr:2028 pid:482757872

iyr:2017 cid:333 ecl:gry hcl:#623a2f hgt:157cm eyr:2021
pid:487895819
byr:1951

hcl:#fffffd
hgt:193cm eyr:2025 byr:1927 iyr:2014 ecl:oth pid:989206297

eyr:2030 ecl:brn hcl:#18171d hgt:193cm
iyr:2013 byr:1953 pid:862636088

hcl:#fffffd
pid:204286737 ecl:gry byr:1923
hgt:181cm
iyr:2015
eyr:2023

cid:288 pid:413935643 ecl:gry
iyr:2012
hgt:171cm
hcl:#623a2f
eyr:2020 byr:1943

byr:2023 hcl:#c0946f
ecl:oth
pid:182634296 eyr:2009
cid:306 hgt:183cm
iyr:2029

eyr:2026 ecl:hzl byr:2003
iyr:2027 pid:734296691 hgt:188cm hcl:#fffffd

hcl:#18171d ecl:gry pid:401957684 eyr:2020
iyr:2017 cid:141 byr:1944 hgt:74in

ecl:grn hcl:z
pid:335097003 byr:1925
hgt:170in iyr:2020 eyr:2022

pid:727198487
hgt:173cm
cid:323 hcl:#18171d iyr:2012 eyr:2024
byr:1995 ecl:blu

ecl:amb hcl:#602927
pid:460274414
hgt:76in byr:1995
iyr:2020
eyr:2028

byr:2002 ecl:oth pid:101164770
hgt:172cm hcl:#fffffd eyr:2023 iyr:2016

ecl:blu hcl:#888785 iyr:2016 pid:031162631 eyr:2025 hgt:186cm
byr:1959

ecl:blu pid:093242619 hgt:188cm byr:1970
eyr:2025
hcl:#6b5442
iyr:2020

byr:1990 eyr:2025 ecl:grn
pid:907309460
iyr:2011 hcl:#602927 hgt:62in

pid:346468647 eyr:2021
ecl:oth hgt:169cm
iyr:2010 cid:233
hcl:#b6652a byr:1977

pid:904834317 iyr:2011
hcl:#b6652a eyr:2028 cid:281
byr:1944 hgt:187cm ecl:gry

eyr:1988 pid:663941602
hgt:156in
hcl:#fa2e93 iyr:2015 ecl:gry byr:1953

hgt:184cm cid:107 pid:094829817
ecl:gry byr:1998 eyr:2023 iyr:2017

eyr:2020 ecl:gry byr:1955 hcl:#a97842 pid:553841536

hgt:185cm eyr:2022 hcl:#341e13 ecl:oth byr:1934 pid:863541754 cid:178
iyr:2016

eyr:2029 iyr:2014 byr:1937 cid:232 hgt:177cm hcl:#fffffd ecl:blu
pid:076753558

hcl:#cfa07d
hgt:168cm
ecl:grn
pid:664159349 eyr:2028 iyr:2017 byr:1972

hcl:#a97842
byr:1987
eyr:2020 hgt:182cm
iyr:2018
ecl:brn pid:560272731

hgt:172cm cid:125 ecl:blu pid:291640184
byr:1926
iyr:2014 hcl:#ceb3a1

iyr:2027 hgt:84 hcl:z
ecl:#b68fec
pid:809408661
byr:2018 eyr:1927 cid:87

pid:951007276 cid:260 eyr:2025
ecl:brn iyr:2015 byr:1957
hcl:#4b8216 hgt:161cm

pid:359973697 hcl:#6b5442
eyr:2022 hgt:169cm
byr:1965 ecl:brn iyr:2013

iyr:2012 hgt:65in eyr:2024 pid:842371195
ecl:amb
hcl:#341e13 byr:2000

ecl:hzl hgt:170cm byr:1950
cid:289 eyr:2037 iyr:2021 hcl:#18171d pid:389051819

hgt:159cm
ecl:amb hcl:#c0946f eyr:2020 pid:010539976 iyr:2011 byr:1921

hgt:176cm cid:270 pid:838338992
eyr:2024 hcl:#866857
ecl:amb iyr:2015 byr:1982

ecl:blu
cid:246 hgt:185cm
byr:1987
hcl:#fffffd pid:042361456 eyr:2022
iyr:2010

hgt:164cm
pid:881486702 ecl:brn byr:1969 hcl:#c0946f
iyr:2010 eyr:2030

iyr:2019 hcl:#6b5442 hgt:167cm
ecl:amb
cid:207 byr:1922
eyr:2025 pid:343956182

ecl:oth iyr:2012
hgt:158cm
eyr:2024 hcl:#602927 byr:1964

byr:1988 pid:030965463 hgt:154cm
ecl:gry eyr:2020 cid:227
iyr:2012
hcl:#3edc53

hgt:178cm hcl:#c0946f byr:1945 ecl:amb eyr:2030

hgt:158cm pid:270264980 eyr:2027 iyr:2016 byr:1928 cid:259
ecl:gry hcl:#733820

byr:2026 hgt:164in cid:235 ecl:xry
hcl:z pid:2517730699
eyr:2033 iyr:2024

ecl:grn hgt:69cm pid:1321222581 byr:1987
eyr:2035
iyr:2018 hcl:#fffffd

hcl:#733820 cid:244
ecl:gry iyr:2013 eyr:2028
pid:794178180 hgt:74in byr:1923

hcl:#a97842 byr:1934 ecl:hzl eyr:2027
pid:401882857
iyr:2018 hgt:185cm

iyr:2018
pid:665564950 byr:1990 ecl:hzl
hgt:154cm
eyr:2026 hcl:#623a2f

hcl:#602927 cid:189 byr:1967 pid:332861702 eyr:2021
hgt:163cm
ecl:amb

ecl:grn pid:734161280 hgt:184cm
iyr:2018 eyr:2020 byr:1929 hcl:#a97842

iyr:2018 byr:1925
eyr:2022 hgt:193cm ecl:hzl
hcl:#341e13
pid:008582320

byr:2025 ecl:dne hgt:167cm pid:48963526
iyr:2025 hcl:z
eyr:2034

hcl:#cfa07d ecl:hzl eyr:2029 cid:194 byr:1936
iyr:2020
hgt:186cm
pid:328573727

iyr:2011 hgt:188cm pid:338435675 cid:326 ecl:gry
eyr:2027
hcl:#6b5442
byr:1958

pid:165cm
hgt:70 iyr:1996
eyr:2034 cid:210 hcl:z ecl:#75606f byr:2027

hgt:180in hcl:#a0515a pid:#97a753
byr:2026 iyr:2016
eyr:1995

eyr:2020
hcl:#18171d byr:1978 iyr:2012 hgt:68in
ecl:amb cid:346 pid:332495922

ecl:blu hgt:61in pid:747650669
byr:1961 eyr:2028
iyr:2020
hcl:#4992f2

byr:1958 iyr:2017 ecl:oth
hgt:153cm
hcl:#602927 eyr:2023 pid:108391213

byr:1976 eyr:2023 iyr:2015 hgt:177cm pid:391628371 hcl:#8069c4
ecl:grn

pid:910402636 ecl:gry hgt:188cm byr:1924 hcl:#82dfdc eyr:2029

byr:1978 pid:302223240 iyr:2017
hgt:174cm
hcl:#6b6569 ecl:blu eyr:2027

cid:135
byr:1995 iyr:2015 ecl:oth pid:054611703
eyr:2023
hcl:#7d3b0c hgt:75in

ecl:grn
eyr:2020 hgt:184cm pid:444944678 iyr:2019 hcl:#efcc98

byr:1946
hgt:70in eyr:2022 hcl:#6b5442 ecl:amb iyr:2018 pid:859762925

byr:1995 eyr:2022
ecl:grn pid:575081777
hcl:#341e13
hgt:183in iyr:2018

eyr:2028 hgt:162cm byr:1989 hcl:#0bd11f
iyr:2020 ecl:gry
pid:073498924

iyr:2014
pid:122787281 byr:1982 cid:138 eyr:2021 hcl:#866857 ecl:hzl hgt:184cm

cid:198 byr:2014
pid:5529128129
hgt:185in
iyr:2025
hcl:z
eyr:2023
ecl:gmt

eyr:2021 hgt:170cm
cid:74
iyr:2019 pid:943445928 byr:1980
ecl:oth hcl:#ceb3a1

iyr:2020 eyr:2030 pid:201122734 cid:246 hgt:169cm ecl:grn hcl:#fffffd byr:1962

pid:025560194
byr:1989
hcl:#cfa07d hgt:182cm ecl:blu eyr:2025 iyr:2012

hgt:151cm
hcl:#efcc98 ecl:blu
byr:1983 eyr:2023 pid:814513328 iyr:2013 cid:73

byr:1961 pid:536384108 hgt:188cm ecl:amb iyr:2013 eyr:2027 hcl:#888785 cid:121

pid:364607819
eyr:2024 ecl:amb hcl:#b6652a iyr:2016
byr:2000 hgt:187cm

hcl:z eyr:1956 iyr:2028
hgt:168cm cid:105
byr:2026
ecl:#5b17d3

cid:207 pid:913509058 ecl:brn byr:2001 eyr:2026
hcl:#866857 iyr:2019
hgt:180cm

pid:363979129
eyr:2027 iyr:2013
ecl:gry hcl:#866857 byr:1957 hgt:62in

byr:1932
eyr:2027
hgt:66in ecl:hzl hcl:#efcc98 pid:417620217 iyr:2013

iyr:2013 cid:331 hgt:192cm
hcl:#d896d9 pid:795744816 byr:1935

byr:1960 hcl:#888785 hgt:176cm ecl:hzl pid:025206542
iyr:2015 eyr:2030

ecl:oth hgt:182cm
hcl:#341e13
pid:526568190 iyr:2018 cid:280 byr:1997
eyr:2028

hgt:186cm pid:273625601 byr:1993 iyr:2018 eyr:2021 hcl:#733820
ecl:blu

hgt:74cm
byr:1981 eyr:2024
ecl:amb iyr:2012 pid:154027492 hcl:#733820

hcl:#a97842 pid:347084450 ecl:oth
eyr:2030 hgt:176cm byr:1955 cid:229
iyr:2013

hcl:#fffffd byr:1979 iyr:2017
pid:183840860 hgt:177cm ecl:blu eyr:2023

pid:045246162 eyr:2021 byr:1928 hgt:190cm ecl:gry hcl:#602927

pid:273620987
eyr:2022 hgt:162cm
cid:269
byr:1991 hcl:#602927 ecl:amb iyr:2019

pid:621069556 ecl:amb
cid:202 byr:2020 hgt:189cm
iyr:2014 hcl:#fffffd
eyr:2027

eyr:2022 byr:1988
hgt:190cm
pid:349839553 hcl:#602927 iyr:2018 ecl:gry

iyr:2014 ecl:gry
hcl:#733820 eyr:2025 hgt:179cm pid:231854667 byr:1984
cid:102

eyr:2020
pid:509400891 hcl:#cfa07d hgt:172cm
ecl:grn byr:1997 iyr:2020

iyr:2017 byr:1994 hgt:174cm ecl:amb
pid:685743124
hcl:#fffffd eyr:2029

iyr:2012 hgt:177cm byr:1999 pid:549190825 hcl:#b6652a eyr:2028 ecl:oth cid:316

hgt:192cm ecl:grn byr:1924
iyr:2011 eyr:2029 hcl:#efcc98
pid:215962187

iyr:2011 hcl:#866857
cid:164
hgt:184cm
ecl:gry eyr:2023 byr:1959 pid:204093118

hgt:172cm ecl:hzl hcl:#3f2f3a pid:623470811 byr:1938 iyr:2013 eyr:2022

hcl:#b6652a
iyr:2019 hgt:152in
ecl:oth
pid:189008850 byr:2006

ecl:oth hcl:#602927
pid:049746898 byr:1924 hgt:150cm eyr:2026
iyr:2014

ecl:oth
eyr:2028 byr:2018 hcl:#733820
pid:8676207205 iyr:2018
hgt:190cm

eyr:2023 cid:308 hgt:170cm ecl:oth iyr:2014 hcl:#18171d pid:874405208 byr:1936

eyr:2021 ecl:hzl
pid:423603306
hcl:#c0946f cid:147
byr:1988 iyr:2016 hgt:164cm

hgt:176cm iyr:2010
hcl:#6b5442 cid:280 byr:1988 ecl:hzl pid:967151288 eyr:2028

cid:299 hgt:163cm ecl:gry
pid:561439154 eyr:2023
hcl:#cfa07d iyr:2019 byr:1959

pid:635547007
ecl:blu
byr:1996 hcl:#7d3b0c cid:280 eyr:2023
hgt:170cm iyr:2017

hcl:#888785 iyr:2014
ecl:brn
hgt:190cm byr:1941 eyr:2021

hcl:#c0946f cid:199 hgt:162cm ecl:amb pid:130696599 eyr:2022 iyr:2018 byr:1948

cid:314 hcl:#a4fc09 ecl:hzl iyr:2019
pid:886849824 eyr:2026 byr:1933 hgt:178cm

byr:1996 iyr:2016 eyr:2030 hgt:169cm
pid:119207760
hcl:#ef542c
ecl:brn

iyr:2030 eyr:2039 hcl:#c0946f pid:#7336a0 hgt:182cm cid:347
ecl:#c81361 byr:2003

pid:727812879 iyr:2013 eyr:2027 hgt:172cm
hcl:#7d3b0c ecl:gry byr:1966

hcl:#341e13
iyr:2016 pid:744997238
cid:322
byr:1973
ecl:hzl eyr:2028 hgt:190cm

hgt:171cm eyr:2026
iyr:2014 ecl:oth
pid:074049558 hcl:#04083f byr:1923

pid:973713235
eyr:2021
ecl:brn
byr:1922 hcl:#fffffd iyr:2012
hgt:178cm

ecl:#10165d
cid:201 eyr:2026 pid:#ceefa8 byr:2020
hgt:164cm iyr:2011
hcl:9fccf7

ecl:blu
hgt:165cm iyr:2012 eyr:2025 pid:775787557
byr:1952 hcl:#623a2f

pid:6186829005 ecl:lzr hcl:z hgt:69in iyr:2021 byr:2018 eyr:1974

pid:824641755 eyr:2028 byr:1950 hgt:184cm
hcl:#c0946f
iyr:2014

hcl:#7d3b0c cid:84 hgt:187cm iyr:2015
pid:895876610
byr:1988 eyr:2023

hcl:#fffffd
hgt:157cm iyr:2020 eyr:2030 ecl:grn pid:486236241

iyr:2010
eyr:2029
hgt:74in ecl:hzl byr:1926 pid:348573885 hcl:#9d1214

hgt:171cm ecl:oth
eyr:2022 pid:148728436 byr:1993 hcl:#a97842 iyr:2013

iyr:2019
hgt:151cm
eyr:2020 pid:319882814 ecl:grn byr:1966 cid:256 hcl:#3107b3

hgt:184cm ecl:grn
byr:1947
eyr:2025 iyr:2015 pid:827962962 cid:62 hcl:#f3a364

iyr:2013
hcl:#fffffd pid:215012801 ecl:amb eyr:2024
hgt:154cm
byr:1973

ecl:hzl hgt:152cm
hcl:#623a2f
byr:1944 eyr:2022 pid:295632731
cid:243 iyr:2019

ecl:brn
iyr:2011 pid:089250747 byr:1984 hcl:73e739 cid:253 hgt:161cm eyr:2021

hcl:#18171d byr:1944 pid:732054667 eyr:2021
ecl:oth hgt:173cm

ecl:gry pid:445116331
hcl:#a97842
hgt:187cm eyr:2026 iyr:2020 byr:1992

hcl:80c091 pid:745555899
iyr:2021
hgt:170cm
byr:1990

pid:058987865 byr:1927 cid:209
hcl:#65ccf6 eyr:2025
ecl:brn iyr:2012 hgt:164cm

hgt:67cm
byr:2026 hcl:f8e749 iyr:2023 eyr:1921 ecl:lzr

eyr:2028 iyr:2013 pid:103268377 hgt:179cm byr:1922
ecl:hzl
hcl:#7d3b0c

byr:1923 ecl:gry hgt:167cm hcl:#7fc8ee iyr:2015 pid:427963077 eyr:2024

byr:1927 ecl:grn pid:741328150
eyr:2029 hcl:#733820
iyr:2015 hgt:157cm

hgt:70cm hcl:e76970 iyr:1945 cid:186
byr:1921 eyr:2029
pid:823622634
ecl:zzz

hgt:61cm cid:87 hcl:d5e5ff
eyr:2024 ecl:dne pid:182634269
iyr:2029

hcl:#623a2f eyr:2020 byr:1936 ecl:gry pid:236984204
iyr:2011 hgt:156cm

pid:872645776
byr:2023
cid:220 ecl:blu hgt:172cm eyr:2033
iyr:2010 hcl:ff82f9

pid:774489073 iyr:2013 byr:1922 ecl:brn eyr:2025 hcl:#18171d hgt:163cm

eyr:2024 hgt:65in byr:1962 iyr:2019
pid:112233558 hcl:#888785 ecl:grn

hgt:172cm eyr:2022
hcl:#18171d ecl:blu
pid:609008608 iyr:2013
cid:244 byr:1980

cid:124 hgt:175in eyr:2025
hcl:674e80 pid:099875931 iyr:1956

byr:1926 hgt:188cm
ecl:hzl eyr:2021
iyr:2018
hcl:#866857 pid:557800355

byr:1939 pid:200409089
eyr:2026 hgt:164cm
ecl:grn iyr:2013
hcl:#733820

cid:73 hgt:169cm iyr:2016 byr:1976 ecl:gry eyr:2024
pid:043453462

pid:609818712 hcl:#733820 byr:1958
eyr:2025 hgt:187cm iyr:2017 ecl:gry

hgt:66in pid:618590610 iyr:2013 byr:1938 hcl:#d1bda9
eyr:2022
ecl:grn cid:69

hgt:156cm pid:755742405
byr:1929 hcl:#6b5442 eyr:2024
iyr:2018
ecl:gry
cid:105

eyr:2030 pid:77022842
hgt:160cm byr:1989
iyr:2011 hcl:#7d3b0c ecl:blu

iyr:2015
hcl:#341e13 byr:1968 pid:434159843
ecl:amb hgt:150cm
eyr:2030

hcl:z eyr:1993 pid:#b3a5a6 iyr:1947 hgt:176in
ecl:#78876d

cid:249 hcl:#cfa07d
hgt:180cm ecl:gry eyr:2026 byr:1965
pid:048327438 iyr:2010

pid:136468890 ecl:gry
byr:1940
hcl:#fffffd hgt:185cm iyr:2016 eyr:2021

hcl:#b6652a hgt:180in byr:1976 eyr:2022 pid:156cm ecl:#737836
iyr:2013

ecl:amb iyr:2016 hgt:162cm byr:1955 pid:193cm eyr:2028 cid:346
hcl:#733820

iyr:2010 byr:1932 eyr:2025 ecl:grn
pid:595837820
hcl:#341e13
hgt:166cm cid:224

pid:481646831
eyr:2029
hcl:#623a2f cid:319 iyr:2016
ecl:brn hgt:160cm byr:1944

ecl:zzz pid:428329840 cid:238 iyr:2022 hgt:76cm
hcl:#a97842
byr:2024 eyr:2028

iyr:2014 hgt:170cm
byr:1963 hcl:#623a2f
eyr:2026 pid:225910806 ecl:gry

ecl:grn iyr:2010 hgt:193cm byr:1928 eyr:2028 pid:343022641 hcl:#733820

eyr:2023 ecl:grn
byr:1950 iyr:2012 hcl:#866857 pid:400725165
hgt:193cm

cid:195 iyr:2014 ecl:oth eyr:2027 byr:1966
hgt:177cm hcl:#18171d pid:913894485

iyr:2015 hgt:154cm
cid:206
pid:134599284 hcl:#602927
eyr:2023 ecl:brn
byr:1983

ecl:#2d0e7a pid:#f34625 eyr:1942 iyr:2027 byr:2013 hcl:z hgt:162cm

hgt:189cm byr:1965 iyr:2011
cid:178 ecl:hzl
hcl:#b6652a eyr:2026 pid:683560227

eyr:2030 pid:047446524 ecl:grn hgt:167cm iyr:2017 hcl:#602927
byr:1920

cid:86
iyr:1920 hgt:193cm
eyr:2027 pid:401913877 ecl:hzl
hcl:#888785 byr:1953

byr:1991
ecl:grn
iyr:2016
hcl:#5e1ef2 hgt:186cm
pid:076499738
eyr:2025

eyr:2030 hcl:#18171d pid:750694893
hgt:157cm iyr:2020 cid:338
byr:1956 ecl:gry

iyr:2027 pid:#37f002 hgt:164cm ecl:#80df11
hcl:#aeacee cid:320
eyr:2039 byr:1956

iyr:2014 hcl:#733820 ecl:grn
byr:1960
eyr:2025 pid:667089568

hgt:163cm
byr:1962 cid:108 ecl:gry hcl:#733820 iyr:2012
eyr:2029 pid:763684725

byr:1984 hcl:#888785 hgt:159cm iyr:2012 ecl:gry
eyr:2024 cid:236 pid:174711749

ecl:gry pid:044931271
hcl:#b6652a eyr:2029 iyr:2013 byr:1985

byr:1973 iyr:2018 hcl:#a97842 pid:937214113 ecl:blu
cid:247 hgt:186cm eyr:2023

cid:108 pid:231782961 iyr:2017
eyr:2034 hgt:170cm byr:2025 hcl:#18171d ecl:utc

pid:298274796 byr:1928 hcl:#a97842 hgt:188cm iyr:2011 ecl:gry eyr:2028

hgt:65cm iyr:1943 eyr:2025
hcl:z
pid:65702335 ecl:#bb54e6 byr:2010

pid:499116613 eyr:2024
ecl:gry hcl:#cfa07d hgt:193cm byr:1999
cid:278 iyr:2015

hcl:#6b5442 eyr:2027 hgt:175cm byr:1988
ecl:brn pid:410075320 iyr:2010

pid:269678991 ecl:oth iyr:2013
hcl:#602927 byr:1991 eyr:2023

ecl:oth
pid:144593265 hcl:#fffffd
eyr:2020 iyr:2018
byr:1975 hgt:160cm
cid:304

iyr:2014 hcl:#ceb3a1 eyr:2029
byr:1951 pid:520804395 hgt:185cm ecl:oth

hgt:159cm
pid:312887994
cid:205
iyr:2016 ecl:hzl hcl:#866857 eyr:2029 byr:1944

iyr:2023 ecl:#54c85c byr:2030
eyr:1946 cid:190 pid:512417622

byr:1946 eyr:2023 hgt:163cm
hcl:#2d4e9c ecl:brn pid:839043333 iyr:2014

iyr:2027 cid:122 hgt:187cm eyr:1975 ecl:grn byr:1920
hcl:#c0946f

eyr:2029 hgt:189cm ecl:blu byr:1922 iyr:2016
pid:924104599
hcl:#b6652a

hgt:162cm
iyr:2016 byr:1921 hcl:#18171d eyr:1938 ecl:hzl
pid:682222023

cid:118 pid:959515596
byr:1921 iyr:2010 eyr:2029 hcl:#7d3b0c ecl:oth hgt:158cm

ecl:#8ac844 pid:162cm
hcl:8f4d80 hgt:150in byr:2005
eyr:2008
iyr:2017 cid:174

hcl:z byr:1936
pid:255481052 eyr:2021
iyr:2012 hgt:170cm cid:276 ecl:hzl

iyr:2013 byr:1935 hgt:179cm
eyr:2023 ecl:amb pid:073621563 hcl:#623a2f

hcl:#18171d cid:230 byr:1989 ecl:oth eyr:2021 hgt:181cm pid:661224730
iyr:2019

pid:748039140 iyr:2020 eyr:2020 ecl:#6ebbc2 hcl:#fffffd hgt:171cm
byr:1995

ecl:hzl pid:758144605 hcl:#ceb3a1 hgt:186cm
eyr:2028 iyr:2014
byr:1928

ecl:hzl
hgt:66in
byr:2000 iyr:2017 eyr:2020
pid:162973694 hcl:#a97842

iyr:2012 pid:749770535
byr:1969 cid:148
hcl:#733820
hgt:180cm eyr:2021 ecl:hzl

iyr:2010
byr:1958
hgt:164cm
ecl:blu hcl:#733820 pid:890634327 eyr:2024

hgt:70in pid:218397894
iyr:2020 eyr:2025 ecl:gry hcl:#341e13
byr:1970

eyr:2020 pid:854208004 hgt:157cm hcl:#7d3b0c ecl:amb byr:1981 iyr:2020

byr:1924
cid:321 eyr:2028 hcl:#cfa07d iyr:2010 ecl:amb pid:036669613 hgt:170cm

ecl:#6649d4 pid:0026989865 cid:188
hgt:152in
byr:1950 hcl:z eyr:1928 iyr:1963

hcl:#ceb3a1 ecl:grn eyr:2028 pid:074363489 iyr:2010 hgt:173cm byr:1966

eyr:2030
pid:9731612333 ecl:#f8824c
iyr:2022 hgt:161in
byr:2023
cid:316
hcl:z

hgt:175cm iyr:2016 eyr:2024 cid:244
byr:1952
pid:085432899
hcl:#fffffd ecl:brn

ecl:brn eyr:2026 iyr:2017 hgt:75in
pid:745302991 byr:1969 hcl:#7394c7
#+end_example

#+begin_src scheme :var input=day4_input_1 :results raw :exports both :prologue "(use-modules (srfi srfi-9) (srfi srfi-1))"

  (define-syntax define-quick-record
    (lambda (stx)
      (define (symcat tmpl . s)
	(datum->syntax
	 tmpl (string->symbol
	       (apply string-append (map (lambda (x) (if (string? x) x (symbol->string (syntax->datum x)))) s)))))
      (syntax-case stx ()
	((_ name f ...)
	 #`(define-record-type
	       #,(symcat stx "<" #'name ">")
	     (#,(symcat stx "make-" #'name) f ...)
	     #,(symcat stx #'name "?")
	     #,@(map
		 (lambda (x)
		   (list x (symcat stx #'name "-" x) (symcat stx "set-" #'name "-" x "!")))
		 #'(f ...)))))))

  (define-quick-record passport byr iyr eyr hgt hcl ecl pid cid)

  (define (parse-single-record str)
    (let* ((words (string-split str #\space))
	   (words-split (map (lambda (x) (string-split x #\:)) words))
	   (toret (make-passport ""  "" "" "" "" "" "" "")))
      (map (lambda (x)
	     ((cond
		((equal? "byr" (car x)) set-passport-byr!)
		((equal? "iyr" (car x)) set-passport-iyr!)
		((equal? "eyr" (car x)) set-passport-eyr!)
		((equal? "hgt" (car x)) set-passport-hgt!)
		((equal? "hcl" (car x)) set-passport-hcl!)
		((equal? "ecl" (car x)) set-passport-ecl!)
		((equal? "pid" (car x)) set-passport-pid!)
		((equal? "cid" (car x)) set-passport-cid!)
		(else
		 (error "bad field")))
	      toret x))
	   words-split)
    toret))

  (define (valid-passport? psprt)
    (and
     (reduce (lambda (x y) (and x y)) #t (map (lambda (x) (not (equal? "" (x psprt))))
					      (list passport-byr
						    passport-iyr
						    passport-eyr
						    passport-hgt
						    passport-hcl
						    passport-ecl
						    passport-pid)))))
  (define (parse-split-records raw-records)
    (define (parse-split-records-tco raw-records current-item final)
      (cond
       ((null? raw-records) final)
       (else
	(if (equal? (car raw-records) "")
	    (parse-split-records-tco (cdr raw-records) '()  (cons current-item final))
	    (parse-split-records-tco (cdr raw-records) (cons (car raw-records) current-item) final)))))
    (map parse-single-record
	 (map string-join (parse-split-records-tco raw-records '() '()))))

  (define (parse-input in)
    (parse-split-records (string-split in #\newline)))

  (define (count-valid-passports passports)
    (count valid-passport? passports))
  (count-valid-passports (parse-input input))
#+end_src

#+RESULTS:
242

--- Part Two ---

The line is moving more quickly now, but you overhear airport security
talking about how passports with invalid data are getting
through. Better add some data validation, quick!

You can continue to ignore the cid field, but each other field has
strict rules about what values are valid for automatic validation:

#+begin_example
    byr (Birth Year) - four digits; at least 1920 and at most 2002.
    iyr (Issue Year) - four digits; at least 2010 and at most 2020.
    eyr (Expiration Year) - four digits; at least 2020 and at most 2030.
    hgt (Height) - a number followed by either cm or in:
        If cm, the number must be at least 150 and at most 193.
        If in, the number must be at least 59 and at most 76.
    hcl (Hair Color) - a # followed by exactly six characters 0-9 or a-f.
    ecl (Eye Color) - exactly one of: amb blu brn gry grn hzl oth.
    pid (Passport ID) - a nine-digit number, including leading zeroes.
    cid (Country ID) - ignored, missing or not.
#+end_example

Your job is to count the passports where all required fields are both
present and valid according to the above rules. Here are some example
values:

#+begin_example
byr valid:   2002
byr invalid: 2003

hgt valid:   60in
hgt valid:   190cm
hgt invalid: 190in
hgt invalid: 190

hcl valid:   #123abc
hcl invalid: #123abz
hcl invalid: 123abc

ecl valid:   brn
ecl invalid: wat

pid valid:   000000001
pid invalid: 0123456789
#+end_example

Here are some invalid passports:

#+name: day4_test_2
#+begin_example
eyr:1972 cid:100
hcl:#18171d ecl:amb hgt:170 pid:186cm iyr:2018 byr:1926

iyr:2019
hcl:#602927 eyr:1967 hgt:170cm
ecl:grn pid:012533040 byr:1946

hcl:dab227 iyr:2012
ecl:brn hgt:182cm pid:021572410 eyr:2020 byr:1992 cid:277

hgt:59cm ecl:zzz
eyr:2038 hcl:74454a iyr:2023
pid:3556412378 byr:2007
#+end_example

Here are some valid passports:
#+name: day4_test_3
#+begin_example
pid:087499704 hgt:74in ecl:grn iyr:2012 eyr:2030 byr:1980
hcl:#623a2f

eyr:2029 ecl:blu cid:129 byr:1989
iyr:2014 pid:896056539 hcl:#a97842 hgt:165cm

hcl:#888785
hgt:164cm byr:2001 iyr:2015 cid:88
pid:545766238 ecl:hzl
eyr:2022

iyr:2010 hgt:158cm hcl:#b6652a ecl:blu byr:1944 eyr:2021 pid:093154719
#+end_example

Count the number of valid passports - those that have all required
fields and valid values. Continue to treat cid as optional. In your
batch file, how many passports are valid?


#+begin_src scheme :var input=day4_input_1 :results raw :exports both :prologue "(use-modules (srfi srfi-9) (srfi srfi-1))"
  (define-syntax define-quick-record
    (lambda (stx)
      (define (symcat tmpl . s)
	(datum->syntax
	 tmpl (string->symbol
	       (apply string-append (map (lambda (x) (if (string? x) x (symbol->string (syntax->datum x)))) s)))))
      (syntax-case stx ()
	((_ name f ...)
	 #`(define-record-type
	       #,(symcat stx "<" #'name ">")
	     (#,(symcat stx "make-" #'name) f ...)
	     #,(symcat stx #'name "?")
	     #,@(map
		 (lambda (x)
		   (list x (symcat stx #'name "-" x) (symcat stx "set-" #'name "-" x "!")))
		 #'(f ...)))))))

  (define-quick-record passport byr iyr eyr hgt hcl ecl pid cid)

  (define (parse-single-record str)
    (let* ((words (string-split str #\space))
	   (words-split (map (lambda (x) (string-split x #\:)) words))
	   (toret (make-passport ""  "" "" "" "" "" "" "")))
      (map (lambda (x)
	     ((cond
	       ((equal? "byr" (car x)) set-passport-byr!)
	       ((equal? "iyr" (car x)) set-passport-iyr!)
	       ((equal? "eyr" (car x)) set-passport-eyr!)
	       ((equal? "hgt" (car x)) set-passport-hgt!)
	       ((equal? "hcl" (car x)) set-passport-hcl!)
	       ((equal? "ecl" (car x)) set-passport-ecl!)
	       ((equal? "pid" (car x)) set-passport-pid!)
	       ((equal? "cid" (car x)) set-passport-cid!)
	       (else
		(error "bad field")))
	      toret (cadr x)))
	   words-split)
    toret))

  (define (valid-byr? x)
    (let* ((val (string->number (passport-byr x))))
      (and (<= 1920 val) (<= val 2002))))

  (define (valid-iyr? x)
    (let* ((val (string->number (passport-iyr x))))
      (and (<= 2010 val) (<= val 2020))))

  (define (valid-eyr? x)
    (let* ((val (string->number (passport-eyr x))))
      (and (<= 2020 val) (<= val 2030))))

  (define (valid-hgt? x)
    (let* ((val (passport-hgt x)))
      (cond
       ((string-suffix? "cm" val)
	(let* ((num (string->number (substring val 0 (- (string-length val) 2)))))
	  (and (<= 150 num) (<= num 193))))
       ((string-suffix? "in" val)
	(let* ((num (string->number (substring val 0 (- (string-length val) 2)))))
	  (and (<= 59 num) (<= num 76))))
       (else #f))))

  (define (valid-hcl? x)
    (let* ((val (passport-hcl x))
	   (first (substring val 0 1))
	   (rest (substring val 1))
	   (cs (char-set #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9 #\a #\b #\c #\d #\e #\f)))
      (and
       (equal? "#" first)
       (string-every cs (substring val 1)))))

  (define (valid-ecl? x)
    (let* ((val (passport-ecl x)))
      (any identity (map (lambda (s) (equal? val s))
			 (list "amb" "blu" "brn" "gry" "grn" "hzl" "oth")))))

  (define (valid-pid? x)
    (let* ((val (passport-pid x)))
      (if (and (= 9 (string-length (string-trim val)))
	       (string->number val))
	  #t
	  #f)))

  (define (valid-passport? psprt)
    (if (not (reduce (lambda (x y) (and x y)) #t (map (lambda (x) (not (equal? "" (x psprt))))
						      (list passport-byr
							    passport-iyr
							    passport-eyr
							    passport-hgt
							    passport-hcl
							    passport-ecl
							    passport-pid))))
	#f
	(every (lambda (x) (x psprt))
	       (list valid-byr? 
		     valid-iyr? 
		     valid-eyr?
		     valid-hgt?
		     valid-hcl?
		     valid-ecl?
		     valid-pid?))))

  (define (parse-split-records raw-records)
    (define (parse-split-records-tco raw-records current-item final)
      (cond
       ((null? raw-records) final)
       (else
	(if (equal? (string-trim (car raw-records)) "")
	    (parse-split-records-tco (cdr raw-records) '()  (cons current-item final))
	    (parse-split-records-tco (cdr raw-records) (cons (car raw-records) current-item) final)))))
    (map parse-single-record
	 (map string-join (parse-split-records-tco raw-records '() '()))))

  (define (parse-input in)
    (parse-split-records (string-split in #\newline)))

  (define (count-valid-passports passports)
    (count valid-passport? passports))

  (count-valid-passports (parse-input input))

#+end_src

#+RESULTS:
186

* Day 5
You board your plane only to discover a new problem: you dropped your
boarding pass! You aren't sure which seat is yours, and all of the
flight attendants are busy with the flood of people that suddenly made
it through passport control.

You write a quick program to use your phone's camera to scan all of
the nearby boarding passes (your puzzle input); perhaps you can find
your seat through process of elimination.

Instead of zones or groups, this airline uses binary space
partitioning to seat people. A seat might be specified like
FBFBBFFRLR, where F means "front", B means "back", L means "left", and
R means "right".

The first 7 characters will either be F or B; these specify exactly
one of the 128 rows on the plane (numbered 0 through 127). Each letter
tells you which half of a region the given seat is in. Start with the
whole list of rows; the first letter indicates whether the seat is in
the front (0 through 63) or the back (64 through 127). The next letter
indicates which half of that region the seat is in, and so on until
you're left with exactly one row.

For example, consider just the first seven characters of FBFBBFFRLR:

- Start by considering the whole range, rows 0 through 127.
- F means to take the lower half, keeping rows 0 through 63.
- B means to take the upper half, keeping rows 32 through 63.
- F means to take the lower half, keeping rows 32 through 47.
- B means to take the upper half, keeping rows 40 through 47.
- B keeps rows 44 through 47.
- F keeps rows 44 through 45.
- The final F keeps the lower of the two, row 44.

The last three characters will be either L or R; these specify exactly
one of the 8 columns of seats on the plane (numbered 0 through 7). The
same process as above proceeds again, this time with only three
steps. L means to keep the lower half, while R means to keep the upper
half.

For example, consider just the last 3 characters of FBFBBFFRLR:

- Start by considering the whole range, columns 0 through 7.
- R means to take the upper half, keeping columns 4 through 7.
- L means to take the lower half, keeping columns 4 through 5.
- The final R keeps the upper of the two, column 5.

So, decoding FBFBBFFRLR reveals that it is the seat at row 44, column 5.

Every seat also has a unique seat ID: multiply the row by 8, then add
the column. In this example, the seat has ID 44 * 8 + 5 = 357.

Here are some other boarding passes:

- BFFFBBFRRR: row 70, column 7, seat ID 567.
- FFFBBBFRRR: row 14, column 7, seat ID 119.
- BBFFBBFRLL: row 102, column 4, seat ID 820.

As a sanity check, look through your list of boarding passes. What is
the highest seat ID on a boarding pass?

To begin, get your puzzle input.

#+name: day5_input_1
#+begin_example
FFBBFFBRRR
FBFBBBBLRR
BFBBBBBLRR
FBBFFFBLLR
FFBBFBBLLR
FBFFFBBLRL
FBFFFFBRRL
FBBBBBFLLR
BFFFBBFLRR
FFBBFBFRLL
BFFFBFBLRL
BFBBBFBLLL
FFFBFBBLLR
FFBBBFBRLR
FFFBBBBLRR
BFFFFBFRRL
FBFFBBBRLR
BFFFFBFRLR
BFBFBFBRLR
FFBFBFFLLR
BBFBBFFRLL
BFFBBFFRRR
BBFBBFFRLR
FFBBBBFLRR
FFFFBBBLLR
FBBBBBBRRR
FBFFFBBRLL
FFBFBFFLLL
FFFBBFFRRL
BBFFBBFLRL
BFFFBBBLRR
FFBFFBFLLR
FFBFBFBRRR
FBBFBBFRLL
FFFBBFFLLR
FBFFBFBLLR
FBFFBBFLRL
BBFFFFFLRL
FBBBFFFLRR
BBFFBBBLRR
BFFFFFFRLL
BFFBFFFLRL
FFBFBBBLRR
BFBBBBBLRL
FFBBBFFRRR
BFBBFBBLLL
FFFBFBBLRL
BFFFFBBLLL
BBFFFBFRRL
BFFBFBBLRR
BFBFFFBLLL
FBFBBFBLRR
BBFFBBFRLR
FFBFFFBLLL
FBBBFBBRLL
FBFBFFBRLL
BBFBFFBLRR
BBFFBFBRLR
BBFFFFFRRR
FFFFBBFLRL
FFFBFFFRRL
BFFFBBFLRL
FFFBBBBRRR
FBBBBFBRRR
FBFBBBFLLR
BFBBBFFRRL
FFBFBFFLRL
FBBBFBFLLR
BFFBBFFRLL
BFBFFBFRRL
FBFFBFFLRR
FFBFFFFLLL
FFBBBBBRLR
FBBFBFBRRL
FFBFBBFRRL
FBFFFFFLLL
BFFBBBBRLR
FFBFBFBLLL
FBBFFBFLRR
FBBBFFFLLR
BFFFFFFLRL
FFFBBBFLRR
BBFFFBBLRR
FBFBFBBLRR
BFBFBFFRLL
FFBBFFBLLL
BBFFBFFLLL
FFBFFBBRLL
BFBBFFBLLR
BFFBBFBLLL
FFFBBBFRRL
FFBFFBBRRL
FFFBFBFLRL
FBFFBBBLRL
BFBBBBFLRR
BFFFBFBRLR
BFFBBBBLLL
FFBBBBFRLR
FFFBFFFLRR
BBFFBFFRLL
FBBFBBFRLR
FBFFBBBLRR
FBFBFFFLRR
BBFBFFBRLR
FBFFBFBRLR
FBBBBBFRLR
FBBBBFBLRL
FBBFBBBLLR
BBFFFFBLLR
FFFBFFBLRL
BFBBFBFLLR
FBFBBBBRRR
FBBFFBBRRR
FBFBFBBRLL
BFFFFBFLRL
FBBBFBBLLL
FBBFBFFRRL
BFFBBBBLRL
BBFFBFFRRL
BFFBBFFLLL
BFBBBFFRLL
FFFBBBFLRL
FFBFFBFRLR
BFFBBBFRRR
FBFBFBBLLL
BBFBFFBRRR
FFFBFBFLLR
FFBBFFFRLL
BFFFBFBRRL
BFFFBFBRLL
BFBFFBBRLR
BFFBFBBLRL
BFBFFFFRLL
FBFFBFFRRL
BBFFFBFLLR
FBBFBFBRLR
BFBFBBBLLL
BFBFBBBLRL
BBFFBBBLLL
BBFBFBFLRL
BFBFBBFRLR
FBFBBFBRRR
FBBBFBBLRL
FFFBBBFRRR
FBFFFBFRRR
BFBBBBFRLR
FFFBFBFRLL
BFFBFFBRRL
FBBFBBFLLL
BBFBFBBRLR
FFFBBFBLLL
FBFBBBFLRR
BFBBBBFLLL
BBFBFFBLRL
BFBFFBFRLR
FBFFBBBRLL
BFFFFBBLRR
BFFFFFFRRR
BBFFBBBRRR
BBFBFBFLLR
BFFBFFFRRR
FBBBFFFLLL
BFFBFFFLLL
FFBFBBFLRR
FFBBFFFLRR
BFFBBFFLLR
FFBBBBFRLL
BFFBBBFRRL
FBBFFFFLRR
FBBFFFBLRL
BFFBBBFLLR
FFBFBFFRRL
BFBBFFBRRL
BFFFFFFLLL
FFFBBFFLLL
FBBBFBFLRR
FBBFFBFLRL
BFBBFFBRLR
BBFBFBFLRR
FFBBBBFRRR
BBFFBBBLLR
FFBBBFFLRR
BBFFFBBRRL
BBFBFFFLRR
BFBFBBFRRR
BFFFFBBRLR
FFFBFFBLLL
FBFBFBBRRR
FFBFBBBRRL
BFBFBFFRRL
FBBBBFBLRR
BFFFFFBRRR
FBBBFFBRLR
BFBFFBBLLL
FFBBFFFRLR
FBFBBFBRRL
FFFBFBBRRL
BFBFFFBRRR
FBFBFFFRRR
BFBFFFBLRR
BFBBFBFRRL
FFFBBBFRLR
FFFBBFBLRL
FBBBFFBLLR
BFFFBFBLLR
BFBFBFBLLR
BFBBBFFRRR
FBBBBFBLLL
BBFFFBBLRL
FBBBBBBRRL
FBBBFBBRRR
FFBFFBFLLL
FBFFFFBLRL
FBBFFBFLLR
FFFFBBFRRL
BFFFFFBLLR
BFFFBBBLLL
FBBBBBFRRR
FFBFFBBLRL
FBFFFBBLLR
FBBBBBBLLR
FBFFBFBRLL
FBBBBFFRLR
FFBBFBFLRL
BFBBBBBRLL
BBFBFFBRRL
FFBFBFFRLR
FFFBFBFLRR
FFBBBBBLRL
BBFBBFFLRL
BFBBFFFLLR
BFBFFBFLRL
FBFBBFFRLR
FBFFFFFLRR
BFBFBBFLLL
BFBBBBFRRL
FFFFBBBRLL
FFBBFFBRLR
FBBBFBFLRL
FBFFBBFLLL
BFBFBFBRRR
BFFBFBBLLL
BBFBFFBLLR
FFFBBBBLRL
FBBBFBBLRR
FBFFBFFRRR
BBFBFBBRLL
FFFBBFBLRR
FFBFFBFRRL
FBBFFFFRRR
FBFBBFBLRL
BFFFBFFLRL
FFBFFFFRLR
BFBFBFFLRL
FFBFFFFRRR
BFFBBBFLLL
FBBFBFBRRR
FFBBBBBLLL
FBBFFBBLLL
FFFBBBBLLL
BBFBFBBLLL
BBFFBFFRLR
BFFFBFFLRR
BFFFBBBRLL
FFBBFBFLLL
BFBFFFBRLL
FFFFBBBRRL
FFBBFBBRRL
FBBFFBBLRL
FFBFBBBRLR
FBFBFFBRLR
FFBBFFBLLR
BFFBFBBRRL
BBFFFBFRLR
FBBFFFBRLL
BFFFBBBRRR
FFBFFFBRLL
BFBBFFFLLL
BFFBBFFRRL
BFBBFFBRLL
FBBBBFFLLL
FBBBFBBRRL
FFFFBBFLRR
BBFBBFFRRL
BFFBFFFLRR
FFFBFFBLRR
BFFBBFBRRR
BFBFBBBRLR
BFFBBBBLLR
BFFFFBBRRL
FFFBBBBRRL
FFBBBFFRRL
FBBBBBFLRR
BFFBFBFLLR
BFBFBBBRLL
FFBFBFFRRR
BFBBBFBLLR
FBFFBFFLLL
BFBBBBBLLL
BFBFBBFRLL
BFFBBBFLRL
BFBBFBFRLR
BBFFBBBRLR
BFFFBBFRLL
FFBBFBBRRR
FBFBFBFRLL
FBBFFBFRLR
FBFFBBBLLL
BFBFFFFRRL
BFBBBBFLRL
BFBFFBFRLL
BFBFBFBRLL
FBBFFFFLLR
BFBBBFBLRL
FFBBFFBRLL
BFBBFBFLLL
BBFFFBFLRR
FFBBFFFLLL
BBFBBFFRRR
FBBBBBFRRL
FBBFBFBLRL
BFFFFFBRLR
BFBBBBBRRR
FBFFFBBLRR
FBFBBFFLRL
FFBBBBFRRL
BFFFBBFLLR
BFFBFBFRRL
FBFFFFBRLL
FBFFFBFRLR
FFFFBBFRLR
BFFBBFFLRL
FBFBFFFRRL
BFFFBFFRRR
FFBFFFBRRL
FBFFBBFRLL
BFFBFBFRLL
FBBBBBFLRL
FFBBBFBRLL
FFFBBFFLRL
BFFBFBFLLL
FBBBFFFRLR
FBFBBFFLRR
FBBBBFBRLL
FBBFFBFLLL
BBFFFFFLRR
FFFBBFBRRL
FBFBBFBLLR
FFBFBBFRRR
FBFBBFBLLL
FBBFBFFRLR
BBFFBFBLLR
BBFFFFBRRR
FFBFBBFLRL
BFBBFBBLLR
FFBBBFFLRL
FFFBFBBLLL
BBFFBBFLRR
FFBBBFBRRR
FFBFBBFRLR
BBFFBFFLRR
FFBBBBFLLL
FFFBBBFRLL
FBBBBBBLRR
FBBBBBFRLL
FBFBBBBRRL
FBBBFFFRLL
BFBFBFFLRR
FFBFBBBLLL
FFBFBBFLLL
FFBBFBFRLR
BBFFFBFRLL
FBFBFBFLLR
FFBBBFFLLL
FFBFFFFLLR
FFBBBBBRLL
FFBBFFFLLR
BBFFFBFLLL
BFFFBBFRRR
FBBBBFBRRL
BFBBFFFRRL
BFFFFBBLRL
FFBBBBBLLR
BFBBFFFRLL
FBFBFBBLLR
FBBFBBBRRL
BFBBFFBLRR
FBFBBBFLRL
FBFBBFFRLL
BFBBBBBLLR
FBBFFFBRLR
BBFFFBBRRR
FBFBFFBRRR
FFFBBBBRLL
FFBFFFBLRL
FFBFFBFLRR
BFFFBBBLLR
FBFFBBBLLR
FFFBFFFRLL
FBBBFBBLLR
BBFBBFFLLL
FBBFBFBLLR
FBFFBBFLRR
BFBFFBBRLL
BBFFBFFRRR
FBBFFBBRRL
BFFBFFBLRL
FFBFFFBLRR
FBFBFFBLLL
FBBFBFBLLL
BBFBFBFRRL
BFBFFBBLRR
FFBFFBBLRR
FBBBBFFLRR
BFBBFBFLRR
FFBFBFFRLL
BBFFBFFLRL
BFBBBFBRLR
FBBFBBFLRR
FBBBBBBLLL
FFFBFFBRRR
FFBBBFFRLR
BFFBFBBLLR
FBFBFFFLLL
FBBFFBFRRL
FBBFBBBRLL
FBFBBBFRLR
BFFBBFBLRR
BBFFFFFLLL
BFFBBBFRLR
BFFFBFFRLL
FFFBBBFLLR
BFFFFFFRRL
FBBBBFFLRL
FBFFFFFLLR
FFBFBFBLLR
FFBBFFFLRL
FFFBFFBRLL
FFBBFBFLLR
FFFBFFBRRL
FFFBBFBLLR
BBFFFBBRLR
BFFFFBFRLL
FFBFFBBLLL
FBFBBBFLLL
FBBBFFFRRR
BFBFBFFRRR
FFFBFFBLLR
BFFBFFBLRR
BBFBFBFRLR
FFFFBBBLRL
FFFBFBFLLL
BFFFFBBRRR
BBFBFFBLLL
BFBFBBFRRL
FFBFFBBRLR
FFBBFFFRRL
BBFFBFBRRL
BBFFFFFRLR
BFFBBFBRLL
BBFFFFBRRL
FFBBBFBLLL
FBBFBBBRRR
BFFBBBBRRL
BFFFFFFRLR
FBBFFFBLRR
FBBBBFFRRR
FBFBFFFLRL
FBFBBFFLLL
BFBFBBBLLR
FBBBFFBLLL
FBFFBFBLLL
BBFBFFFRLR
FBFFFBBLLL
BFFFFFBRRL
FBBFBBFLRL
FBFFFBBRRL
BFFFBFBLLL
FFFFBBFRRR
FBFBBFFRRR
BBFBBFBLRL
BBFBFFFRRL
BFBFFFFRLR
FFFBBFBRRR
FFBFFBFLRL
FFFBBFFRLL
BFFBBBFRLL
FFFBFBBRLR
BFBBBBFRLL
BFBFFFBRLR
BBFFBBFLLR
FFFFBBFRLL
FBBBFFBLRL
BBFBFFBRLL
FBFFBFBLRL
BBFFFBFLRL
FFFFBBBLLL
FBFFFFBLRR
FBFBBFFLLR
FFBBFFFRRR
BFBBFFBLLL
BFBBBFFLLL
FBBBBBBLRL
FFBFFFFLRR
FBFFBFBLRR
BFFBBBBRLL
BFFBFFBLLR
BBFFFFFLLR
BFBFFBFLRR
BBFFBBFRLL
BFFFBBFRRL
FFBFFBBLLR
BFBBFBBRLR
BFFBFFFRLL
FFBBBFFLLR
BBFBBFFLLR
BBFBFBBLLR
FFBFBFBRRL
BFBFFBFLLR
BFFBFBFRRR
FBBBFBFRLL
FFBFBFBLRR
FBFFFFFRRL
BFBBBBFLLR
FBFBFFFRLL
BBFFFFBLRL
FFBFBFFLRR
FBFBBBBLLL
FBFBFBFLRL
BFBBBFBRLL
FBFBFBBRLR
FBBBBBBRLL
BFBBBFBRRR
FBBBFBFRLR
FBFFFFFRRR
BFFFFFFLLR
BFBBFBBRRR
BBFBFBBRRR
BFBFBFBLRR
BFBBFBFLRL
BFFFBBBRRL
BFFBFBBRLL
FBFFFBBRLR
FFBBBFBRRL
BFBFFFBLRL
FFFFBBBRLR
BFBFFBBRRR
FBFFBBFRLR
FBFFFBFLLR
FBFBFFBLLR
BFFFFBFLRR
BFBFBFFLLR
FBFFBFFLRL
BFBBFFBRRR
BBFFBBFLLL
FFFBFBFRLR
FBBBBBFLLL
FBFFFFBRLR
BFFBBBBRRR
BFBBBBBRRL
FFFBBFFLRR
FBBBFBFRRR
BBFBFBBRRL
FFBBFFBLRL
FFFBBBBLLR
BFFFFFBRLL
FFBFFFBLLR
BFFBFBBRRR
FFBFBFBLRL
FBFBBFBRLR
BFFBFBBRLR
BFBFFFFLRR
FFBFBBBRLL
BFBBBFBLRR
BBFFBFBRLL
FFFBBFBRLL
BBFFBFBLRR
BFBBFFFLRL
BFBBFBBRLL
BFFFBBBLRL
BBFBFBFLLL
BFBFFBBRRL
BFBFFFFLLL
BBFFFBFRRR
FBFBBBFRRL
BFFBBBBLRR
BFBBBBFRRR
FFFFBBFLLL
FFFBFBBRLL
FBBFBBFLLR
FBFBFBFLRR
BFFFFFFLRR
FBFFFFFRLR
BFBFFFFLLR
BBFBFBFRLL
FBFFFFBLLL
BBFBFBFRRR
FBBBBBBRLR
BBFFBBFRRR
BFFBFBFLRR
FBBFBFFRLL
BBFFFBBRLL
BBFFBBBRRL
BFFBBBFLRR
FFFBBFFRLR
FBFFBBBRRR
FFFBFFFLRL
BBFBBFBLLL
FBBFBBFRRL
FBBFBFBRLL
FBFFBBFRRR
FBFFFBFRLL
FFBFBBFLLR
FBFBBBBRLR
BFFBBFBLRL
FFFBBBBRLR
BFFFFBFLLR
FFBBFBFLRR
FFFFBBBRRR
FBFBFBFRRR
FFBBFBBLRL
BFBFBFBRRL
BBFBFBBLRR
FBFFFFFLRL
FBFBFBFLLL
FBFBBBFRLL
FFBBBBBRRL
FFFBBFFRRR
BFBBFFFRLR
FFBFFFFRRL
BFBBBFFLRL
FBBFBBFRRR
FBBBFBBRLR
BFBBFBBLRR
FBBFFFBRRL
FBFFBBFLLR
FBBFFBBRLR
FFFBFBFRRR
FBBFBFFRRR
BFBBFBBLRL
FFBFFBFRRR
BFFBBFFLRR
FBFFBFBRRL
FFBFFBFRLL
FFBBBFBLLR
FBFFBBBRRL
FFBFBBBLRL
BFFFBFFLLR
FBFBBBFRRR
FFFBBFBRLR
BFFBFFBLLL
FBFFBFFRLR
BBFBBFBLLR
BFFFFBBLLR
BFBBFBFRLL
FBFBBBBLRL
FBBFBBBRLR
BFBFBBBLRR
BBFBFFFLRL
FFBBBBBLRR
FBBFBBBLLL
BFFFFBFLLL
FBBFFFBRRR
FBBBFBFLLL
FFFBFFBRLR
FFFBFFFLLL
FFFBFFFRRR
FBFFFBFRRL
BBFBFFFLLR
FFBBBBFLRL
FBFBFFBLRR
FBBBFFFLRL
FBFFFFFRLL
BFFBBFBRLR
BBFFBBBLRL
BFBBBFBRRL
BFBFFFFRRR
FBBFFFBLLL
FFBFBBBRRR
FFBBFBFRRR
FFBBFBBRLR
BFBBBBBRLR
FBFFBFBRRR
FBFBFBBRRL
BBFFFFBLLL
FBFBFFBRRL
FFBFBBBLLR
FFBBFFBLRR
FBBFFFFLRL
BFFBFFBRLR
FFBBFBBLLL
FBBFBBBLRL
BFFFFBFRRR
BBFFFBBLLL
BBFFBFBLRL
BFBFBFBLLL
FBFFBBFRRL
FFFBFBFRRL
BFBFFBBLRL
FFFFBBFLLR
FBFBBFFRRL
BFBFBBBRRR
FFBBBBFLLR
FFBFBBFRLL
FBBFBFFLLL
FBFBBFBRLL
BFBBBFFLRR
FBBBFFBLRR
BFFBBFBLLR
FFFFBBBLRR
BBFFFFFRLL
BFBFFBFLLL
BFBFFFBLLR
BFBFFBFRRR
BFFFFFBLRL
BBFFBBBRLL
BFFFBBBRLR
FBBFBFFLLR
FBFFFBFLRR
FBBBFFBRRL
BFBBFFBLRL
BFFFBBFRLR
BFFFBFBLRR
FBFBFBFRLR
FBBBFFBRRR
FFBBBFFRLL
FBFFFFBRRR
FFBBFBBRLL
FBBFFBFRLL
FFFBFBBRRR
FBBFFFFLLL
FBFFFFBLLR
BFBBFFFRRR
FBBBBFBRLR
FFBBFBFRRL
FFFBBBFLLL
BFFBBFBRRL
FBFFFBFLRL
BBFBFFFLLL
BFFFBFFRRL
BFBFBBBRRL
BFFBFFFLLR
FBBFBFFLRL
FBFBFFFLLR
BFBFBBFLRL
FBBBFFBRLL
BFBBBFFRLR
FFFBFFFRLR
FBFBBBBLLR
FBFFBFFLLR
BFFFBFFRLR
FFBBBFBLRR
FFBFFFBRRR
FFBFBFBRLR
FFBBFFBRRL
BFFFFFBLLL
FBBFFBBRLL
BFFFBFBRRR
BBFFBBFRRL
FBBFBFFLRR
FBBBBFFLLR
BBFFFFBRLL
FFBFFFFLRL
FBBFFFFRLL
FBBFFFFRRL
BFFFBBFLLL
FBBFFFFRLR
BFBBBFFLLR
BFBBFBBRRL
BBFFFFBRLR
FBBBFBFRRL
FBBFFBBLRR
FBBFFBFRRR
BBFBFFFRRR
BBFFFFBLRR
BFFFBFFLLL
FFFBFFFLLR
FBBBFFFRRL
BBFFFFFRRL
BFBFBFFLLL
BFBFBBFLLR
FBBBBFFRLL
BFBBFBFRRR
BFFFFFBLRR
FFBBBBBRRR
FFBFFBBRRR
FFBBBFBLRL
FFBFFFBRLR
FBBFFBBLLR
BFFBBFFRLR
BFFBFFBRRR
FBFBFBFRRL
BBFBFFFRLL
BFFBFFFRRL
BFBFFFBRRL
BBFFFBBLLR
BBFFBFFLLR
BBFBFBBLRL
FBFBBBBRLL
BBFFBFBRRR
BFFBFFFRLR
BFFFFBBRLL
BBFBBFFLRR
FBBBBFBLLR
FBBFBBBLRR
FBFFFBFLLL
FBBFBFBLRR
FBFBFFBLRL
BFBBFFFLRR
FBFBFFFRLR
FBFFBFFRLL
FFFBFBBLRR
FBBBBFFRRL
BBFFBFBLLL
FBFBFBBLRL
BFBFBBFLRR
BFFBFBFRLR
BFBFFFFLRL
BFBFFBBLLR
BFFBFFBRLL
BFBFBFFRLR
FBFFFBBRRR
BFBFBFBLRL
FFBFFFFRLL
FFBBFBBLRR
FFBFBFBRLL
#+end_example

#+begin_src scheme :var input=day5_input_1 :results raw :exports both :prologue "(use-modules (srfi srfi-9) (srfi srfi-1))"
  (define (row-letters->binary letters)
    (let* ((l (string->list letters))
	   (conv (string-concatenate (map (lambda (n) (if (equal? #\F n) "0" "1")) l)))
	   (val (string->number conv 2)))
      val))

  (define (seat-letters->binary letters)
    (let* ((l (string->list letters))
	   (conv (string-concatenate (map (lambda (n) (if (equal? #\L n) "0" "1")) l)))
	   (val (string->number conv 2)))
      val))

  (define (row-seat->seatid row seat)
    (+ seat (* 8 row)))

  (define (process-ticket str)
    (let* ((row (row-letters->binary (substring str 0 7)))
	   (seat (seat-letters->binary (substring str 7 10))))
      (list row seat (row-seat->seatid row seat))))

  (define (parse-input in)
    (filter (lambda (x) (not (equal? x ""))) (string-split in #\newline)))

  (apply max (map (lambda (x) (third (process-ticket x))) (parse-input input)))
#+end_src

#+RESULTS:
874




--- Part Two ---

Ding! The "fasten seat belt" signs have turned on. Time to find your
seat.

It's a completely full flight, so your seat should be the only missing
boarding pass in your list. However, there's a catch: some of the
seats at the very front and back of the plane don't exist on this
aircraft, so they'll be missing from your list as well.

Your seat wasn't at the very front or back, though; the seats with IDs
+1 and -1 from yours will be in your list.

What is the ID of your seat?


#+begin_src scheme :var input=day5_input_1 :results raw :exports both :prologue "(use-modules (srfi srfi-9) (srfi srfi-1))"
  (define (row-letters->binary letters)
    (let* ((l (string->list letters))
	   (conv (string-concatenate (map (lambda (n) (if (equal? #\F n) "0" "1")) l)))
	   (val (string->number conv 2)))
      val))

  (define (seat-letters->binary letters)
    (let* ((l (string->list letters))
	   (conv (string-concatenate (map (lambda (n) (if (equal? #\L n) "0" "1")) l)))
	   (val (string->number conv 2)))
      val))

  (define (row-seat->seatid row seat)
    (+ seat (* 8 row)))

  (define (process-ticket str)
    (let* ((row (row-letters->binary (substring str 0 7)))
	   (seat (seat-letters->binary (substring str 7 10))))
      (list row seat (row-seat->seatid row seat))))

  (define (parse-input in)
    (filter (lambda (x) (not (equal? x ""))) (string-split in #\newline)))

  (define (seatids in)
    (map (lambda (x) (third (process-ticket x))) in))

  (define (find-missing seats)
    (let ((sorted-seats (sort seats <)))
      (let loop ((n (car sorted-seats))
		 (ls (cdr sorted-seats)))
	(if (= (1+ n) (car ls))
	    (loop (car ls) (cdr ls))
	    (1+ n)))))

  (find-missing (seatids (parse-input input)))
#+end_src

#+RESULTS:
594

* Day 6

--- Day 6: Custom Customs ---

As your flight approaches the regional airport where you'll switch to
a much larger plane, customs declaration forms are distributed to the
passengers.

The form asks a series of 26 yes-or-no questions marked a through
z. All you need to do is identify the questions for which anyone in
your group answers "yes". Since your group is just you, this doesn't
take very long.

However, the person sitting next to you seems to be experiencing a
language barrier and asks if you can help. For each of the people in
their group, you write down the questions for which they answer "yes",
one per line. For example:

#+name: day6_test_1
#+begin_example
abcx
abcy
abcz
#+end_example

In this group, there are 6 questions to which anyone answered "yes":
a, b, c, x, y, and z. (Duplicate answers to the same question don't
count extra; each question counts at most once.)

Another group asks for your help, then another, and eventually you've
collected answers from every group on the plane (your puzzle
input). Each group's answers are separated by a blank line, and within
each group, each person's answers are on a single line. For example:

#+name: day6_test_2
#+begin_example
abc

a
b
c

ab
ac

a
a
a
a

b
#+end_example

This list represents answers from five groups:

- The first group contains one person who answered "yes" to 3
  questions: a, b, and c.
- The second group contains three people; combined, they answered
  "yes" to 3 questions: a, b, and c.
- The third group contains two people; combined, they answered "yes"
  to 3 questions: a, b, and c.
- The fourth group contains four people; combined, they answered "yes"
  to only 1 question, a.
- The last group contains one person who answered "yes" to only 1
  question, b.

In this example, the sum of these counts is 3 + 3 + 3 + 1 + 1 = 11.

For each group, count the number of questions to which anyone answered
"yes". What is the sum of those counts?

To begin, get your puzzle input.

#+name: day6_input_1
#+begin_example
wdcmlzfnugqtvjbsahi
easrkmocxbpjgi

xrpnegqlcsyodhjfutzakmiwvb
mgilapxjtrndbheyqzckfouwsv

scynhfozmlvbqkarwj
qhvjkmbyxcfonlazdw
vjhzfnapwclkqiomyb

bpourq
ujpmoqs
obqup

v
v
v
v
v

hwjlda
thkdjo
mlhdjw
edyfjvh
djh

xvjadplfcwmkeriug
adgtscyjipewvulr

hmkipduz
mdzkupi

vtyizwcdm
zdvtcyiwm
mfzcywvtid
iydclntzvmw

ps
pm
pm
p
pm

nglatdiw
twialgd
igsadtwl
iadgtwl
igawltd

jqoxkavs
askoxvqj
aqjvxskho
javqkxso
kaxjoqsv

ltkjfoxes
aifogkepx
ufcekybmzx
tigxeahnkf

xzfqbsnhmrviju
rmfvsbihpujq
hstfumvgrobijq

bga
ye

sg
gs
sg
gs
sg

knipbjmtrqoawe
rtaebqkmopjiwn
ewbuqcaijonmrpk
trnmpeqkobjiwa

puifme
ufb
fvp
rntzlyxwokfcg

nufjzpyawbqsdgi
ogcmpsdqaxvnzwetklh

qmdxnfrjobatzwgcyse
rdxtqseawzobygcmfjn

dbot
dwetlp
odtr

utbqx
bxuqt
xtbqu
quxbit

rvthuiqbljzaofgwy
ldftrsjvwoiayzuekcg
dtxmalyuifznvprkcwgoj

twc
w
pwg

rmzaoylipcwkvuqesbhn
kpuvhqlwyrabmszecnoi
cwaylknbrhvzmiupseqo
qlwiyczkevsnarhbpumo

cgr
grch
cgsr
rgce

eso
ose
soe

swimuzq
zqwsmliu
iqzurwsmh
iswqzum
wzhumsqi

amolqcs
sqoayj
sjazqxyo
aqhxsot
ozsajqkx

qbkyhzfspewgrtlv
pyeqtcbskf
jxbsonqtaykpef
tqskfmyboeup
bdjtfqypokse

yrtwqacluozbg
vwtfgzmcqobraj
opctryzqawbg

v
v
v
nv

dclgejbqrwtkvsxfa
ovgkhjyiqwbmefc

vpkx
jmydw
fxa
xa

gwtocmzslfqk
olkgwzcftsmq
ogmsfzlwqckt

uwxdl
wdux
oxuwdt
dxwu

ab
smej
t

iwhlqdermv
menrvqd
jemdqvr

n
n
a
n

jqcvetapkbsyu
twndyfrixzhvmsogu

xsz
zxs
zxs
szx
sxz

fsatbzpvqjknlrm
pbnljkratfzvsmq
qtrasmjnlkfvbpz
bsjavlmpqktrnzf
qajlbkzvmtsnfrp

utlchvariswzqjmx
almujswrcthzvfqix

p
j
p
n

cgsxwk
uwkcxj
xpwethnkcyb

gywc
wcgy
ctyugw
gwcy
wgyc

afmtuw
muatfw

ujwmnirvkdygtqcabh
takwqdjgzcuivrhnom
cawvrnxfjmghdtkiuq

srgt
ma

urnymxabthi
rtxnailuqvoyph
duytknrwiehaxz
rhaumscngtyix

gawbhtkqruyjel
rlcqbuhawkmyfgjte
jhbyqgkraetwlou
gxbtrnadlejwhyquks
ujfkleagybrtwhq

dctkngohsxaljfrbvmey
mlbvxaksifyneodgjctrh
lmkfobtyxngsjvrdahec
srkyveohxfmcjdlbtnag
lbguestydkjxfopnvmhcar

pjrhgzdwcmxq
cgwhmqpjdrxz

meipjv
mivpje
jevmip
peimjv
vmpeji

zkcavufyr
fyzuarckv
fvnacqgksry
yvcrfak
crfvyka

pqynikfxd
dynxqlifpk

laozucfdek
kpeauocdlz
uoldfsekzac
dmekaclyhnuzo

hwubponvt
vwytnphobu
vpnbgtwuoh
wpouhvbtn

wcxlspod
fmedwbtjops
pwnoscid

ufenjp
ngfxpe
njbpfc
vqnthfazdp
pmfjng

qrphaykit
qkysrta
jbwdtqrxzav

wjqfz
jqfaz

meuxikpsdw
kjimpsdwxu
dmxpwikujs

fjbsnmcgxz
bpfimjnzduh

urtkjpo
cthod

voclmdguaw
oczdlntgmeir

zipf
fipz

nbwcexytjzripskmo
kwpzrmtxiosejcb
tsrcoebzpiwjmxk

jafcwtsukrodynhvqge
pubrlchazvetosyigqjdk

qminshlycutrdwx
vigzpqbmunacrjftokl

hweisfpycjdzouvmbnkq
nqjxscbvmuwhzfakdo

qtndfjcglrkoyux
jqtrlgfkducxnomy
tqnrjxckgfaupdoly

pbe
b

n
n
n
n
n

nsc
ns
nse

qzkxif
vkfqizx
kfzqix
zixkfq
ifzxkq

nvshwafe
vbewacnh
nvwmeah

ziafwxcnmebko
cdfrxmk
fkmpxc

y
y
y
y
y

yauxbwtcvgoq
ywcvotagxbqiu
gqwyvbacouxtn
uobqrcgwtvayx
qcgwoytbxuav

r
nr
a
r

xjrkwdnbyuscfgqtphiov
brshqnjcoukxitvywfdpg
vrxlptbcyfdwhgkouqijns

fqcvwudyiotjblzpxshgnmkrae
ouhrqwtgnjeyxiamfzpdscbkl

lnch
nhclmg
ldhzcny

uzfeomrwi
ydgkhjbx
qcylp

hagpbecorwyvfdz
rstplobhmfnxvykdewc
hfruowdvyjgbpzce

rgdiznuxa
dragzniue
jzysdgpuvkowqin
lugrndiz
nbdcfugzi

eqponlctfbwgk
kyjniulbegpdchtwoaq
onczetbplkwqg

thevzsrc
zcewrsv
vczueosky
wmzlcsve

sxeqojwkarhyutcdnzp
rjnuwzxpmeysdoctlaq
pzqxeratsdnkuovcwjy

qexjbo
cqunbaprhwyjfe
ilvegkbszdt
efbmqj

wm
wm
hm
wm
m

texosjaiycpqn
mntxspgikeldwycjarq
nysqtaceipjux
phiqznsyxjcvoabet
neqytxcuipsajvf

z
nozy

ydfcsvgbikjphamr
wskfdahgpvmrcjby
kpsirchfmjavbdgy
pslxjrugtzydaokemvbcfqh

t
pyt

fu
fu
d
yj
fnl

qxkevrhpna
kmvyorduqe

sfnmyevqwka
fvmyieawqks
kvfhmctdqjaslywe
ywfkvqeanms
kufwyqmaesvh

ulvtwepimynb
ehmpnylubtvwi
wplevtunmyib
lpbwnvtuyeim
unvpbgtjiaylmcwes

zfxkceynsu
xdfzysnuie
efzgxunsy
nzydesxfu

jneurlkfzxbq
xekznblfurqj
rbzljfkqnxeu
zueknrbxjfylq
xzferlbjqnku

tr
f
egtr
jmu
s

aeq
qae
eqa
aeq

bsgjrilayoezwndvtq
giadlcryjwobhznqesvft

guxfyzespj
zusejpfgxy
zxygjuefps

xvmlgpzjdrubqa
jfmbdvzeyrlup
ruzchykmbpwdvloj
vhmuebldrjzpo
bhvcmrypulzjiwds

cfsjzamyhtoxq
xoysjqfzmhtac
qocxatmfshjzy

vdhsifmynta
nsmfhdtya
tsnfhamdy
dafyqtsnmh

rfybkqmh
qoumrd

l
y
l
y
w

vlmerz
mlvrze
zvrmle
zelrvm
mzlrve

rnb
gdcb

pbtergc
tecfjgr

ogzsajwvdiplrtxbhfcnky
btjzlswhikyofgcpvrnda
tbwinagrhfyscvlejkdop
dakhrbipqglmovjyncswtf
bhyljrdpsktgfiancwov

qolmnyvhtwe
uwkecxshldmoy
zwblsockyumh
miywfgjhaopr

u
u
q

zdxynqmev
bdexmzyiqcn

bwtqagf
tnmwfaqbj

p
p
p
p
p

yjgicnxerbsu
xpzfqirsjh
exswmarikbj
mjxgrsi

tvzkbxugmcnshproiw
czxtirownbmpksuvgh
cnofirbgmhzuspvtxwk
gmctsrohkxwzupvbni
vsgbzcmktxihonwupr

dyaoim
aiom
ozimual
oxaim
biyotma

saliju
evzhxcobk
lj

txhebw
etwhbx
uhwxtbe

eyaixfrdhoqksc
eakiqsrocxyhd

vkr
kvr
kvr

surjoh
ubh
ubmahe
uh

vhkcawrno
vowahrnkc
oknarvwhc
cnkhvwoar
wvhkanrco

ntpfemsvialxgrwqzc
kcwegrtispxnyd
phstgwixebnucr
xpwjtenscoigr

sfanq
xgtzfrn
ulfinpkv

kdwnyjuzctiqpgf
ngtcrjipqfyh
ypfvcqntirgjh

urmtsh
svihtu
utmph
juthydwafcqx
uthve

sk
ks
sk

zxbvcrgyqfjtoeiudwpkhsm
igkswrpohqudcfjxzmvytb
cpatkzfuoyqgvrsmibhxjdw

kvgumiabnoh
bvaiomgnukhc
mkhnvusbagio
hamiobunkgv
umsgovkahbin

yrceuq
rmdbpa
nkvxjslwg

lkt
fl
vil

whn
hn
hn

gvebcszypdlkqm
zcyhdlpqgsvke
cdzbylqkpsuveg
pzsyxlgdaiofcqwvek
gmcpvyqzeskld

ryzfspdtbwxiomhkjnlu
tqihvployrmksbunzfwc

dualjxigyrzb
durysxjlgzaib
srgxulazbjyid
lrgaubjydzxi
azritbxdpljyg

cfahxspjelitdnobuvqywk
vwmkoxulnypfiatgjbhrcsq

f
f
f
f
f

grbmahpise
mbireyxhalgs

bcrkvuwqt
trubckq
rbuqtkc
trkbcuq
rubtqkc

zxpbejmvhrutwlkq
gtvrzphoqcbnmju
pjazbvqurgmysht
fhsptiumrvjqbz

kpszjieflb
blsijkefzp
zksjiefpbgl
ilbzrksajpfe
sglzbepfjik

nxwohsipd
zitjrlvfgsoym
bqsiopuc
aoisd

wj
j
fzpglynjeu
jk
ikj

abzftcqvgsrnexpmho
pxvlybndrtqimzhosacgef
nocqfzerjaubxthgmwspv

psauzryot
vmdhbwe
lfc
gsri
sqya

lkjudnqterhyscgx
eckqhlxybrngudstj
wotecvlyrpgqmijxkhsd

htpc
caph
hpustjc
nyhcedmgp

ezaljkfpiyvroud
hbiwxfstmldkecnvpgqo

kiqvzyjrthmblu
ahszlduemxcij

wirunkh
hwqdknyirul
kxwuhirn
hkirwnu
ierwunkh

vcgno
snmicvo
ncomjisv
coynuv
lconfdvpz

tgqkhowsyfbzpcur
zcqsugtwhrpfy
fgydqpcjswrlzeuth
thgpcfyzqeursw

rwpci
cipwr

ptrlaqebo
pebtlaqor
qboxepatr
epbartoq

fypd
dpyf
ypfd
fdpy

c
c
c
d
c

gxysqiamkpc
mpiacyqxkgs

mvqbskuzefy
zcsqebma
ztbnlhe

snx
xsn
nkxs
snx

joyblxztkswmvnec
gdcrhykmfseqapibzu

oqzmprikt
fhlgxucda

ygrjkfazu
kjiagrzyfu

btg
o
v
oc

bnqyz
ebdfls

vjhocqkamygbplu
dbwsyefuxzntijrc

kmlb
kqsbl

vhjsdxrfpokyznibwgtmu
syvkmzfjgpdwixrnbutoh
uzbjgvhdkpynmtfoxsrlwi
jpkxwvyrgftzioubhsmnd
ykjmzvsqnhxwgbrutoipdf

hwby
yvbmhl
echgiyabjpf
krbouyh
hrynotb

tobipzwfxy
pfxwytizob
hsfwzpbotiyax

znrgilpcfse
seinczlpgrf
nircgepszfl
rcegzsiflpn
lzgrcpensfi

tupvbxcgfnmh
fpqntvibgxhmc
npbtvxghfm
tvxfhmbnipg
rnvxmhfjgpbt

inysghdka
wbc

noktsjqvmzxheplrcfgiuwda
dlogmasfzwhupjrkcntixqev

zhwfbs
bzcwh

igqkpctmafr
jietalnfksqp

ewlanjvgdbpm
lpjangwvem
vpngjwmeal
glvwnpejam
enlgwjmvpa

niocufzwrk
kirmuzfocvw

juqervaxni
cudjqavnix
iuvjndcaxq
xvniqajugd
vxunjiaq

lmayozkep
koazylep
aeykzlop

ejgotzhrxbsnqimu
lrspkgobcaywmjfvhd

uazxfrony
uoaxynzrf
yunaorxfz

lowmgiuxpnakzsq
qwaomukglnx
ubgkoyqanwlvmx
lowaqgyxunkhm

alfoj
floj

yglkurfahidmoxtvz
muykfdrzivlothga
devylsarcupgoihkmftz
rmtgkalydnhvozubfi
ahrzqodkgxyuitvmfl

gmdoshlaixnc
xhmicdgosanl
hiqgvbulakdmoxcpn
hoiamdsngcxtl

egnprq
ash

oabx
abxfo

vomitazdbflqhkue
lvemipubdafohztkq
dkabtiylqgzuovehmf

euanfbq
skufxtami
nefauc

fadpbjxvzeghqkriy
xpaqfzjvybdhrkieg
jeqghzxrdyvakpfbwi
ygvakzbdpqrxjfeiht

dhvmgjoqzknbwyl
hvnlobmydwzqkjg
vbzljhdqgnmwoyk

s
k
sk
d

svzubcigpeqdthfmxnj
djogszbcnvefqthiuxmp

vgkpjwymduqfxcztoasne
swgapuymcvqnjodtkfzxe

stgv
yvbts
iokqv

h
h
h
ujxw

uz
uz
uz

cdh
lhg
mkh
quroafxhipsev

d
d
dg

lbrsefwhxagdmpqjiocuvyn
uobfgnhvsqwzlkjyraicdpm

uwnvthio

yudxpkhrngb
selctamwozqvf

ueiypcnoa
nidaehvt
akencir

ozcru
uoflar
pwoxuyvm

nrgaujbldiwxvq
sdvuirgaynbj

synqkzdlpebticorvwxmaug
ekyatuvbpohmxnfdgczirwql
ztvwupairdeqmckgbnylxo
alngerwtckpvmioxbduzyq

dqygzrkuowejsm
zyikwtjsver
yzjrsvawceik

lqduw
iudw
wdrue

zxnrflac
lx
lvx
otlwkx
wxyl

q
q
q
q
q

aigmyqxscvhde
csegmkqdnvyahix
gvqixcdheysam
dsmyaexgivqhc
shiqmxgdeycva

nbmovulhpai
yfcobuiaetpdvmln
mnopuvlbia
wviopnmluabk
uvamohipklnb

cibznrjtsgoafdlkx
cethszlarinx
xcsztairehnlp
szhnatlxicr
mpselnxatyzric

qxdzauyvbc
qxzvabdcuy
zyxabucqsdv

uzxvatmprofyjcliwgbdsqnek
kynesjvmoifucbpqwxlzrdtga

mepouwaj
cutjoxvpa
apojcvftd
opwdaj
njhzgqrikyapslo

efqisyl
elfqsiy
sfiqley

if
wvzghe
xn
dnxu

afuolgsxdckypbenqjhmr
euqojgbfzphxmnrysda
xsbwrdmnfqyphaegjuo
xsfuhpgnbjmwqoaeryd

xjyizvdsbkfmhenwop
mueiojtyqnag

bjlvkzugwqspcihmxr
mlugrxwjqsvibczhkp
vikuscpzwqhmgjxrbl
pxzbksqmjlcgihurvw

payfmlnhgtzsrxke
yeknlfshmrgztx

p
p
p
p

gnmcwdtquesz
ztdscnkg
zdancosjgt
cdntzsg
zcjgbpstrnd

ugxawjehznr
gujxqzrwhnea
rewagunjzhx

krvmqtuiwsezbjcdhployaxngf
xkwsubhjlfvparcgomyenidzqt

jrglbkzcwtuayno
iwydqmzt
tdwfeyz

jnvchaxzotqd
jdaohpexnt

yifrdlua
asridu

rchuily
brliyc
icyl
nclfjxiytvs
hiycrl

fj
fj
jf
jf

hncwvidj
ncijh
qjhrin
zsxiheynj
jvihaqnc

zkraj
zkjrl
akjzr
zsvjrk

culpozwn
copkslvruwt
fhwlecupo

cuibdzoagynvrkw
dobjkzuxvrcyinag
ipsduzkvybnoacrmeqg

gjwfeblzasoirpvhcqtxu
dcfqurpiaxslgjhbyzwmeno

agi
sa
vuhaksj
zatyex

xponks
ojnkpsx

cqeiyuforpx
bxfnzrs
xhfnvdr
rfx

tqowdj
dw
diwfu
dfewgi
wd

dyvjwabnuzgx
bjdyglxvzonw
dxbwnyvagjz
zyiwdcgrbjexvn
xjngvztwbdy

ob
ob
bo
ob

cp
cp
cg

cnwlshdkyboxmpvtz
ndswvmyzjeuprbgchl
ayzkbswhlnfptcvdqm

cmfyketonuixwdgpav
xeyngtvuwfcdik
xdufiwcnekvtgy
zuvyixgbsdhwnjkelcf
xwdfvucyinekgr

vwznkidlhxuaosfr
rhakozvwgfisdunl
korahvzwdsyilnuf
fhniwvurokxszald

rlhewm
whpr
wraqfh

szpvechrdnybfjmog
vgptfyjmbdcxzshe
zhsfqepvtygnbjmdc
yzhjalgcusdpfbmveik

xapwbucizkl
qgs
yoehs
jrsge
vjgdtm

vxyuftcbpl
uycftxlbpv
vtxflpbycu
pbcxfvtlyu
xylavcftupb

yhbadxqs
hqdxsay
zphxtaqsd
asdoeqxhfnj

tlmrid
osmrjwlvge

hfprkgzljcs
slghpczfjrk
flcjzshpgrk
hzfcjsgklpr
rgphlfjkzcs

jizfvmyocxq
kogmzyjiqv
ujnqwpaszvhymro
gxomvzjcqy

ie
ie
piec
ei

tvaxzm
txamv

puqcatmbe
bcuqto
ubsiqhzgc

vkqogu
oqfhigvudm
voqubg

zlfapsjxtm
umalzjpfosxt
jplsftaxzm
tafzxlpqsbjm

zicyojr
ilzcyr
hzcrtleyvipf
zicypr
yicezur

ehigkrowmvjylnxb
tihkwoxbjelnmrvy
nkjbmxwhoelrviy
vnojlkwxrmhbeiy
lvkhxnowmjeyrib

bpzgcrtoisywvned
acdwbrytesguv

b
qb
ba
bh
b

hntmvbilk
tnmbzvl
vbfnmt
yvnomuxbtw

ib
ib
lib

jefqbsd
iyhzrvcngl

zaeqfuhynlbxipwvgotkd
kagozfcnbirmpuesywdv

wfulhibnvtapkyrq
ibleqfykavprunmxwth
raulpqfwbhvintyk
vnwrklhufytbapiq
bknqpvrytfuhlwai

wtgqajfmk
mwbfcjukqga
fmghkjwaq
gfawqmjk
fjwmkgaq

lxk
t
w
w
mf

mnzbcw
rad
ejpxykvhu
zslo

fatkelbspwjyhoqrdui
qsngucrzamvx

ldwhapn
wnma
awn
wnau
naw

fnrgykvulp
vyrlupngk
kynprgualvq

oz
oz
oz
zo

dehqmlkfyxpvujagbtcwio
huapickwemyblxodftjvgq
pagblyvnjotwekuhcfxiqm
qjythibopgxaeckmwvluf

huclkitbnrad
uhdoictnrklba
tlcbauhdinrk

pamdyrxtj
pktnmarybxjd

tr
drt
rkt
tor
rt

gjrclwxyuk
isqmdbf
eoivmdfpt

qvg
i
ui

j
l
u
lu
osd

zmdknlf
nzlfmdk
dmznfkl
dzlnkfm

ozdievpxm
mzoxdiepv
idpzexovm
ovdemzxpi

cbyrndpwk
kozyrncdp
ujcksndxphyf
dnbpkyc

e
e
e
w

tpndq
igpajc

gihvnzfacujpoelxqkr
mqfjnrodzkuvxaipel
okwanixqlpjufevr
rxipfjtasnekyulqvob

jmgeixvhaoknq
qloihgekvjxman
ajoghikvmpxnqe
ingovjkaehqmx

szualfd
zsulfaw

osajgkmyfvri
hwmisgbaqf

bvzm
izwrn
zsfd
mz

kixhabnoqpzsg
gpnxaikqobzsh
argcboiqznkxsph
oaqgicsndhkbzxp
jzxhpstoinqbkga

fkisv
fvisdrk
vkmisf
ksifqv
ifspvk

ovwqbshjirpg
iohbgfjqcrvt

efsqtnoywmkzrv
gwsotczmkdyqlrve
zmverktswfynqo

rwtuihvjqofszxaykn
riqntxydpcakjbgo

mzkndrhabvj
gywofampnlxbhsi
hbtenma
rcamubhn
bmndhkja

afsnkue
pfcvirzydqbetlk

zftwoivcr
rtvzwix
kzjwtrgi
hitwzor

harkxeinjtgpy
tprbwighzeksymcv

qecrsugzdho
uwdxocqyftnbzhl
dcrzqhuso
sdchqozu

cu
u
u
u

whlfczpqa
yfzhpqc
zpfobxkhqc
cfzhqp
fcozqhp

erbnkjqouhg
qsthnrjiwxvzkaf
yncqejdukrh
klqubphrnj

ikvyfmlpacez
mzeiplkacvfy
lyfzipvcmeqak

qo
h

neuzqjk
ixqhknj
pvbrygdacs

xf
ef
f
f

t
t

j
z
ybx
a

ewbmvucapsxkig
ksiprxbvagwfme
agdmiwexvsbpk
egisawxkpmbv

dykmbtv
dtjkmyv
mvkdtyc
ydkmtv

zw
o
i
oi
r

hjybnqczotxgeiaup
cpygejxuzhonitqab
jnauyiohtcepqbzgx
uaqtnyicgezoxjpbh
nptbcijxzuoeayqgh

owynpg
wpyn
pnwy
ywpn

fqoishlxzarmkc
dstzjmxrvfckuoi
xsmozrfcik
zmgsrcwiofxpku
igrkebsfoxcmdz

moas
xdcfmoa

xltpwzrf
erbhflxwzntp
tnsrbxlawpzf
rtzwuoxipfl

yesonitqag
etigoaqmynshc
tpneigasoqy

pnmvfgwyierqukct
tcnuigmqpeyrwvk

qza
zaqr
zqa
qza
qza

dyphutng
ghntydup
thpudywng
tpudyhgn

gofac
homgpwae
govmnaw
azsgo
apgmyuo

bsvqmnidyogzuewtk
qitsokmnewdbuy
iqskwxyonmuetdb
kbmsundoywiqte

uoqj
jvs
yjazt
j

r
o
nv
oy
r

u
ru

avofjnwdehrpyklqugzimtx
gfjlwkrahzqvneodmutpyxi
mgpjlfuxoyvzwqtdhaeknir
ryfqedjgpnikawmtxhvuloz
gidrokyntxavfwpmqelhzujc

k
mzp

jfpow
jfop
pfjo

qokte
eno
woef

qnart
utaqr

ajqivchfpem
upvqhcjmafe
pvewjfhmcqa
vmjpecaqhf
cahpfemjvq

ayw
kp

rixwjogsfhuyvebnp
vexwuhjyogrfisnbp
psyfwhrxeogjubnvi
yjvswhnrogixbufpe

eylbtgqvronjfzphw
brhqvoptnjeygwflz
rwhlpzbgjvoneyqtf
hcvlnbegyrfwtpozjq
ynwefqphlvrotbjzg

xyu
xy

bj
j
j
j

kocgiwr
ibksgowc
ijkcwog
wiegjcaok

rlt
ltr
lrt
rlt
lrt

xjoc
jcoxz
cxjo

r
r
amrtqgfw
udr
sderl

vonauts
atxsyvco
psroawlevbjdgk
smvzhqoya

ubwotjecsqhadvkf
ufqkjtesadhvcbow

pbqsuatrzk
rsquzpobk
pqsrbzkdu
zqcusrkpvb
spbkqrzu

vqwcinpb
aiejfduvpht
zowvpinrxqml

zufk
kwe
k
mk
wko

lydtzkhwajf
xrphuebsogm
nsucmhgqpx

mwhlnfotz
shvfwmanl

xfywodzc
fyoxchw
howycfx
owyhfxc
xwocyf

hri
rv
lzr
r
nrfc

mkd
yvjkoguaxip
nwkz
bcktdsmqf
sznkw

flhbygto
ftbylhoa
otbyflh
yhbtfol

rnphowmiy
hpwrmoyis
iunworypmh
diyrwhnmpo

qlhfdcg
plju
rl
nalk
lep

xwcropjbzkdegnufsqiht
rcidlowgxnsktqpbheyzfju
ctfxzgvprnhbqeodkwjisu

wgzu
fkbuxrwg
gwjyuhzn
nhjyzuwg

rwbm
wmkrs

itzekynp
dkepiunyt
vmwlbgkcipnseqr

xlkbgo
kgz
kag

i
x
htq
sot
f

kuqperwixsgvbctyjfdn
qjcdstpxvyuwifnbre
atqumpwrefdxvoijcznys
rfxdcuispnewjtkyqv

imdwuntbahxvj
daniwhemzxtjb
nhmajglidtxvwb
tbjinhxwymad
csaqnhdtfrmjobwkix

esjkcgpf
gmfszpk
pfgksj

i
i
i
i

alnj
zucmhenrtoq
bkn
nifp
nvi

mjkagdfsilctvpwhuq
wufhtjlgpaivcqdsmk
qutsghdvkmcwfaijlp
vutlpwschfkamqjdgi
isjwtmqkvfgalupcdh

ynsgxmfoelkd
yxmvgkd
vgmykxd
gmyhkdx
ygxmkdz

vldyroebks
osverdjlyb
eszyrudvblo
rvdqomlcbtygse
oredlbvsy

o
o
o
o
jvmo

jbkpwnc
dtwrpiqbsf
vlayehgxmozu

khc
crkylh
ewticaxphkd
fhncmk
khcf

ofvtnbpayduik
ufbiatxvpdoyn
oibfupdrtvyna
favdotpyixuqnb
ywatimcefbgvpsoundz

ismcgzfqbxdlv
zlwdsivqcbgmf
szcbqidfgvlm

fgjx
xjf
fxpjm
xjf

etuipyaxvmjszkf
aeyjvuwzspkim
pajvmizekyus

nmbyxzehsagcdfjvt
hzbaxdfyjevntgc
dvthajbznegxfcy

ftwqrgzohp
hexzqdjsrfwmu

eubmrcntqyxpsjozvilgadhkfw
zjfrdtwiuyoaepcnmkslqvgxbh
keiurfhgmzovydqapcxjswntbl
umkocxlwagfbzepjyirtvdsnhq
kngzxjrshovmdbtclwfiqepyua

lyomqhdu
mylowqh

chlwr
rhwcl
crlhw
wcplrfh

tamkofzcpq
tomgsjqca

bj
vfwbi
gb
gbz

njaecfkliuwm
cnvkfwualmij
iaunwmfelckj
hjifcqxumnkalw

iht
orlie
afsxupiz

nocfkzrdstjqwu
ehisrtpqnwgaymbuc

qxgt
gtoxcj
txgr

hoxsgkdiqtfz
gtfisxozhvdk
gofksdtxihz
izghftsdokx

i
x
a
i
i

knqftuisvegdjw
ymogrc
yacpbrog
gxlp

sa
k
k
w
b

speodbqvngkjrl
nfslobmegdpkjvqr
rpgbneasdkljqvo
dnvklcgjiorqpubse

y
y
y
y
y

pahzx
axpz
axzp

ya
a
ay
ta

haposzk
lromwgtifpz
xobjpszq
pujonz
ndopyqvz

wqfl
kwuqelft
lfbvwq

cqgefyksvhwpalxdbrimoznu
spvyfeucqnigwxbkzrmadl
sxlwrdbyvgzpqmnuacfejti

ou
uo
uo
ou
uo

oridzvksnfuep
vsrpfexizdoq

nxo
qgx

xybutqfszdhl
ybsdlqfxutz
zlxuydqbtsf

tl
tbla
rtel
jtgxlohyc

w
vrgofi
kcjt

xkqnrf
pxqnr
xrqn
qrxnp
qxrn

pabnotufrs
bornptsda
sptobanru
mjzonarsplybgt
uranspoqbtx

gncfptk
qyodies

tiln
lt
lt
lt

ecbxuofajgshqk
crehbqksaoifjux
klibxfuhqejocaws
csbxhojuatefkq
gjaqcexhkofbus

egjflivrcywdtu
gyiedbfovxt
qsviadhygtef
gihexypfdvnt

niotdwkarb
jbimonfkl

j
z

yfob
bymsrul
byqu

dsycgzhtioxrpwvlen
edskiwvnhozrcypglt

ygcjblprwkiehz
esfjghqbliczwpuk
ieghcjlpzkwmb

mcephzsxawni
imazphsnexw
mxezwnhysipa
wsheabqmnipxzd
pcmwhysneazxi

yovtlfcuiwxmskzjqeghr
gbcvlityzjxqmfoswkue
mqlgfwkvysjuzntieoxc

hivam
amfuvi
aemv
mxahvg

lze
le
lze
lepd

jwpm
wjmc
gcmjw
mjdaw
jwm

s
sxuq
su
ns
uqs

csqmipzdnhxkvfgt
hxdfqvptigsmcn
snhpfmtgqivcxd
scihxqwpmdntfvg

nrsmoa
rsnma
sramn
nasmr
msnar

yihjeplactzrdfb
ztfekaljidry

qwhty
gweh
zksdnuipmhal
oxtwrhcbjq
qhcvb

ybemxa
jseoixkvc
ugdxepl

tofhpsgaul
lqushgofp
lfphogsu
goplhsuf
lhsugpof

gdwzk
xqw

wmiagjvocxrzkhdtfu
xhwscvljdqryibpgofma

rgacswftbpxydum
rsmtxdypgofuacwb
rwqkufstdjxmnalgbpyc
thzabcdwprgyxmsfu
caywrpsduftgxbvm

dujpzvsb
jusdvpabr
odvjbsup
budpvjs
kpujbsvd

gfpncwmjrdlx
rwmcfnbdplgj

djw
jdw
wjd
diwvjn
jwdb

h
k
z
k
v

al
lpa
la

chinjymkwe
vnwgcemkp
kvcemyxnj
enkcm
krlceuqnfom

glewafm
ngqawfvul

fia
rup
j
rmp
ju

dgvtfbxow
wvtjgbdxf
gxtbwvd
tbndgxzqvw

kuycgeanqwh
unkhyceqgaw
aykcweqguhn
ceqhwkunyag

vcighoudqlamkrt
dnyhemguilvqtao
hxzoubfvgiqajtlwm
ovqepnmgladtihu
oatnlremuvsigqh

nd
wdn
xnea
ribpvsfynoctmqh
n

rpflnskacoq
laqojrp
liprwqao
aojlprq
oarqipl

jvk
zwmvj
jv
vj

vydxlwk
vxywd
xdyzurw

lqghripoewbjdvy
qbpcdjlwhovrey
pledvrqbwhsojanf
hjqdbptlmwzeogvr
rqjwohdipuvble

h
h

ot
t
t

fyxkdhnwalez
weakhydnlxzf

xhqawsrol
guxblwar
lvkjrydiwxmptea
wfaxnrgl

famd
xmd
md
fmd
damj

istm
smbj
mwbs
msw
ms

raszvfpwdmeich
awfmvlizcperdh
pjviuhacmzfwdryqe

t
t
t
t
t

b
b

uemjsklzft
teukljfmzs
ztfjulsemk
jkfesztmlu
jlumszeftk

toczuxmkslrhpvijeg
mopultekcxzv
xukmoedpltczva
kpolveuzxmtc
pktdovemcxzul

agvfm
jvogqfiau
vdaogf

c
gqd

sgfpy
sgfbpl

jretxvqmfghp
tureqgfvjm
ijtyqezrgvnfml
mergqtjfv

ubzsrptcgxwdoe
tebrzfpwuxgds
wbdrxtfpgsuez
gvnuhzpdebwaxtrs

gdqmje
gqtcpdmfe
rxqyiehnogmsbdv

fqwzlinbormheg
mjorlniezb

ia
ai
ia
ai

xghswfuabdlqicnyekmt
bgetcxwalnkdiysfuh
sigwankrfuhtcxedlby
nlwxfucbhgtdseikya
khawdecfngultbyixs

cwzgvbuqlsyetoiajnpm
asjpbudkhoinqgtzryfwevxc

zbpfxictqy
udpyqtxizcgef
zptxicfhqy
hpqcfbzixyt
zxhqpyftic

oirypkjhxfcwdqeagu
hwoqyupdrjigbmvxsa
kxdhpangqieuroyjw

fegnzr
rzfgne
erfnzg
znfreg

pvuafthmr
dvpmwcyg
#+end_example

#+begin_src scheme :var input=day6_input_1 :results raw :exports both :prologue "(use-modules (srfi srfi-9) (srfi srfi-1))"
  (define (uniquify-list l)
    (define (uniquify-list-tco remaining final)
      (cond
       ((null? remaining) final)
       ((member (car remaining) final)
	(uniquify-list-tco (cdr remaining) final))
       (else
	(uniquify-list-tco (cdr remaining) (cons (car remaining) final)))))
    (uniquify-list-tco l '()))

  (define (parse-split-records raw-records)
    (define (parse-split-records-tco raw-records current-item final)
      (cond
       ((null? raw-records) final)
       (else
	(if (equal? (car raw-records) "")
	    (parse-split-records-tco (cdr raw-records) '()  (cons current-item final))
	    (parse-split-records-tco (cdr raw-records) (append (string->list (car raw-records)) current-item) final)))))
    (map uniquify-list (parse-split-records-tco raw-records '() '())))

  (define (parse-input input)
    (parse-split-records (string-split input #\newline)))

  (apply + (map (lambda (x) (length x)) (parse-input input)))
#+end_src

#+RESULTS:
6504

--- Part Two ---

As you finish the last group's customs declaration, you notice that
you misread one word in the instructions:

You don't need to identify the questions to which anyone answered
"yes"; you need to identify the questions to which everyone answered
"yes"!

Using the same example as above:

#+name: day6_test_3
#+begin_example
abc

a
b
c

ab
ac

a
a
a
a

b
#+end_example

This list represents answers from five groups:

    In the first group, everyone (all 1 person) answered "yes" to 3 questions: a, b, and c.
    In the second group, there is no question to which everyone answered "yes".
    In the third group, everyone answered yes to only 1 question, a. Since some people did not answer "yes" to b or c, they don't count.
    In the fourth group, everyone answered yes to only 1 question, a.
    In the fifth group, everyone (all 1 person) answered "yes" to 1 question, b.

In this example, the sum of these counts is 3 + 0 + 1 + 1 + 1 = 6.

For each group, count the number of questions to which everyone answered "yes". What is the sum of those counts?

#+begin_src scheme :var input=day6_input_1 :results raw :exports both :prologue "(use-modules (srfi srfi-9) (srfi srfi-1))"
  (define (uniquify-list l)
    (define (uniquify-list-tco remaining final)
      (cond
       ((null? remaining) final)
       ((member (car remaining) final)
	  (uniquify-list-tco (cdr remaining) final))
       (else
	  (uniquify-list-tco (cdr remaining) (cons (car remaining) final)))))
    (uniquify-list-tco l '()))

  (define (flatten x)
    (cond ((null? x) '())
	  ((not (pair? x)) (list x))
	  (else (append (flatten (car x))
			(flatten (cdr x))))))

  (define (every-list-contains x ls)
    (cond
     ((null? ls) #t)
     ((not (member x (car ls))) #f)
     (else (every-list-contains x (cdr ls)))))

  (define (common-items l)
    (let ((unique-list (uniquify-list (flatten l))))
      (filter (lambda (x) (every-list-contains x l)) unique-list)))

  (define (parse-split-records raw-records)
    (define (parse-split-records-tco raw-records current-item final)
      (cond
       ((null? raw-records) final)
       (else
	(if (equal? (car raw-records) "")
	    (parse-split-records-tco (cdr raw-records) '()  (cons current-item final))
	    (parse-split-records-tco (cdr raw-records) (cons (string->list (car raw-records)) current-item) final)))))
    (parse-split-records-tco raw-records '() '()))

  (define (parse-input input)
    (parse-split-records (string-split input #\newline)))

  (apply + (map length (map common-items (parse-input input))))
#+end_src

#+RESULTS:
3351

* Day 7

--- Day 7: Handy Haversacks ---

You land at the regional airport in time for your next flight. In
fact, it looks like you'll even have time to grab some food: all
flights are currently delayed due to issues in luggage processing.

Due to recent aviation regulations, many rules (your puzzle input) are
being enforced about bags and their contents; bags must be color-coded
and must contain specific quantities of other color-coded
bags. Apparently, nobody responsible for these regulations considered
how long they would take to enforce!

For example, consider the following rules:

#+name: day7_test_1
#+begin_example
light red bags contain 1 bright white bag, 2 muted yellow bags.
dark orange bags contain 3 bright white bags, 4 muted yellow bags.
bright white bags contain 1 shiny gold bag.
muted yellow bags contain 2 shiny gold bags, 9 faded blue bags.
shiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.
dark olive bags contain 3 faded blue bags, 4 dotted black bags.
vibrant plum bags contain 5 faded blue bags, 6 dotted black bags.
faded blue bags contain no other bags.
dotted black bags contain no other bags.
#+end_example

These rules specify the required contents for 9 bag types. In this
example, every faded blue bag is empty, every vibrant plum bag
contains 11 bags (5 faded blue and 6 dotted black), and so on.

You have a shiny gold bag. If you wanted to carry it in at least one
other bag, how many different bag colors would be valid for the
outermost bag? (In other words: how many colors can, eventually,
contain at least one shiny gold bag?)

In the above rules, the following options would be available to you:

- A bright white bag, which can hold your shiny gold bag directly.
- A muted yellow bag, which can hold your shiny gold bag directly,
  plus some other bags.
- A dark orange bag, which can hold bright white and muted yellow
  bags, either of which could then hold your shiny gold bag.
- A light red bag, which can hold bright white and muted yellow bags,
  either of which could then hold your shiny gold bag.

So, in this example, the number of bag colors that can eventually
contain at least one shiny gold bag is 4.

How many bag colors can eventually contain at least one shiny gold
bag? (The list of rules is quite long; make sure you get all of it.)

#+name: day7_input_1
#+begin_example
light plum bags contain 1 faded blue bag.
muted salmon bags contain 4 faded lavender bags, 4 posh magenta bags.
wavy gray bags contain 2 dotted teal bags.
wavy tan bags contain 2 plaid aqua bags.
wavy purple bags contain 1 drab white bag, 4 muted yellow bags, 2 wavy aqua bags.
dull fuchsia bags contain 2 bright indigo bags, 3 plaid cyan bags, 1 light gold bag.
striped plum bags contain 1 dull coral bag, 2 drab salmon bags.
mirrored gold bags contain 2 faded tan bags, 1 dull aqua bag.
dim blue bags contain 3 dotted gray bags, 2 mirrored turquoise bags.
dark olive bags contain 2 bright cyan bags.
dotted orange bags contain 2 pale lime bags.
vibrant aqua bags contain 5 posh plum bags, 5 faded tomato bags, 5 shiny tomato bags, 1 mirrored orange bag.
striped gray bags contain 5 drab tomato bags.
light beige bags contain 1 drab aqua bag, 5 striped yellow bags, 5 bright indigo bags.
dotted brown bags contain 5 dim tan bags, 1 dim violet bag, 2 dull turquoise bags, 3 dark olive bags.
dark turquoise bags contain 1 light bronze bag.
vibrant beige bags contain 3 wavy indigo bags, 5 striped gray bags.
dotted plum bags contain 2 mirrored green bags, 2 dull crimson bags, 2 drab tan bags, 1 vibrant coral bag.
dull indigo bags contain 2 vibrant gold bags, 1 dim chartreuse bag, 3 bright brown bags, 2 dim turquoise bags.
wavy olive bags contain 2 dotted indigo bags, 4 vibrant beige bags, 1 dotted gray bag.
posh olive bags contain 4 muted magenta bags, 5 dim cyan bags, 3 drab bronze bags, 2 pale lime bags.
dotted silver bags contain 3 light brown bags.
dim purple bags contain 5 clear lavender bags, 4 drab aqua bags, 1 mirrored bronze bag.
wavy green bags contain 4 plaid white bags, 3 clear cyan bags, 1 striped gray bag, 4 clear coral bags.
dark brown bags contain 4 light brown bags, 2 light magenta bags, 3 dotted gold bags.
dark aqua bags contain 1 dull coral bag, 4 shiny coral bags, 3 vibrant crimson bags, 2 muted black bags.
shiny gray bags contain 1 dark gray bag, 4 pale purple bags.
posh brown bags contain 1 posh magenta bag, 5 wavy bronze bags, 5 posh yellow bags.
clear turquoise bags contain 1 shiny tan bag, 1 muted salmon bag.
dotted teal bags contain 5 bright tan bags, 5 vibrant crimson bags.
drab coral bags contain 1 striped brown bag, 1 light lime bag, 1 faded green bag.
dull plum bags contain 5 vibrant silver bags.
bright orange bags contain 2 dark yellow bags, 4 mirrored silver bags, 4 mirrored cyan bags, 2 striped tomato bags.
drab bronze bags contain 2 drab violet bags, 2 striped bronze bags.
dim tan bags contain 1 shiny black bag, 5 posh aqua bags.
clear indigo bags contain 4 clear tan bags, 5 vibrant silver bags, 2 striped orange bags, 2 dotted lavender bags.
muted violet bags contain 4 mirrored white bags, 1 dim blue bag, 4 faded beige bags.
posh aqua bags contain 4 striped fuchsia bags, 4 pale red bags, 5 muted coral bags.
mirrored purple bags contain 5 dim beige bags, 5 shiny brown bags, 5 posh indigo bags, 3 clear turquoise bags.
vibrant orange bags contain 1 dark turquoise bag, 1 dotted olive bag, 3 dull coral bags, 3 dark chartreuse bags.
light tomato bags contain 4 mirrored lime bags, 3 pale beige bags, 4 clear magenta bags.
drab indigo bags contain 5 mirrored blue bags, 1 dull salmon bag.
bright red bags contain 3 pale gold bags, 5 dim fuchsia bags, 5 mirrored aqua bags, 4 shiny gold bags.
clear silver bags contain 3 dotted brown bags, 3 dull olive bags.
vibrant salmon bags contain 3 shiny tan bags, 4 dotted gray bags, 3 wavy violet bags, 5 light gray bags.
vibrant tan bags contain 1 wavy purple bag, 2 bright plum bags, 3 dim turquoise bags.
wavy maroon bags contain 4 striped fuchsia bags.
mirrored red bags contain 3 vibrant coral bags, 2 dotted crimson bags, 3 striped orange bags, 2 clear olive bags.
shiny tan bags contain 5 striped fuchsia bags, 4 drab chartreuse bags, 2 drab tomato bags, 5 muted crimson bags.
dull black bags contain 2 shiny teal bags.
shiny coral bags contain 4 posh blue bags, 1 dotted coral bag.
mirrored blue bags contain 4 posh chartreuse bags.
striped fuchsia bags contain 4 muted lime bags, 2 shiny crimson bags.
shiny lavender bags contain 1 vibrant yellow bag, 1 clear turquoise bag.
dark tomato bags contain 5 clear brown bags.
shiny indigo bags contain 3 pale orange bags.
posh fuchsia bags contain 2 vibrant blue bags, 5 striped black bags, 3 dim turquoise bags, 5 pale black bags.
muted plum bags contain 5 dim turquoise bags, 1 posh fuchsia bag.
posh tomato bags contain 1 faded yellow bag, 1 vibrant blue bag, 1 clear coral bag.
dotted gold bags contain 3 dull tomato bags, 5 striped tomato bags, 5 wavy purple bags.
striped lime bags contain 3 faded salmon bags, 1 plaid gold bag, 4 wavy aqua bags, 3 bright beige bags.
posh violet bags contain 5 dim purple bags.
mirrored chartreuse bags contain 1 dark bronze bag.
posh purple bags contain 4 posh fuchsia bags, 4 posh magenta bags, 2 mirrored cyan bags.
bright indigo bags contain 5 drab white bags, 1 posh tan bag.
dark indigo bags contain 1 clear tan bag, 2 wavy teal bags.
dark beige bags contain 1 bright olive bag, 5 posh purple bags.
clear crimson bags contain 4 muted black bags, 4 posh purple bags, 1 striped black bag, 5 bright black bags.
shiny green bags contain 2 dark orange bags, 2 bright silver bags, 3 dim orange bags.
plaid crimson bags contain 5 muted cyan bags, 3 striped orange bags, 4 dull lavender bags, 5 wavy magenta bags.
clear tomato bags contain 2 posh fuchsia bags, 2 dark orange bags, 3 pale black bags, 2 dull aqua bags.
vibrant gold bags contain 1 faded brown bag.
pale salmon bags contain 4 dull coral bags, 2 posh fuchsia bags, 2 plaid tan bags.
light cyan bags contain 4 plaid magenta bags.
dim teal bags contain 1 posh bronze bag, 4 mirrored green bags, 5 dull black bags, 1 clear gray bag.
plaid lime bags contain 3 wavy orange bags, 5 pale blue bags, 1 plaid gold bag.
light tan bags contain 4 faded crimson bags, 1 plaid fuchsia bag, 1 bright aqua bag, 2 dotted blue bags.
shiny brown bags contain 3 mirrored bronze bags, 3 light coral bags.
bright plum bags contain 3 posh gray bags, 3 faded brown bags, 3 plaid magenta bags.
bright beige bags contain 5 dotted coral bags.
drab tomato bags contain no other bags.
pale beige bags contain 3 drab bronze bags.
dotted aqua bags contain 5 plaid yellow bags.
striped yellow bags contain 2 dull tan bags, 2 posh violet bags, 2 pale violet bags, 2 clear lavender bags.
vibrant maroon bags contain 4 muted green bags, 1 muted cyan bag, 1 mirrored tomato bag.
plaid green bags contain 2 dotted black bags.
dotted indigo bags contain 5 mirrored tan bags, 3 dim yellow bags.
vibrant coral bags contain 3 drab blue bags, 3 striped gray bags, 1 clear plum bag, 2 faded tomato bags.
pale maroon bags contain 5 shiny black bags.
posh black bags contain 2 posh green bags, 1 posh tomato bag, 4 dim gold bags, 5 wavy olive bags.
wavy aqua bags contain 5 faded green bags, 4 pale lavender bags, 5 plaid aqua bags, 3 mirrored brown bags.
clear green bags contain 3 pale lime bags.
dim beige bags contain 4 vibrant beige bags, 3 dull aqua bags, 1 mirrored orange bag, 2 dim yellow bags.
dim chartreuse bags contain 5 dark maroon bags, 1 dark crimson bag, 5 wavy teal bags, 3 clear aqua bags.
bright turquoise bags contain 1 dim turquoise bag, 3 dull turquoise bags.
bright magenta bags contain 2 striped fuchsia bags, 5 dim brown bags.
light fuchsia bags contain 2 drab tomato bags, 5 dim chartreuse bags.
vibrant magenta bags contain 2 pale red bags, 4 dim turquoise bags, 4 drab blue bags, 3 drab aqua bags.
muted gold bags contain 3 pale gray bags, 4 dim salmon bags.
vibrant violet bags contain 4 mirrored gray bags, 2 wavy aqua bags, 3 drab tan bags.
wavy cyan bags contain 3 pale fuchsia bags, 1 mirrored tan bag, 2 dull blue bags, 2 dull cyan bags.
light silver bags contain 2 faded brown bags, 3 mirrored white bags, 5 plaid maroon bags, 3 plaid plum bags.
mirrored lavender bags contain 1 shiny tan bag, 2 dim turquoise bags, 1 shiny coral bag, 1 striped brown bag.
dull teal bags contain 2 striped purple bags, 5 dark plum bags, 5 bright purple bags, 4 light bronze bags.
light indigo bags contain no other bags.
shiny silver bags contain 2 dim maroon bags.
wavy brown bags contain 1 posh lavender bag, 2 dark bronze bags, 4 mirrored chartreuse bags.
dull lavender bags contain 3 dull cyan bags, 1 drab lavender bag.
posh gold bags contain 1 mirrored cyan bag, 5 bright salmon bags, 4 dotted orange bags.
dim yellow bags contain no other bags.
vibrant crimson bags contain 1 drab lavender bag, 4 wavy purple bags, 5 clear red bags, 4 posh gray bags.
plaid gold bags contain 4 striped fuchsia bags, 5 drab tomato bags, 3 light indigo bags, 3 mirrored bronze bags.
vibrant indigo bags contain 4 faded yellow bags, 4 clear salmon bags, 4 plaid lavender bags.
dark crimson bags contain 1 posh fuchsia bag, 2 drab silver bags, 5 shiny coral bags.
vibrant white bags contain 3 dim orange bags, 2 shiny tomato bags, 5 dark teal bags, 5 faded aqua bags.
pale chartreuse bags contain 2 dim cyan bags, 2 faded red bags, 3 light yellow bags, 4 wavy yellow bags.
drab chartreuse bags contain 2 pale black bags.
drab gray bags contain 4 posh indigo bags, 3 muted maroon bags, 5 striped teal bags, 5 striped lime bags.
dim tomato bags contain 4 plaid tan bags, 4 vibrant turquoise bags, 2 mirrored salmon bags, 2 dull magenta bags.
plaid purple bags contain 3 posh blue bags.
dark lavender bags contain 4 muted green bags, 2 dim crimson bags, 5 dull gray bags.
bright maroon bags contain 5 drab tomato bags, 4 vibrant red bags, 5 light lime bags.
striped chartreuse bags contain 5 striped black bags.
dull salmon bags contain 3 drab lime bags, 5 wavy crimson bags.
clear beige bags contain 4 dim orange bags.
light orange bags contain 1 plaid gold bag, 5 shiny coral bags.
faded red bags contain 3 bright tan bags.
wavy violet bags contain 5 plaid chartreuse bags.
dim violet bags contain 1 pale lavender bag.
posh indigo bags contain 4 muted plum bags, 1 plaid cyan bag, 2 mirrored turquoise bags, 2 light teal bags.
muted aqua bags contain 5 striped black bags, 4 wavy purple bags, 4 mirrored silver bags, 4 wavy bronze bags.
faded gold bags contain 5 wavy indigo bags, 2 dark olive bags, 5 mirrored orange bags.
bright teal bags contain 5 dotted coral bags, 4 clear lavender bags, 1 pale black bag, 5 light indigo bags.
dotted green bags contain 3 dotted brown bags, 1 mirrored chartreuse bag, 5 vibrant gray bags, 2 mirrored tan bags.
drab yellow bags contain 1 wavy maroon bag, 4 posh chartreuse bags.
dull maroon bags contain 1 dotted blue bag, 4 pale chartreuse bags, 5 drab teal bags.
clear black bags contain 3 pale magenta bags, 5 vibrant silver bags.
dull orange bags contain 4 vibrant lime bags, 4 shiny gold bags, 4 light coral bags, 4 striped brown bags.
clear violet bags contain 3 muted plum bags, 3 dim teal bags.
muted bronze bags contain 5 mirrored salmon bags, 5 dim tan bags.
plaid lavender bags contain 3 posh violet bags.
muted brown bags contain 5 striped brown bags, 5 mirrored green bags, 2 light orange bags.
clear chartreuse bags contain 2 muted lime bags.
shiny chartreuse bags contain 1 wavy coral bag, 4 light salmon bags, 5 plaid cyan bags.
clear tan bags contain 4 dotted black bags.
dull tan bags contain 1 posh maroon bag, 1 dotted coral bag.
wavy black bags contain 1 dull chartreuse bag, 3 drab plum bags.
faded fuchsia bags contain 4 mirrored violet bags, 2 dim lavender bags.
pale brown bags contain 1 dotted olive bag, 2 bright fuchsia bags.
faded green bags contain 5 dim turquoise bags, 2 mirrored blue bags, 1 mirrored tan bag, 5 mirrored silver bags.
clear brown bags contain 3 vibrant lime bags, 2 muted maroon bags, 3 dull coral bags, 3 faded plum bags.
vibrant silver bags contain 2 clear coral bags, 1 muted yellow bag, 2 drab cyan bags, 4 mirrored orange bags.
bright crimson bags contain 1 posh olive bag, 3 faded beige bags, 1 dim black bag, 1 shiny silver bag.
dim gold bags contain 2 posh beige bags, 1 dull coral bag, 1 plaid aqua bag.
drab white bags contain 1 dim yellow bag, 2 posh gray bags.
dim indigo bags contain 3 shiny brown bags, 1 drab red bag, 2 pale aqua bags, 4 plaid lime bags.
dull blue bags contain 2 pale fuchsia bags, 1 faded tomato bag, 4 plaid aqua bags.
mirrored bronze bags contain 5 bright tan bags, 2 plaid magenta bags.
vibrant turquoise bags contain 5 shiny brown bags, 2 vibrant beige bags, 2 dotted magenta bags, 3 dull lavender bags.
dull turquoise bags contain 4 clear lavender bags, 3 striped gray bags, 3 posh gray bags.
dim lavender bags contain 3 plaid lime bags, 4 mirrored red bags, 3 pale orange bags.
clear lime bags contain 3 drab fuchsia bags, 3 plaid gray bags, 1 light beige bag, 3 muted violet bags.
wavy fuchsia bags contain 3 bright gray bags, 1 faded purple bag, 4 posh purple bags, 4 light tan bags.
plaid beige bags contain 2 drab bronze bags.
faded beige bags contain 1 posh bronze bag, 3 mirrored bronze bags, 3 shiny black bags.
posh blue bags contain 3 shiny gold bags, 2 shiny black bags.
dull silver bags contain 2 wavy crimson bags, 5 faded black bags.
pale fuchsia bags contain 5 dull black bags.
bright green bags contain 3 bright black bags, 4 drab tan bags.
mirrored violet bags contain 4 pale teal bags, 3 dotted crimson bags, 2 posh violet bags, 2 shiny silver bags.
pale violet bags contain 4 posh magenta bags, 5 wavy crimson bags, 3 drab aqua bags.
faded white bags contain 1 drab purple bag, 5 shiny chartreuse bags.
faded tomato bags contain 2 bright teal bags.
faded violet bags contain 2 plaid salmon bags.
drab turquoise bags contain 1 mirrored green bag.
mirrored silver bags contain 5 dull aqua bags, 1 dark orange bag, 3 pale red bags, 4 dim yellow bags.
dotted violet bags contain 5 plaid chartreuse bags, 1 mirrored tan bag, 5 dotted lavender bags.
plaid olive bags contain 1 mirrored cyan bag, 2 muted orange bags, 2 posh maroon bags.
pale silver bags contain 3 dull lavender bags, 4 mirrored olive bags, 4 muted coral bags.
mirrored coral bags contain 1 pale fuchsia bag, 1 dull turquoise bag.
drab crimson bags contain 1 wavy purple bag, 1 wavy violet bag, 2 vibrant gold bags, 3 bright salmon bags.
dull chartreuse bags contain 4 faded salmon bags, 3 light lime bags, 1 mirrored brown bag.
bright purple bags contain 2 light cyan bags.
dull brown bags contain 3 bright white bags.
muted magenta bags contain 3 shiny gold bags, 4 muted plum bags, 5 pale lime bags, 2 light cyan bags.
pale aqua bags contain 4 drab blue bags, 1 bright lavender bag.
drab purple bags contain 2 mirrored bronze bags, 1 drab violet bag.
dotted chartreuse bags contain 2 pale chartreuse bags, 5 clear beige bags.
shiny purple bags contain 5 clear black bags.
muted blue bags contain 4 dotted indigo bags.
striped blue bags contain 4 vibrant beige bags, 3 plaid lime bags.
dull gold bags contain 4 drab violet bags, 3 pale aqua bags, 3 mirrored cyan bags.
plaid tan bags contain 5 shiny gold bags.
mirrored brown bags contain 3 pale lime bags, 2 dull coral bags.
mirrored white bags contain 5 muted black bags, 1 dark yellow bag, 4 drab blue bags, 4 clear bronze bags.
pale yellow bags contain 4 clear tomato bags, 1 drab salmon bag, 1 plaid crimson bag.
faded silver bags contain 5 dotted indigo bags, 3 posh chartreuse bags.
mirrored orange bags contain 4 drab tomato bags.
dotted lime bags contain 3 faded tomato bags, 4 vibrant beige bags, 5 posh chartreuse bags.
muted coral bags contain 1 muted plum bag.
bright tomato bags contain 1 posh red bag, 4 light red bags, 1 dotted fuchsia bag, 4 dull turquoise bags.
plaid orange bags contain 4 shiny salmon bags, 4 muted tomato bags, 4 dull gold bags, 3 clear green bags.
plaid teal bags contain 1 shiny black bag, 4 wavy purple bags, 3 dark plum bags, 4 pale silver bags.
muted tan bags contain 5 faded salmon bags, 4 dotted magenta bags, 3 clear gold bags, 3 dotted tan bags.
faded olive bags contain 1 clear lavender bag.
muted olive bags contain 4 drab coral bags, 5 light yellow bags.
posh salmon bags contain 3 dim turquoise bags, 1 vibrant purple bag, 2 bright maroon bags, 2 drab lime bags.
dim crimson bags contain 5 dull white bags, 1 dim yellow bag, 5 dark green bags.
light brown bags contain 1 drab tan bag.
light bronze bags contain 2 vibrant silver bags, 1 muted plum bag, 3 drab blue bags, 5 dull yellow bags.
faded lime bags contain 3 bright teal bags, 2 light aqua bags.
clear gold bags contain 1 dim cyan bag, 3 striped brown bags.
clear coral bags contain 4 mirrored bronze bags, 5 posh magenta bags, 5 striped purple bags.
striped cyan bags contain 1 wavy violet bag, 4 drab yellow bags.
bright coral bags contain 4 dotted lime bags, 3 striped chartreuse bags.
faded bronze bags contain 1 vibrant beige bag, 4 dotted green bags, 4 dotted gold bags, 1 shiny turquoise bag.
dark red bags contain 3 pale salmon bags, 5 bright green bags.
posh cyan bags contain 3 plaid fuchsia bags.
clear teal bags contain 5 plaid aqua bags, 1 posh tomato bag, 2 shiny olive bags, 4 shiny turquoise bags.
dotted turquoise bags contain 5 dim blue bags, 5 bright teal bags, 2 dull coral bags.
wavy silver bags contain 5 posh aqua bags.
shiny cyan bags contain 5 clear crimson bags, 4 vibrant purple bags, 3 mirrored turquoise bags, 5 plaid aqua bags.
mirrored beige bags contain 2 dim green bags, 1 dull teal bag.
plaid turquoise bags contain 1 dark yellow bag.
dim white bags contain 5 posh indigo bags, 4 bright cyan bags, 5 dim orange bags, 2 dim teal bags.
faded tan bags contain 4 dim salmon bags, 2 plaid blue bags.
faded yellow bags contain 1 posh gray bag, 4 dim beige bags.
dull tomato bags contain 2 pale indigo bags, 2 striped bronze bags, 1 wavy maroon bag, 5 posh tomato bags.
posh lavender bags contain 4 faded blue bags, 4 striped teal bags, 5 plaid chartreuse bags.
mirrored magenta bags contain 2 dim magenta bags.
drab violet bags contain 3 shiny black bags, 1 mirrored silver bag.
pale coral bags contain 5 dim gold bags.
clear red bags contain 4 muted maroon bags.
dark yellow bags contain 5 striped black bags, 2 clear plum bags.
dull coral bags contain 5 bright teal bags, 2 shiny black bags, 3 drab tomato bags, 4 dotted coral bags.
dotted bronze bags contain 3 bright black bags, 3 dull orange bags, 3 mirrored indigo bags.
dull green bags contain 4 clear teal bags, 5 muted silver bags, 2 pale blue bags, 2 light plum bags.
wavy gold bags contain 5 pale red bags, 3 dim salmon bags, 2 striped orange bags, 4 bright beige bags.
plaid aqua bags contain 4 pale black bags, 2 clear tomato bags, 1 faded beige bag.
wavy tomato bags contain 5 posh turquoise bags.
wavy white bags contain 2 dim maroon bags.
dull beige bags contain 3 wavy brown bags.
light olive bags contain 5 dim white bags, 4 dark fuchsia bags, 4 dull magenta bags, 5 light lavender bags.
mirrored lime bags contain 5 vibrant coral bags.
light black bags contain 2 dark salmon bags.
bright gold bags contain 3 dark orange bags, 5 shiny black bags, 2 bright silver bags, 3 pale black bags.
dull lime bags contain 2 posh bronze bags, 2 mirrored blue bags.
posh chartreuse bags contain 3 light lime bags, 3 bright lavender bags, 3 posh fuchsia bags.
clear orange bags contain 1 dull maroon bag, 1 faded yellow bag.
striped red bags contain 2 dotted cyan bags, 3 dull silver bags, 2 light blue bags.
pale turquoise bags contain 4 wavy silver bags, 3 dotted teal bags, 4 light green bags.
wavy crimson bags contain 1 light cyan bag, 2 posh beige bags.
light turquoise bags contain 1 dull orange bag.
dotted coral bags contain 1 drab tomato bag, 5 dim yellow bags, 5 bright lavender bags.
dotted tan bags contain 4 light coral bags, 4 dim cyan bags, 3 vibrant beige bags.
drab blue bags contain 1 dim turquoise bag.
pale white bags contain 3 clear olive bags, 2 clear coral bags, 5 dark olive bags, 2 wavy white bags.
muted orange bags contain 2 dim gold bags.
faded black bags contain 2 wavy aqua bags, 5 vibrant bronze bags, 5 mirrored blue bags.
posh lime bags contain 2 dim salmon bags, 2 pale orange bags, 4 wavy maroon bags, 1 dim coral bag.
wavy indigo bags contain 2 muted lime bags.
faded orange bags contain 1 light green bag, 5 plaid turquoise bags, 4 posh turquoise bags.
light blue bags contain 1 plaid fuchsia bag, 4 mirrored salmon bags, 1 muted chartreuse bag.
light violet bags contain 3 dotted black bags, 3 posh black bags.
posh bronze bags contain 3 striped purple bags, 5 posh purple bags, 2 plaid magenta bags, 3 dull aqua bags.
shiny fuchsia bags contain 5 dim olive bags, 2 plaid silver bags, 1 dark cyan bag, 1 pale red bag.
vibrant gray bags contain 2 drab blue bags.
faded salmon bags contain 1 drab aqua bag, 1 mirrored blue bag.
dark white bags contain 4 dim orange bags, 4 plaid magenta bags, 2 clear tomato bags.
muted indigo bags contain 4 dotted violet bags.
dull white bags contain 2 shiny cyan bags, 3 shiny orange bags.
faded plum bags contain 3 dim cyan bags, 2 dark yellow bags.
muted silver bags contain 2 drab red bags, 3 dark gray bags, 4 striped teal bags.
wavy lavender bags contain 1 drab turquoise bag.
striped beige bags contain 2 dim turquoise bags, 1 muted plum bag, 4 posh violet bags.
dark gray bags contain 3 posh fuchsia bags, 2 striped brown bags.
plaid yellow bags contain 3 vibrant red bags, 5 dark gold bags.
dark violet bags contain 2 mirrored orange bags, 2 muted crimson bags, 1 pale white bag, 1 pale chartreuse bag.
shiny maroon bags contain 4 dim tan bags.
dotted fuchsia bags contain 4 bright lime bags, 3 dotted lime bags, 2 bright maroon bags, 5 drab yellow bags.
light yellow bags contain 1 dotted coral bag, 1 bright lavender bag, 3 pale violet bags.
shiny blue bags contain 1 shiny crimson bag.
dotted black bags contain 4 muted aqua bags, 2 light lime bags, 3 posh turquoise bags, 1 light silver bag.
pale purple bags contain 2 striped violet bags, 5 clear lavender bags.
pale red bags contain 4 bright tan bags, 4 pale black bags, 4 mirrored cyan bags, 3 dotted coral bags.
dim gray bags contain 3 dull cyan bags, 3 dotted purple bags, 2 shiny brown bags, 2 plaid tan bags.
posh tan bags contain 2 light coral bags, 2 bright black bags, 2 dim yellow bags.
vibrant black bags contain 4 pale crimson bags, 2 mirrored brown bags, 4 plaid violet bags, 3 muted yellow bags.
dark salmon bags contain 2 mirrored brown bags, 5 clear salmon bags, 5 drab yellow bags.
dim green bags contain 5 pale indigo bags, 5 pale coral bags, 5 plaid lavender bags.
plaid fuchsia bags contain 2 muted maroon bags, 3 muted crimson bags, 3 dim black bags.
faded maroon bags contain 3 mirrored purple bags, 5 faded tan bags.
dark maroon bags contain 5 dull lavender bags, 4 clear plum bags, 3 shiny silver bags.
pale magenta bags contain 1 light indigo bag.
dim salmon bags contain 2 vibrant red bags, 1 light lime bag.
dotted lavender bags contain 4 drab tan bags, 1 mirrored olive bag, 5 plaid gold bags.
faded aqua bags contain 5 dim purple bags.
plaid brown bags contain 2 shiny green bags, 3 faded tomato bags, 4 wavy orange bags.
striped purple bags contain 4 posh gray bags, 1 light lime bag.
muted yellow bags contain 2 pale indigo bags, 3 vibrant blue bags, 2 muted coral bags.
dark gold bags contain 4 striped teal bags, 4 bright maroon bags.
mirrored indigo bags contain 5 dim white bags, 4 wavy white bags, 4 bright purple bags.
mirrored tomato bags contain 1 drab turquoise bag, 1 drab cyan bag, 1 dotted teal bag.
striped white bags contain 1 shiny silver bag, 1 faded gold bag.
pale plum bags contain 2 shiny brown bags, 1 posh fuchsia bag.
bright gray bags contain 4 posh chartreuse bags, 4 dull turquoise bags.
shiny olive bags contain 3 plaid yellow bags, 4 dotted fuchsia bags, 2 bright beige bags.
faded crimson bags contain 4 faded blue bags, 5 faded gray bags, 1 dotted lime bag, 1 wavy magenta bag.
striped coral bags contain 1 dull fuchsia bag, 4 striped fuchsia bags, 1 dull gold bag, 5 posh lime bags.
posh orange bags contain 4 dim yellow bags, 2 posh tan bags.
striped tan bags contain 5 vibrant coral bags, 5 posh violet bags, 4 plaid aqua bags, 4 dark crimson bags.
shiny yellow bags contain 3 dull silver bags, 3 dim purple bags, 3 vibrant violet bags.
shiny black bags contain 3 mirrored cyan bags, 1 clear gray bag, 2 light cyan bags.
posh silver bags contain 1 posh blue bag.
mirrored cyan bags contain 5 pale lime bags, 1 drab aqua bag, 4 muted lime bags.
dark plum bags contain 3 muted green bags.
clear white bags contain 5 wavy crimson bags, 3 plaid salmon bags, 4 plaid silver bags, 3 faded beige bags.
plaid plum bags contain 2 dim salmon bags, 1 faded black bag, 2 plaid purple bags, 5 dull lavender bags.
dim turquoise bags contain 2 pale indigo bags, 4 striped black bags.
vibrant green bags contain 5 clear purple bags, 4 pale brown bags, 2 drab olive bags, 3 dotted brown bags.
dark lime bags contain 4 dull blue bags, 4 wavy chartreuse bags, 1 bright olive bag.
shiny white bags contain 2 muted magenta bags, 4 clear gray bags, 1 mirrored bronze bag, 3 mirrored green bags.
dark orange bags contain 5 clear gray bags, 1 posh maroon bag, 1 vibrant blue bag.
light crimson bags contain 2 drab tomato bags, 5 bright tan bags, 5 striped gray bags.
clear yellow bags contain 2 muted salmon bags, 1 mirrored magenta bag.
plaid salmon bags contain 3 drab tan bags, 4 dark yellow bags, 5 dim yellow bags.
faded chartreuse bags contain 1 dull black bag, 5 pale lime bags, 2 wavy olive bags, 4 shiny green bags.
plaid bronze bags contain 2 vibrant maroon bags.
striped crimson bags contain 1 shiny beige bag.
clear magenta bags contain 3 muted olive bags, 4 bright olive bags, 5 pale purple bags, 3 dark aqua bags.
muted lime bags contain no other bags.
dull yellow bags contain 3 dark black bags, 1 wavy orange bag, 5 posh fuchsia bags.
shiny teal bags contain 5 posh bronze bags, 1 striped tomato bag, 2 dim gold bags, 2 posh chartreuse bags.
plaid violet bags contain 5 mirrored bronze bags, 5 shiny crimson bags, 5 vibrant blue bags.
posh coral bags contain 5 bright silver bags, 2 bright lime bags.
dim magenta bags contain 5 drab white bags, 1 faded blue bag, 1 drab red bag, 5 light brown bags.
muted turquoise bags contain 4 shiny beige bags.
posh maroon bags contain 2 light lime bags.
posh crimson bags contain 5 wavy lavender bags, 3 pale orange bags, 3 plaid magenta bags.
striped black bags contain no other bags.
drab teal bags contain 5 light olive bags, 3 clear teal bags, 2 posh magenta bags.
plaid white bags contain 1 shiny tan bag, 3 dotted lavender bags, 5 wavy olive bags, 4 clear black bags.
pale olive bags contain 4 vibrant beige bags.
shiny tomato bags contain 5 pale lavender bags, 3 muted fuchsia bags, 5 drab white bags.
dim coral bags contain 3 dotted fuchsia bags.
faded blue bags contain 4 dim maroon bags, 3 vibrant blue bags, 4 clear gray bags.
plaid maroon bags contain 3 dotted indigo bags, 1 mirrored olive bag.
mirrored teal bags contain 3 dim olive bags, 5 posh white bags, 4 faded plum bags.
mirrored olive bags contain 5 light indigo bags, 5 muted lime bags, 4 wavy indigo bags.
drab aqua bags contain 4 drab tan bags, 2 striped gray bags, 1 pale lime bag.
posh plum bags contain 5 dim magenta bags, 5 clear gray bags.
dull olive bags contain 1 clear black bag, 3 dim brown bags.
bright chartreuse bags contain 5 vibrant violet bags, 4 posh green bags, 5 pale coral bags.
dull bronze bags contain 3 dark green bags.
plaid silver bags contain 4 striped lavender bags, 3 mirrored orange bags, 5 muted coral bags.
mirrored fuchsia bags contain 1 vibrant crimson bag.
drab beige bags contain 4 light indigo bags, 1 shiny green bag.
plaid chartreuse bags contain 2 dark bronze bags, 5 drab chartreuse bags.
drab magenta bags contain 3 plaid chartreuse bags.
pale black bags contain no other bags.
dark fuchsia bags contain 1 dim yellow bag, 5 dim salmon bags.
clear gray bags contain 3 bright tan bags.
dark purple bags contain 4 plaid purple bags, 1 dark gold bag.
bright tan bags contain no other bags.
clear plum bags contain 1 posh blue bag, 4 bright teal bags.
striped brown bags contain 5 clear tomato bags, 1 dotted indigo bag, 2 clear coral bags.
drab silver bags contain 3 clear lavender bags, 3 shiny gold bags, 5 dotted coral bags, 5 wavy indigo bags.
dotted purple bags contain 2 mirrored bronze bags, 4 light red bags, 4 dim teal bags, 3 muted indigo bags.
dotted red bags contain 2 shiny brown bags, 2 dull tan bags, 3 wavy coral bags, 2 pale lime bags.
posh magenta bags contain 3 clear gray bags.
dim olive bags contain 4 muted cyan bags, 2 mirrored brown bags, 3 dim orange bags.
dotted tomato bags contain 2 bright fuchsia bags, 5 dull silver bags, 2 dim lime bags.
striped magenta bags contain 3 mirrored red bags, 1 muted magenta bag, 3 wavy white bags.
posh red bags contain 3 bright orange bags, 4 clear olive bags, 5 faded violet bags, 3 plaid coral bags.
muted crimson bags contain 5 light indigo bags.
drab fuchsia bags contain 3 shiny coral bags.
light lime bags contain 4 bright lavender bags, 2 light crimson bags, 5 vibrant blue bags.
dotted yellow bags contain 4 pale fuchsia bags.
bright lavender bags contain no other bags.
dull aqua bags contain 4 posh gray bags, 2 light indigo bags, 5 light crimson bags.
shiny aqua bags contain 2 pale orange bags, 3 drab gray bags.
drab red bags contain 5 striped tomato bags.
bright salmon bags contain 3 light indigo bags.
faded turquoise bags contain 5 clear beige bags.
shiny gold bags contain 1 mirrored bronze bag, 4 dull aqua bags, 2 dotted indigo bags, 1 light indigo bag.
clear fuchsia bags contain 5 dotted indigo bags.
dark bronze bags contain 4 shiny black bags.
dotted olive bags contain 4 bright cyan bags.
vibrant purple bags contain 3 striped gray bags.
dull purple bags contain 5 wavy orange bags, 5 faded black bags, 2 plaid violet bags, 2 vibrant lavender bags.
shiny lime bags contain 1 light purple bag.
pale cyan bags contain 3 vibrant red bags, 5 dark white bags, 4 mirrored red bags, 3 vibrant brown bags.
dark cyan bags contain 5 clear olive bags, 4 plaid purple bags, 5 striped teal bags, 3 bright magenta bags.
dim lime bags contain 3 muted tomato bags.
drab olive bags contain 1 dotted blue bag, 2 dull lavender bags.
faded gray bags contain 5 mirrored tan bags, 1 muted orange bag, 3 posh purple bags.
muted gray bags contain 5 pale white bags.
mirrored yellow bags contain 5 bright black bags, 1 plaid turquoise bag.
wavy lime bags contain 5 plaid bronze bags, 4 mirrored green bags, 5 pale lavender bags, 3 wavy tan bags.
wavy orange bags contain 3 dotted lime bags, 1 dull crimson bag, 2 mirrored turquoise bags.
dotted cyan bags contain 4 dotted lime bags, 2 striped teal bags.
light green bags contain 3 muted indigo bags, 3 pale fuchsia bags.
drab cyan bags contain 3 posh bronze bags, 5 drab white bags, 3 drab tomato bags, 1 light indigo bag.
faded brown bags contain 3 bright tan bags, 4 striped gray bags, 5 drab cyan bags, 3 mirrored tan bags.
light purple bags contain 3 pale aqua bags, 1 dim olive bag, 2 dim tan bags.
vibrant lavender bags contain 2 faded lavender bags.
vibrant brown bags contain 4 striped black bags, 1 faded yellow bag.
dull crimson bags contain 2 mirrored white bags, 2 clear tomato bags.
drab green bags contain 2 drab beige bags, 1 vibrant crimson bag, 2 vibrant purple bags, 1 faded black bag.
shiny bronze bags contain 3 dark fuchsia bags, 3 dark bronze bags, 2 striped brown bags, 4 shiny brown bags.
plaid blue bags contain 5 faded green bags.
light white bags contain 3 wavy brown bags, 3 dark violet bags, 2 muted coral bags, 5 plaid chartreuse bags.
bright violet bags contain 1 faded violet bag, 2 muted maroon bags, 3 posh gray bags, 2 dark salmon bags.
striped turquoise bags contain 5 bright salmon bags, 1 bright lavender bag, 1 wavy maroon bag, 4 light turquoise bags.
clear cyan bags contain 5 posh magenta bags, 4 striped plum bags, 5 light turquoise bags.
bright silver bags contain 4 dotted indigo bags, 1 drab tomato bag, 1 muted salmon bag.
mirrored plum bags contain 5 bright white bags, 1 vibrant brown bag.
mirrored aqua bags contain 5 drab bronze bags, 3 mirrored salmon bags, 3 posh lavender bags, 3 bright crimson bags.
muted lavender bags contain 4 posh bronze bags, 3 striped lime bags, 5 striped chartreuse bags, 5 plaid plum bags.
dim orange bags contain 3 muted magenta bags, 2 pale magenta bags.
faded teal bags contain 5 wavy coral bags, 3 posh blue bags.
dotted magenta bags contain 5 faded purple bags, 5 posh fuchsia bags, 1 drab white bag.
drab brown bags contain 4 light red bags, 4 muted chartreuse bags.
striped indigo bags contain 3 light maroon bags, 2 pale gray bags, 2 faded magenta bags, 1 vibrant teal bag.
dull gray bags contain 3 clear olive bags.
clear blue bags contain 2 clear tomato bags, 4 faded purple bags, 1 wavy lavender bag.
posh green bags contain 5 clear aqua bags, 4 bright orange bags, 2 bright cyan bags, 4 dim fuchsia bags.
muted fuchsia bags contain 5 dull lavender bags, 2 drab violet bags, 4 dotted magenta bags, 2 wavy yellow bags.
posh turquoise bags contain 2 dotted lavender bags.
bright blue bags contain 1 pale lavender bag, 5 dark yellow bags, 5 bright beige bags.
bright bronze bags contain 2 bright gold bags, 4 shiny turquoise bags.
muted chartreuse bags contain 1 vibrant tomato bag, 1 bright lavender bag, 1 vibrant blue bag, 1 dim black bag.
dim bronze bags contain 2 light lavender bags, 2 striped plum bags, 3 dotted gold bags.
pale crimson bags contain 5 dotted lavender bags, 2 clear crimson bags, 4 bright lime bags.
clear bronze bags contain 2 drab tomato bags, 3 vibrant red bags.
pale lime bags contain 4 pale indigo bags, 3 striped black bags.
light red bags contain 4 bright salmon bags, 1 bright gold bag.
pale orange bags contain 5 drab blue bags.
shiny crimson bags contain 3 light crimson bags.
dotted beige bags contain 5 bright turquoise bags, 3 dotted turquoise bags, 4 muted green bags, 4 light black bags.
light gray bags contain 4 faded green bags, 5 wavy gold bags, 4 dim olive bags.
light coral bags contain 2 muted plum bags.
light magenta bags contain 1 dim maroon bag, 5 clear chartreuse bags, 1 vibrant lavender bag, 2 plaid beige bags.
striped violet bags contain 1 vibrant beige bag.
bright aqua bags contain 1 dark crimson bag, 4 dark bronze bags.
dotted maroon bags contain 5 light silver bags, 5 dark maroon bags.
drab plum bags contain 1 dotted yellow bag, 1 bright green bag, 4 vibrant brown bags.
posh gray bags contain 2 light crimson bags.
dotted blue bags contain 2 posh tan bags.
vibrant olive bags contain 3 faded yellow bags.
posh white bags contain 1 faded tomato bag, 2 dim violet bags.
drab lavender bags contain 3 light brown bags.
dark blue bags contain 5 vibrant lavender bags, 4 posh plum bags, 5 pale violet bags, 1 pale beige bag.
muted beige bags contain 1 striped lime bag, 2 clear purple bags, 1 vibrant brown bag, 2 mirrored bronze bags.
dim maroon bags contain 5 dim beige bags, 1 dull coral bag.
wavy teal bags contain 1 drab yellow bag, 2 muted magenta bags, 4 wavy gold bags, 2 vibrant cyan bags.
shiny salmon bags contain 2 light red bags, 3 bright fuchsia bags.
light salmon bags contain 3 vibrant purple bags, 3 drab blue bags, 3 faded black bags, 2 bright white bags.
shiny magenta bags contain 5 light fuchsia bags, 3 drab indigo bags, 3 mirrored yellow bags, 4 dim purple bags.
plaid black bags contain 3 light bronze bags, 4 mirrored tan bags, 4 muted lime bags, 5 mirrored white bags.
wavy red bags contain 4 clear lavender bags, 4 dull chartreuse bags.
posh beige bags contain 4 wavy maroon bags, 4 clear plum bags.
wavy bronze bags contain 1 wavy purple bag.
dotted gray bags contain 3 striped black bags, 1 wavy maroon bag, 5 pale indigo bags.
bright white bags contain 3 pale indigo bags, 2 drab white bags.
mirrored black bags contain 2 striped plum bags, 5 wavy brown bags, 1 wavy crimson bag.
light gold bags contain 3 posh plum bags, 1 vibrant crimson bag.
bright fuchsia bags contain 3 light cyan bags, 1 drab turquoise bag, 3 dim orange bags, 1 dull chartreuse bag.
striped gold bags contain 3 muted violet bags, 2 clear teal bags, 2 posh brown bags, 3 dim tan bags.
striped orange bags contain 1 pale fuchsia bag.
drab gold bags contain 4 shiny teal bags, 5 muted aqua bags, 3 wavy lavender bags.
light chartreuse bags contain 2 bright gold bags, 5 striped turquoise bags, 5 light gray bags, 3 wavy aqua bags.
vibrant chartreuse bags contain 2 dotted yellow bags, 5 bright fuchsia bags, 1 striped chartreuse bag, 1 dim salmon bag.
pale indigo bags contain no other bags.
drab lime bags contain 2 mirrored turquoise bags.
vibrant plum bags contain 3 dotted turquoise bags.
pale teal bags contain 5 striped lime bags, 3 faded salmon bags, 4 bright indigo bags.
dark tan bags contain 2 drab lavender bags.
faded lavender bags contain 1 vibrant blue bag.
drab orange bags contain 1 muted turquoise bag, 3 pale indigo bags.
dim fuchsia bags contain 1 drab silver bag.
vibrant lime bags contain 1 posh purple bag, 3 light coral bags, 3 light lime bags, 4 light indigo bags.
clear salmon bags contain 2 light indigo bags, 2 striped plum bags.
dark black bags contain 2 striped fuchsia bags, 4 wavy white bags, 2 wavy maroon bags.
muted white bags contain 2 pale indigo bags, 5 light plum bags.
pale gray bags contain 4 light yellow bags, 2 striped olive bags, 4 clear black bags.
dull cyan bags contain 2 vibrant red bags, 3 drab tan bags.
striped silver bags contain 3 mirrored green bags, 2 wavy purple bags, 3 posh aqua bags.
wavy magenta bags contain 4 dim purple bags, 2 dark aqua bags.
drab black bags contain 2 light plum bags.
drab maroon bags contain 2 vibrant lime bags, 4 dull purple bags, 2 mirrored salmon bags, 3 vibrant aqua bags.
shiny orange bags contain 5 wavy coral bags, 1 pale violet bag.
plaid coral bags contain 2 mirrored cyan bags.
plaid cyan bags contain 4 pale indigo bags.
dotted crimson bags contain 2 dim teal bags.
mirrored tan bags contain 1 pale red bag, 1 light cyan bag, 1 clear gray bag, 3 striped gray bags.
light maroon bags contain 2 vibrant bronze bags.
bright brown bags contain 2 wavy yellow bags.
muted tomato bags contain 5 clear gold bags, 5 plaid coral bags.
dotted white bags contain 4 dotted purple bags, 1 posh chartreuse bag, 5 dark gold bags, 1 vibrant gold bag.
muted red bags contain 4 clear crimson bags, 4 posh magenta bags, 3 plaid cyan bags, 5 pale crimson bags.
wavy yellow bags contain 3 muted magenta bags.
muted purple bags contain 1 dull chartreuse bag.
striped olive bags contain 5 faded tomato bags.
light aqua bags contain 1 vibrant tomato bag, 4 posh lavender bags.
vibrant blue bags contain 2 muted lime bags.
pale lavender bags contain 4 shiny coral bags, 5 muted crimson bags.
mirrored turquoise bags contain 5 posh blue bags.
pale gold bags contain 3 plaid chartreuse bags, 2 pale red bags, 5 clear aqua bags.
wavy salmon bags contain 4 dotted yellow bags.
shiny beige bags contain 1 bright magenta bag, 1 muted fuchsia bag.
striped bronze bags contain 5 bright turquoise bags, 5 dull black bags.
dark magenta bags contain 5 drab lime bags.
dark coral bags contain 3 plaid bronze bags, 3 posh green bags, 4 muted violet bags, 3 plaid purple bags.
mirrored green bags contain 4 posh purple bags, 2 dotted blue bags, 1 dull turquoise bag, 2 plaid purple bags.
striped tomato bags contain 5 drab white bags.
muted teal bags contain 5 shiny lime bags.
vibrant bronze bags contain 3 shiny gold bags, 5 striped fuchsia bags, 5 mirrored orange bags, 2 bright green bags.
clear olive bags contain 3 posh violet bags, 1 bright beige bag.
clear maroon bags contain 1 vibrant lime bag, 2 muted coral bags.
faded coral bags contain 4 dim beige bags, 4 bright magenta bags, 3 vibrant magenta bags, 1 bright silver bag.
pale bronze bags contain 1 dark teal bag, 4 dotted aqua bags.
striped aqua bags contain 3 faded aqua bags.
vibrant cyan bags contain 2 mirrored blue bags, 4 striped black bags, 4 clear black bags.
wavy coral bags contain 4 drab salmon bags, 3 light orange bags, 3 posh aqua bags.
mirrored salmon bags contain 4 pale lime bags.
plaid magenta bags contain 1 dim yellow bag, 1 light indigo bag.
dim brown bags contain 3 vibrant purple bags, 2 striped gray bags, 4 mirrored salmon bags, 2 muted maroon bags.
dull magenta bags contain 1 mirrored green bag, 4 dull coral bags.
dark silver bags contain 5 dotted gray bags.
pale tomato bags contain 1 vibrant blue bag, 4 shiny green bags.
plaid tomato bags contain 4 mirrored chartreuse bags, 1 plaid white bag, 4 wavy magenta bags.
faded magenta bags contain 4 dull yellow bags, 3 wavy silver bags.
mirrored crimson bags contain 3 muted tan bags, 5 posh beige bags.
muted green bags contain 4 dim black bags.
wavy chartreuse bags contain 1 plaid tan bag, 5 bright tan bags, 2 posh beige bags.
wavy plum bags contain 2 clear purple bags, 5 dotted violet bags.
plaid indigo bags contain 1 dull brown bag, 3 clear chartreuse bags, 5 posh gold bags, 1 pale teal bag.
posh teal bags contain 3 light magenta bags, 3 muted white bags, 3 dim blue bags.
striped salmon bags contain 4 shiny coral bags.
pale green bags contain 4 dark gold bags, 4 striped teal bags.
vibrant yellow bags contain 4 faded salmon bags, 1 drab beige bag, 1 muted black bag, 5 clear lavender bags.
dim cyan bags contain 2 mirrored turquoise bags.
wavy turquoise bags contain 4 dark turquoise bags, 3 bright tan bags, 4 muted tomato bags.
bright cyan bags contain 5 wavy indigo bags.
plaid red bags contain 1 mirrored coral bag, 2 dull plum bags, 4 vibrant coral bags, 4 vibrant lavender bags.
dark chartreuse bags contain 5 mirrored salmon bags, 5 posh salmon bags, 2 faded turquoise bags.
plaid gray bags contain 1 dim gold bag, 4 faded olive bags.
vibrant tomato bags contain 5 wavy maroon bags, 1 pale red bag.
faded purple bags contain 1 faded tomato bag, 1 striped black bag, 5 vibrant purple bags.
dotted salmon bags contain 3 bright gold bags, 5 dull gray bags, 3 dim blue bags.
drab salmon bags contain 3 mirrored green bags, 1 mirrored tan bag.
pale blue bags contain 4 dotted fuchsia bags.
faded cyan bags contain 2 striped orange bags, 1 vibrant gold bag, 2 bright orange bags, 1 muted gray bag.
dull red bags contain 2 drab teal bags, 2 light bronze bags.
wavy beige bags contain 1 plaid tan bag, 5 dotted indigo bags, 2 dotted gold bags.
dim red bags contain 5 pale magenta bags.
dark green bags contain 5 muted cyan bags, 3 faded brown bags.
muted cyan bags contain 3 drab tomato bags, 4 drab white bags.
mirrored maroon bags contain 5 wavy tomato bags, 2 vibrant white bags.
faded indigo bags contain 5 dim olive bags, 5 drab tan bags, 3 light orange bags.
light lavender bags contain 1 faded salmon bag, 5 pale lime bags, 4 dark maroon bags.
dim aqua bags contain 4 faded gold bags, 1 striped fuchsia bag.
shiny violet bags contain 1 pale yellow bag, 4 mirrored aqua bags.
wavy blue bags contain 1 dim fuchsia bag, 3 clear gold bags, 1 faded aqua bag, 1 light red bag.
striped teal bags contain 3 mirrored silver bags.
striped green bags contain 1 muted teal bag.
vibrant teal bags contain 3 muted indigo bags.
shiny turquoise bags contain 3 dull chartreuse bags.
bright lime bags contain 5 bright magenta bags, 1 dull orange bag.
shiny red bags contain 4 drab tan bags, 4 posh turquoise bags.
dull violet bags contain 4 shiny silver bags, 3 striped crimson bags, 1 mirrored plum bag.
dim black bags contain 1 posh magenta bag, 3 mirrored turquoise bags, 2 faded tomato bags, 4 dim turquoise bags.
muted maroon bags contain 2 mirrored tan bags, 3 clear coral bags.
posh yellow bags contain 1 bright tan bag, 5 mirrored bronze bags.
clear purple bags contain 5 shiny black bags.
dim silver bags contain 4 clear brown bags.
bright black bags contain 4 posh fuchsia bags.
shiny plum bags contain 1 mirrored cyan bag.
striped lavender bags contain 3 pale lavender bags, 4 muted cyan bags.
drab tan bags contain no other bags.
bright olive bags contain 3 muted coral bags.
dim plum bags contain 3 drab tan bags, 5 pale indigo bags.
light teal bags contain 2 dotted blue bags, 5 muted salmon bags, 2 bright purple bags.
clear lavender bags contain 2 muted lime bags, 5 plaid magenta bags, 3 pale lime bags, 1 drab aqua bag.
muted black bags contain 3 light crimson bags, 4 mirrored blue bags.
clear aqua bags contain 5 plaid gold bags.
dark teal bags contain 1 bright purple bag, 1 dotted coral bag, 5 plaid aqua bags, 5 posh maroon bags.
mirrored gray bags contain 3 dim turquoise bags, 4 bright black bags, 1 drab lavender bag.
vibrant fuchsia bags contain 1 vibrant magenta bag.
bright yellow bags contain 1 mirrored cyan bag, 1 clear olive bag.
vibrant red bags contain 1 dotted indigo bag, 2 faded beige bags, 1 drab tomato bag.
striped maroon bags contain 3 plaid aqua bags, 2 dim maroon bags, 4 plaid chartreuse bags.
pale tan bags contain 5 posh gray bags, 3 wavy violet bags.
#+end_example

#+begin_src scheme :var input=day7_test_1 :results raw :exports both :prologue "(use-modules (srfi srfi-9) (srfi srfi-1))"
  (define *no-bags* "no other bags")

  (define (parse-input input)
    (map (lambda (x) (string-split x "contain")) (string-split input #\newline)))

  (parse-input input)
#+end_src

#+RESULTS:
