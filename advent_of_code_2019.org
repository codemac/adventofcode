#+title: Advent of Code 2019

* Day 1: The Tyranny of the Rocket Equation
Santa has become stranded at the edge of the Solar System while
delivering presents to other planets! To accurately calculate his
position in space, safely align his warp drive, and return to Earth in
time to save Christmas, he needs you to bring him measurements from
fifty stars.

Collect stars by solving puzzles. Two puzzles will be made available
on each day in the Advent calendar; the second puzzle is unlocked when
you complete the first. Each puzzle grants one star. Good luck!

The Elves quickly load you into a spacecraft and prepare to launch.

At the first Go / No Go poll, every Elf is Go until the Fuel
Counter-Upper. They haven't determined the amount of fuel required
yet.

Fuel required to launch a given module is based on its
mass. Specifically, to find the fuel required for a module, take its
mass, divide by three, round down, and subtract 2.

For example:

    For a mass of 12, divide by 3 and round down to get 4, then subtract 2 to get 2.
    For a mass of 14, dividing by 3 and rounding down still yields 4, so the fuel required is also 2.
    For a mass of 1969, the fuel required is 654.
    For a mass of 100756, the fuel required is 33583.

The Fuel Counter-Upper needs to know the total fuel requirement. To
find it, individually calculate the fuel needed for the mass of each
module (your puzzle input), then add together all the fuel values.

What is the sum of the fuel requirements for all of the modules on
your spacecraft?

** Input

#+name: day1_input
#+begin_example
73365
84016
98122
114871
111575
130294
59341
102810
92986
81275
83155
74530
67858
54107
62099
82535
122085
139127
131939
130125
96285
70572
129325
132261
69597
93574
70089
130711
109220
50155
98250
51054
100028
86985
106638
116993
95130
115571
56707
105988
123358
95470
71094
126310
66153
128788
51605
70044
70180
141905
96494
89332
96688
131936
83782
108218
60650
91289
126406
112939
76303
115774
135382
116478
77898
98611
89155
114878
110085
114482
61585
103480
99198
81082
113501
100167
100085
128747
79731
93289
121516
116380
56592
146611
132595
60483
105828
118923
141972
126450
77214
97406
77745
101982
120919
71085
118300
92440
115184
142447
#+end_example

#+begin_src lisp :var input=day1_input :results raw
  (defun mass-calc (in)
    (max (-  (floor (/ in 3)) 2) 0))

  (defun parse-input (in)
    (mapcar #'parse-integer (remove "" (uiop:split-string in :separator '(#\newline)) :test #'equal)))

  (reduce #'+ (mapcar #'mass-calc (parse-input input)))
#+end_src

#+RESULTS:
3291760

** Day 1: Part Two

During the second Go / No Go poll, the Elf in charge of the Rocket
Equation Double-Checker stops the launch sequence. Apparently, you
forgot to include additional fuel for the fuel you just added.

Fuel itself requires fuel just like a module - take its mass, divide
by three, round down, and subtract 2. However, that fuel also requires
fuel, and that fuel requires fuel, and so on. Any mass that would
require negative fuel should instead be treated as if it requires zero
fuel; the remaining mass, if any, is instead handled by wishing really
hard, which has no mass and is outside the scope of this calculation.

So, for each module mass, calculate its fuel and add it to the
total. Then, treat the fuel amount you just calculated as the input
mass and repeat the process, continuing until a fuel requirement is
zero or negative. For example:

- A module of mass 14 requires 2 fuel. This fuel requires no further
  fuel (2 divided by 3 and rounded down is 0, which would call for a
  negative fuel), so the total fuel required is still just 2.
- At first, a module of mass 1969 requires 654 fuel. Then, this fuel
  requires 216 more fuel (654 / 3 - 2). 216 then requires 70 more
  fuel, which requires 21 fuel, which requires 5 fuel, which requires
  no further fuel. So, the total fuel required for a module of mass
  1969 is 654 + 216 + 70 + 21 + 5 = 966.
- The fuel required by a module of mass 100756 and its fuel is:
  33583 + 11192 + 3728 + 1240 + 411 + 135 + 43 + 12 + 2 = 50346.

What is the sum of the fuel requirements for all of the modules on
your spacecraft when also taking into account the mass of the added
fuel? (Calculate the fuel requirements for each module separately,
then add them all up at the end.)

#+begin_src lisp :var input=day1_input :results raw
  (defun mass-calc (in)
    (max (-  (floor (/ in 3)) 2) 0))

  (defun parse-input (in)
    (mapcar #'parse-integer (remove "" (uiop:split-string in :separator '(#\newline)) :test #'equal)))

  (defun fuel-remainder (in)
    (let ((mass (mass-calc in)))
      (if (<= mass 0)
	  0
	  (+ mass (fuel-remainder mass)))))

  (defun mass-fuel-total (in)
    (let* ((mass-fuel (mass-calc in))
	   (remains (fuel-remainder mass-fuel)))
      (+ mass-fuel remains)))

  (reduce #'+ (mapcar #'mass-fuel-total (parse-input input)))
#+end_src

#+RESULTS:
4934767

* Day 2: 1202 Program Alarm

On the way to your gravity assist around the Moon, your ship computer
beeps angrily about a "1202 program alarm". On the radio, an Elf is
already explaining how to handle the situation: "Don't worry, that's
perfectly norma--" The ship computer bursts into flames.

You notify the Elves that the computer's magic smoke seems to have
escaped. "That computer ran Intcode programs like the gravity assist
program it was working on; surely there are enough spare parts up
there to build a new Intcode computer!"

An Intcode program is a list of integers separated by commas (like
1,0,0,3,99). To run one, start by looking at the first integer (called
position 0). Here, you will find an opcode - either 1, 2, or 99. The
opcode indicates what to do; for example, 99 means that the program is
finished and should immediately halt. Encountering an unknown opcode
means something went wrong.

Opcode 1 adds together numbers read from two positions and stores the
result in a third position. The three integers immediately after the
opcode tell you these three positions - the first two indicate the
positions from which you should read the input values, and the third
indicates the position at which the output should be stored.

For example, if your Intcode computer encounters 1,10,20,30, it should
read the values at positions 10 and 20, add those values, and then
overwrite the value at position 30 with their sum.

Opcode 2 works exactly like opcode 1, except it multiplies the two
inputs instead of adding them. Again, the three integers after the
opcode indicate where the inputs and outputs are, not their values.

Once you're done processing an opcode, move to the next one by
stepping forward 4 positions.

For example, suppose you have the following program:

1,9,10,3,2,3,11,0,99,30,40,50

For the purposes of illustration, here is the same program split into
multiple lines:

1,9,10,3,
2,3,11,0,
99,
30,40,50

The first four integers, 1,9,10,3, are at positions 0, 1, 2,
and 3. Together, they represent the first opcode (1, addition), the
positions of the two inputs (9 and 10), and the position of the output
(3). To handle this opcode, you first need to get the values at the
input positions: position 9 contains 30, and position 10
contains 40. Add these numbers together to get 70. Then, store this
value at the output position; here, the output position (3) is at
position 3, so it overwrites itself. Afterward, the program looks like
this:

1,9,10,70,
2,3,11,0,
99,
30,40,50

Step forward 4 positions to reach the next opcode, 2. This opcode
works just like the previous, but it multiplies instead of adding. The
inputs are at positions 3 and 11; these positions contain 70 and 50
respectively. Multiplying these produces 3500; this is stored at
position 0:

3500,9,10,70,
2,3,11,0,
99,
30,40,50

Stepping forward 4 more positions arrives at opcode 99, halting the
program.

Here are the initial and final states of a few more small programs:

    1,0,0,0,99 becomes 2,0,0,0,99 (1 + 1 = 2).
    2,3,0,3,99 becomes 2,3,0,6,99 (3 * 2 = 6).
    2,4,4,5,99,0 becomes 2,4,4,5,99,9801 (99 * 99 = 9801).
    1,1,1,4,99,5,6,0,99 becomes 30,1,1,4,2,5,6,0,99.

Once you have a working computer, the first step is to restore the
gravity assist program (your puzzle input) to the "1202 program alarm"
state it had just before the last computer caught fire. To do this,
before running the program, replace position 1 with the value 12 and
replace position 2 with the value 2. What value is left at position 0
after the program halts?

#+name: day2_input
#+begin_example
1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,13,1,19,1,10,19,23,1,23,9,27,1,5,27,31,2,31,13,35,1,35,5,39,1,39,5,43,2,13,43,47,2,47,10,51,1,51,6,55,2,55,9,59,1,59,5,63,1,63,13,67,2,67,6,71,1,71,5,75,1,75,5,79,1,79,9,83,1,10,83,87,1,87,10,91,1,91,9,95,1,10,95,99,1,10,99,103,2,103,10,107,1,107,9,111,2,6,111,115,1,5,115,119,2,119,13,123,1,6,123,127,2,9,127,131,1,131,5,135,1,135,13,139,1,139,10,143,1,2,143,147,1,147,10,0,99,2,0,14,0
#+end_example

#+name: day2_input_alarmed
#+begin_example
1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,13,1,19,1,10,19,23,1,23,9,27,1,5,27,31,2,31,13,35,1,35,5,39,1,39,5,43,2,13,43,47,2,47,10,51,1,51,6,55,2,55,9,59,1,59,5,63,1,63,13,67,2,67,6,71,1,71,5,75,1,75,5,79,1,79,9,83,1,10,83,87,1,87,10,91,1,91,9,95,1,10,95,99,1,10,99,103,2,103,10,107,1,107,9,111,2,6,111,115,1,5,115,119,2,119,13,123,1,6,123,127,2,9,127,131,1,131,5,135,1,135,13,139,1,139,10,143,1,2,143,147,1,147,10,0,99,2,0,14,0
#+end_example

#+begin_src lisp :var input=day2_input_alarmed :results raw
  (defun make-operation (opf)
    (lambda (idx arr)
      (let ((in1 (aref arr (+ 1 idx)))
	    (in2 (aref arr (+ 2 idx))))
	(setf (aref arr (aref arr (+ 3 idx))) (funcall opf (aref arr in1) (aref arr in2))))))

  (setf (symbol-function 'op-1) (make-operation #'+))
  (setf (symbol-function 'op-2) (make-operation #'*))

  (defun parse-input ()
    (let ((input-list (mapcar #'parse-integer (remove ""  (uiop:split-string input :separator '(#\comma)) :test #'equal))))
      (make-array (length input-list) :initial-contents input-list)))

  (defun computer (arr idx)
    (let ((next-cmd (aref arr idx)))
      (cond
	((= next-cmd 99) arr)
	((= next-cmd 1) (op-1 idx arr) (computer arr (+ idx 4)))
	((= next-cmd 2) (op-2 idx arr) (computer arr (+ idx 4)))
	(t (error "No op found!")))))

  (let ((arr (parse-input)))
    (aref (computer arr 0) 0))
#+end_src

#+RESULTS:
4930687


** --- Part Two ---

"Good, the new computer seems to be working correctly! Keep it nearby
during this mission - you'll probably use it again. Real Intcode
computers support many more features than your new one, but we'll let
you know what they are as you need them."

"However, your current priority should be to complete your gravity
assist around the Moon. For this mission to succeed, we should settle
on some terminology for the parts you've already built."

Intcode programs are given as a list of integers; these values are
used as the initial state for the computer's memory. When you run an
Intcode program, make sure to start by initializing memory to the
program's values. A position in memory is called an address (for
example, the first value in memory is at "address 0").

Opcodes (like 1, 2, or 99) mark the beginning of an instruction. The
values used immediately after an opcode, if any, are called the
instruction's parameters. For example, in the instruction 1,2,3,4, 1
is the opcode; 2, 3, and 4 are the parameters. The instruction 99
contains only an opcode and has no parameters.

The address of the current instruction is called the instruction
pointer; it starts at 0. After an instruction finishes, the
instruction pointer increases by the number of values in the
instruction; until you add more instructions to the computer, this is
always 4 (1 opcode + 3 parameters) for the add and multiply
instructions. (The halt instruction would increase the instruction
pointer by 1, but it halts the program instead.)

"With terminology out of the way, we're ready to proceed. To complete
the gravity assist, you need to determine what pair of inputs produces
the output 19690720."

The inputs should still be provided to the program by replacing the
values at addresses 1 and 2, just like before. In this program, the
value placed in address 1 is called the noun, and the value placed in
address 2 is called the verb. Each of the two input values will be
between 0 and 99, inclusive.

Once the program has halted, its output is available at address 0,
also just like before. Each time you try a pair of inputs, make sure
you first reset the computer's memory to the values in the program
(your puzzle input) - in other words, don't reuse memory from a
previous attempt.

Find the input noun and verb that cause the program to produce the
output 19690720. What is 100 * noun + verb? (For example, if noun=12
and verb=2, the answer would be 1202.)

Although it hasn't changed, you can still get your puzzle input.

#+begin_src lisp :var input=day2_input_alarmed :results raw
  (defun make-operation (opf)
    (lambda (idx arr)
      (let ((in1 (aref arr (+ 1 idx)))
	    (in2 (aref arr (+ 2 idx))))
	(setf (aref arr (aref arr (+ 3 idx))) (funcall opf (aref arr in1) (aref arr in2))))))

  (setf (symbol-function 'op-1) (make-operation #'+))
  (setf (symbol-function 'op-2) (make-operation #'*))

  (defun parse-input ()
    (let ((input-list (mapcar #'parse-integer (remove ""  (uiop:split-string input :separator '(#\comma)) :test #'equal))))
      (make-array (length input-list) :initial-contents input-list)))

  (defun make-memory (noun verb)
    (let ((new-input (parse-input)))
      (setf (aref new-input 1) noun)
      (setf (aref new-input 2) verb)
      new-input))

  (defun computer (arr idx)
    (let ((next-cmd (aref arr idx)))
      (cond
	((= next-cmd 99) arr)
	((= next-cmd 1) (op-1 idx arr) (computer arr (+ idx 4)))
	((= next-cmd 2) (op-2 idx arr) (computer arr (+ idx 4)))
	(t (error "No op found!")))))

  (let ((result 0))
    (loop named outer for i from 0 to 98
	  do (loop for j from 0 to 98
		   do (if (= (aref (computer (make-memory i j) 0) 0) 19690720)
			  (return-from outer (list i j))))))
#+end_src

#+RESULTS:
(53 35)

* Day 3: Crossed Wires

The gravity assist was successful, and you're well on your way to the
Venus refuelling station. During the rush back on Earth, the fuel
management system wasn't completely installed, so that's next on the
priority list.

Opening the front panel reveals a jumble of wires. Specifically, two
wires are connected to a central port and extend outward on a
grid. You trace the path each wire takes as it leaves the central
port, one wire per line of text (your puzzle input).

The wires twist and turn, but the two wires occasionally cross
paths. To fix the circuit, you need to find the intersection point
closest to the central port. Because the wires are on a grid, use the
Manhattan distance for this measurement. While the wires do
technically cross right at the central port where they both start,
this point does not count, nor does a wire count as crossing with
itself.

For example, if the first wire's path is R8,U5,L5,D3, then starting
from the central port (o), it goes right 8, up 5, left 5, and finally
down 3:

...........
...........
...........
....+----+.
....|....|.
....|....|.
....|....|.
.........|.
.o-------+.
...........

Then, if the second wire's path is U7,R6,D4,L4, it goes up 7, right 6,
down 4, and left 4:

...........
.+-----+...
.|.....|...
.|..+--X-+.
.|..|..|.|.
.|.-X--+.|.
.|..|....|.
.|.......|.
.o-------+.
...........

These wires cross at two locations (marked X), but the lower-left one
is closer to the central port: its distance is 3 + 3 = 6.

Here are a few more examples:

    R75,D30,R83,U83,L12,D49,R71,U7,L72
    U62,R66,U55,R34,D71,R55,D58,R83 = distance 159
    R98,U47,R26,D63,R33,U87,L62,D20,R33,U53,R51
    U98,R91,D20,R16,D67,R40,U7,R15,U6,R7 = distance 135

What is the Manhattan distance from the central port to the closest
intersection?

#+name: day3_input_ex1
#+begin_example
R75,D30,R83,U83,L12,D49,R71,U7,L72
U62,R66,U55,R34,D71,R55,D58,R83
#+end_example

#+name: day3_input_ex2
#+begin_example
R98,U47,R26,D63,R33,U87,L62,D20,R33,U53,R51
U98,R91,D20,R16,D67,R40,U7,R15,U6,R7
#+end_example

#+name: day3_input
#+begin_example
R1005,U563,R417,U509,L237,U555,R397,U414,L490,U336,L697,D682,L180,U951,L189,D547,R697,U583,L172,D859,L370,D114,L519,U829,R389,U608,R66,D634,L320,D49,L931,U137,L349,D689,L351,D829,R819,D138,L118,D849,R230,U858,L509,D311,R815,U217,R359,U840,R77,U230,R361,U322,R300,D646,R348,U815,R793,D752,R967,U128,R948,D499,R359,U572,L566,U815,R630,D290,L829,D736,R358,U778,R891,U941,R544,U889,L920,U913,L447,D604,R538,U818,L215,D437,R447,U576,R452,D794,R864,U269,L325,D35,L268,D639,L101,U777,L776,U958,R105,U517,R667,D423,R603,U469,L125,D919,R879,U994,R665,D377,R456,D570,L685,U291,R261,U846,R840,U418,L974,D270,L312,D426,R621,D334,L855,D378,R694,U845,R481,U895,L362,D840,L712,U57,R276,D643,R566,U348,R361,D144,L287,D864,L556,U610,L927,U322,R271,D90,L741,U446,R181,D527,R56,U805,L907,D406,L286,U873,L79,D280,L153,D377,R253,D61,R475,D804,R788,U393,L660,U314,R489,D491,L234,D712,L253,U651,L777,D726,R146,U47,R630,U517,R226,U624,L834,D153,L513,U799,R287,D868,R982,U390,L296,D373,R9,U994,R105,D673,L657,D868,R738,D277,R374,U828,R860,U247,R484,U986,L723,D847,L578,U487,L51,D865,L328,D199,R812,D726,R355,D463,R761,U69,R508,D753,L81,D50,L345,D66,L764,D466,L975,U619,R59,D788,L737,D360,R14,D253,L512,D417,R828,D188,L394,U212,R658,U369,R920,U927,L339,U552,R856,D458,R407,U41,L930,D460,R809,U467,L410,D800,L135,D596,R678,D4,L771,D637,L876,U192,L406,D136,R666,U730,R711,D291,L586,U845,R606,U2,L228,D759,R244,U946,R948,U160,R397,U134,R188,U850,R623,D315,L219,D450,R489,U374,R299,D474,L767,D679,L160,D403,L708
L1003,D878,R937,D979,R921,U572,R4,D959,L884,U394,R221,U206,R806,U912,R345,D290,R65,D996,L411,D157,R590,D557,L32,D360,L691,D861,L156,D603,R733,U444,L433,U144,L238,U213,R827,U949,R384,D409,L727,U923,L98,U781,L201,D200,R749,U288,L486,U158,L494,D522,R636,D330,L507,U691,R918,D706,R163,U609,R559,U674,R784,D87,R670,U401,L85,U981,R848,D579,L882,U777,R671,D385,R913,D899,R92,D780,L795,U821,R956,U446,L109,D955,L570,D874,R499,U845,R769,U88,L529,U657,R553,D357,L83,D324,L273,U689,L715,U933,R161,U561,L603,U349,L445,U781,R299,U26,L212,U429,R763,U116,R961,D258,L518,D668,L767,U587,L654,D24,R318,U35,L9,D199,L161,U419,R6,D707,R944,U499,R207,D349,L727,D637,R735,D137,R18,D214,L531,D327,L916,U440,R859,U483,R952,D631,L96,D320,L192,D985,R330,D196,L345,D575,L535,D868,R376,D126,R903,D619,L126,D624,L990,D67,L927,U685,L200,D759,L157,D816,L585,U910,R587,D598,L398,U706,R847,U682,L919,D291,L932,D54,L314,U430,L60,U206,L997,D487,L874,U957,L753,U999,R156,U102,L826,U923,L204,U293,L244,U787,L273,D687,R134,D167,L287,D459,R875,D32,R635,D400,L179,D19,L576,U60,L182,D409,R114,U329,R207,U525,L295,U305,L861,U280,R531,D49,L890,U521,L283,U37,R344,D867,L474,U893,R140,U289,L67,U490,R121,D34,L696,U902,R288,U249,R107,D750,R389,U125,L406,U950,R932,U795,R205,U583,L665,U214,R806,D409,R832,D39,R207,D977,L873,U645,L762,U847,L725,U397,R414,D558,L669,D736,R897,U464,R207,U359,R257,U304,L932,U240,L582,U409,L493,D481,R48,D537,R893,U48,R707,U630,L70,D289,L769,U98,L679,U504,L337,U117,L343,D574,R595,U168,R498
#+end_example

#+begin_src lisp :var input=day3_input :results raw
  (defun create-single-step (stepstr x y)
    (let ((direction (char stepstr 0))
	  (distance (parse-integer (subseq stepstr 1))))
      (loop for i from 1 to distance
	    collect (case direction
		      (#\L (cons (- x i) y))
		      (#\R (cons (+ x i) y))
		      (#\U (cons x (+ y i)))
		      (#\D (cons x (- y i)))))))

  (defun parse-input ()
    (let ((lines (remove "" (uiop:split-string input :separator '(#\newline)) :test #'equal)))
      (mapcar (lambda (x) (remove ""  (uiop:split-string x :separator '(#\comma)) :test #'equal))
	      lines)))

  (defun create-steps (stepl)
    (let ((x 0)
	  (y 0))
      (remove-duplicates
       (apply
	#'append
	(mapcar
	 (lambda (stepstr)
	   (let* ((steps (create-single-step stepstr x y))
		  (lastpos (car (last steps))))
	     (format t "list: lastpos ~S x ~S y ~S~%" lastpos x y)
	     (setf x (car lastpos))
	     (setf y (cdr lastpos))
	     steps))
	 stepl))
       :test #'equal)))

  (defun make-step-hash ()
    (make-hash-table :test #'equal))

  (defun set-or-increment-hash (position table)
    (setf (gethash position table)
	  (if (gethash position table)
	      (1+ (gethash position table))
	      1)))

  (defun set-step-counts (table wires)
    (dolist (wire wires)
      (dolist (position wire)
	(set-or-increment-hash position table))))

  (defun find-intersections (table)
    (loop for value being the hash-values of table
	    using (hash-key key)
	  when (> value 1)
	    collect key))

  (defun manhattan-distance (x y)
    (+ (abs x) (abs y)))

  (defun smallest-distance (intersections)
    (apply #'min
	   (mapcar
	    (lambda (x) (manhattan-distance (car x) (cdr x)))
	    intersections)))

  (let ((table (make-step-hash))
	(wires (mapcar #'create-steps (parse-input))))
    (set-step-counts table wires)
    (let ((intersections (find-intersections table)))
      (smallest-distance intersections)))

#+end_src

#+RESULTS:
1211

** Day 3, part 2

--- Part Two ---

It turns out that this circuit is very timing-sensitive; you actually
need to minimize the signal delay.

To do this, calculate the number of steps each wire takes to reach
each intersection; choose the intersection where the sum of both
wires' steps is lowest. If a wire visits a position on the grid
multiple times, use the steps value from the first time it visits that
position when calculating the total value of a specific intersection.

The number of steps a wire takes is the total number of grid squares
the wire has entered to get to that location, including the
intersection being considered. Again consider the example from above:

...........
.+-----+...
.|.....|...
.|..+--X-+.
.|..|..|.|.
.|.-X--+.|.
.|..|....|.
.|.......|.
.o-------+.
...........

In the above example, the intersection closest to the central port is
reached after 8+5+5+2 = 20 steps by the first wire and 7+6+4+3 = 20
steps by the second wire for a total of 20+20 = 40 steps.

However, the top-right intersection is better: the first wire takes
only 8+5+2 = 15 and the second wire takes only 7+6+2 = 15, a total of
15+15 = 30 steps.

Here are the best steps for the extra examples from above:

    R75,D30,R83,U83,L12,D49,R71,U7,L72
    U62,R66,U55,R34,D71,R55,D58,R83 = 610 steps
    R98,U47,R26,D63,R33,U87,L62,D20,R33,U53,R51
    U98,R91,D20,R16,D67,R40,U7,R15,U6,R7 = 410 steps

What is the fewest combined steps the wires must take to reach an
intersection?

Although it hasn't changed, you can still get your puzzle input.
#+begin_src lisp :var input=day3_input :results raw
  (defun create-single-step (stepstr x y steps)
      (let ((direction (char stepstr 0))
	    (distance (parse-integer (subseq stepstr 1))))
	(loop for i from 1 to distance
	      collect (case direction
			(#\L (list (- x i) y (+ i steps)))
			(#\R (list (+ x i) y (+ i steps)))
			(#\U (list x (+ y i) (+ i steps)))
			(#\D (list x (- y i) (+ i steps)))))))

  (defun parse-input ()
    (let ((lines (remove "" (uiop:split-string input :separator '(#\newline)) :test #'equal)))
      (mapcar (lambda (x) (remove ""  (uiop:split-string x :separator '(#\comma)) :test #'equal))
	      lines)))

  (defun steps-eq (s1 s2)
    (equal (subseq s1 0 2) (subseq s2 0 2)))

  (defun steps-hash (s1)
    (sxhash (subseq s1 0 2)))

  (sb-ext:define-hash-table-test steps-eq steps-hash)

  (defun create-steps (stepl)
    (let ((x 0)
	  (y 0)
	  (stepnum 0))
      (remove-duplicates
       (apply
	#'append
	(mapcar
	 (lambda (stepstr)
	   (let* ((steps (create-single-step stepstr x y stepnum))
		  (lastpos (car (last steps))))
	     (format t "list: lastpos ~S x ~S y ~S stepnum ~S~%" lastpos x y stepnum)
	     (setf x (car lastpos))
	     (setf y (cadr lastpos))
	     (setf stepnum (caddr lastpos))
	     steps))
	 stepl))
       :test #'steps-eq)))

  (defun make-step-hash ()
    (make-hash-table :test 'steps-eq))

  (defun set-or-increment-hash (position table)
    (setf (gethash position table)
	  (if (gethash position table)
	      (1+ (gethash position table))
		1)))

  (defun set-step-counts (table wires)
    (dolist (wire wires)
      (dolist (position wire)
	(set-or-increment-hash position table))))

  (defun find-intersections (table)
    (loop for value being the hash-values of table
	    using (hash-key key)
	  when (> value 1)
	    collect key))

  (defun manhattan-distance (x y)
    (+ (abs x) (abs y)))

  (defun smallest-distance (intersections)
    (apply #'min
	   (mapcar
	    (lambda (x) (manhattan-distance (car x) (cadr x)))
	    intersections)))

  (let ((table (make-step-hash))
	(wires (mapcar #'create-steps (parse-input))))
    (format t "here~%")
    (set-step-counts table wires)
    (format t "here1~%")
    (let ((intersections (find-intersections table)))
      (format t "here2~%")
      (smallest-distance intersections)))
#+end_src
